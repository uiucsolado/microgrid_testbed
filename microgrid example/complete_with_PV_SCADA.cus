<ui_settings>
    <version>2.5</version>
    <model_locked>False</model_locked>
    <canvas_bg_color>#ffffff</canvas_bg_color>
    <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts.
# NOTE: This code is always executed prior simulation start.

# Variable 'SETTINGS_DIR' holds directory where loaded Panel .cus file is located.
# Also you can call 'get_settings_dir_path()' function in any
# Macro and Expression scripts to get the same directory.
SETTINGS_DIR = get_settings_dir_path()

# The 'add_to_python_path(folder)' function can be used to add custom folder
# with Python files and packages to the PYTHONPATH. After folder is added, all Python 
# files and Python packages from it can be imported into the SCADA Namespace.

# HIL API is imported as 'hil'
# Numpy module is imported as 'np'
# Scipy module is imported as 'sp'
# Schematic Editor model namespace is imported as 'scm'
# Function for printing to HIL SCADA Message log is imported as 'printf'.

arrow_count = 0
arrow_count_ev = 0

printf('Extracting load profile. Please wait ...')
import csv
path_table = r"C:\00 Typhoon SVN\t_misc\00 Project management\90 Demos\0900 EATON-Typhoon Demo 5_26_2020\CAISO-demand-20200512.csv"
load_profile_P = []
load_profile_Q = []
with open(path_table) as csv_file:
    csv_reader = csv.reader(csv_file,delimiter=',')
    #str_load_profile_P = csv_reader
    line_count = 0
    for row in csv_reader:
        if line_count != 3:
            pass
        else:
            load_profile_P = row[1:-1]
        line_count += 1
    
#convert entries from string to float and scale the power range to fit the requirements for ismulation.
load_profile_P = [(float(k)/2000 * 4.9824 - 45.4289) for k in load_profile_P]
jumps = [(load_profile_P[i+1]-load_profile_P[i]) for i in range(len(load_profile_P)-1)]
printf('max rise = '+str(max(jumps))+'kW')
printf('max fall = '+str(min(jumps))+'kW')

length_profile = len(load_profile_P)
printf('Number of entries = '+str(length_profile))
printf('load_profile_P[0] = '+str(load_profile_P[0]))
printf('load_profile_P['+str(length_profile-1)+'] = '+str(load_profile_P[length_profile-1]))
printf('Max load_profile = '+str(max(load_profile_P)))
printf('Min load_profile = '+str(min(load_profile_P)))
#Additional global vars to be used in some widgets
load_counter = 0
start_profile = 0
progress_update = 0]]></initialization_code>
    <components>
        <component_data>
                <id>c1854390ab5711ea93f40050b686ec77</id>
                <name><![CDATA[]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['d0edb4e7ab5711ea9bcf0050b686ec77', 'd0ee77b5ab5711ea93700050b686ec77', 'd0ee77b6ab5711ea9fc90050b686ec77', 'd0ee77b7ab5711ea8c150050b686ec77', 'd0ee77bcab5711ea872f0050b686ec77', 'd0ee77bdab5711eab5b10050b686ec77', 'd0ee77beab5711eabdfb0050b686ec77', 'd0eec594ab5711eaa62f0050b686ec77', 'd0eec5a4ab5711eaa9d40050b686ec77', 'd0eec5a5ab5711eaad950050b686ec77', 'd0eeec90ab5711ea87910050b686ec77', 'd0ef6168ab5711eab2d70050b686ec77', 'd0ef6169ab5711eab1a10050b686ec77', 'd0ef616dab5711eab1620050b686ec77', 'e0fb5870ab5711eaa9b80050b686ec77', 'b1efc5faab5811eaabf60050b686ec77', 'c321a852ab5e11eab2c70050b686ec77', 'f802a28cab6411eaadea0050b686ec77', '68c9cee6ac1a11ea855e0050b686ec77', 'f8b424f4acc411ea962d0050b686ec77', 'd0ee77baab5711eaa3fe0050b686ec77', 'd0edb4e6ab5711eaae650050b686ec77', 'd0ee77b8ab5711eab2b00050b686ec77', 'd0ee77bbab5711eaa52a0050b686ec77', 'd0ee77b9ab5711ea8da50050b686ec77']]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

path_to_component = "Electric Vehicle.Battery inverter."
path_to_inputs = "Electric Vehicle.Batt_in."
path_to_outputs = "Electric Vehicle.Batt_out."
path_to_battery = "Electric Vehicle."

##########################################################################################
###############################   BASE VARIABLES   #######################################
##########################################################################################

Vb = 250.0  # V
fb = 60.0  # Hz
Sb = 22000.0  # VA]]></initialization_code>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>1272</width>
                    <height>736</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0edb4e7ab5711ea9bcf0050b686ec77</id>
                <name><![CDATA[NG Genset]]></name>
                <displayed_name><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:10pt;">NG Genset</span></p></body></html>]]></displayed_name>
                <name_position><![CDATA[Top]]></name_position>
                <type>SubPanel</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['d0edb4e8ab5711eabd5c0050b686ec77']]]></components_ids>
                <hierarchy_position>2</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <use_background_image>True</use_background_image>
                <image><![CDATA[..\..\0900 EATON-Typhoon Demo 5_26_2020\img\Genset_image_for_scada.png]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>408.0</x>
                    <y>424.0</y>
                    <width>120</width>
                    <height>192</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee77b5ab5711ea93700050b686ec77</id>
                <name><![CDATA[ESS]]></name>
                <type>BarGraphDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
meter_name = 'Home.Batt_out1.'

P_percent = abs(hil.read_analog_signal(name=meter_name+'P_kW'))/20.0 * 100.0
SOC_percent = hil.read_analog_signal(name='Home.Batt1_SoC')

# specify one bar data ('bar_name', 'value', 'minimum_value' and 'maximum_value' parts are mandatory)
P_barData = {
    # display name
    "bar_name": "P",
    # value to display
    "value": P_percent,
    # value unit
    "unit": "%",
    # minimum value
    "minimum_value": 0.0,
    # maximum value
    "maximum_value": 110.0,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    }
    
SOC_barData = {
    # display name
    "bar_name": "SOC",
    # value to display
    "value": SOC_percent,
    # value unit
    "unit": "%",
    # minimum value
    "minimum_value": 0.0,
    # maximum value
    "maximum_value": 110.0,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    }    


# list of bars data: [barData1, barData2,...barData10]
displayValue = [P_barData, SOC_barData]
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <bars_data>
                    </bars_data>
                <widget_settings>
                    <x>8.0</x>
                    <y>632.0</y>
                    <width>128</width>
                    <height>70</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee77b6ab5711ea9fc90050b686ec77</id>
                <name><![CDATA[Grid]]></name>
                <type>BarGraphDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
meter_name = 'Home.Grid_meter_split.'

VrmsLL = hil.read_analog_signal(name=meter_name+'VLL_RMS')
PkW = hil.read_analog_signal(name=meter_name+'POWER_P')/1e3
QkVAr = hil.read_analog_signal(name=meter_name+'POWER_Q')/1e3
#pf = hil.read_analog_signal(name=meter_name+'pf')
f = hil.read_analog_signal(name=meter_name+'f_Hz')
Irms = hil.read_analog_signal(name=meter_name+'I_RMS')


# specify one bar data ('bar_name', 'value', 'minimum_value' and 'maximum_value' parts are mandatory)
PkW_barData = {
    # display name
    "bar_name": "P",
    # value to display
    "value": PkW,
    # value unit
    "unit": "kW",
    # minimum value
    "minimum_value": -60.0,
    # maximum value
    "maximum_value": 60.0,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    }
    
QkVAr_barData = {
    # display name
    "bar_name": "Q",
    # value to display
    "value": QkVAr,
    # value unit
    "unit": "kVAr",
    # minimum value
    "minimum_value": -50.0,
    # maximum value
    "maximum_value": 50.0,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    }    



VrmsLL_barData = {
    # display name
    "bar_name": "V",
    # value to display
    "value": VrmsLL,
    # value unit
    "unit": "Vrms LL",
    # minimum value
    "minimum_value": 0.0,
    # maximum value
    "maximum_value": 300.0,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    }
    
I_RMS_barData = {
    # display name
    "bar_name": "I",
    # value to display
    "value": Irms,
    # value unit
    "unit": "A rms",
    # minimum value
    "minimum_value": 0.0,
    # maximum value
    "maximum_value": 300.0,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    }    
    
f_barData = {
    # display name
    "bar_name": "f",
    # value to display
    "value": f,
    # value unit
    "unit": "Hz",
    # minimum value
    "minimum_value": 40.0,
    # maximum value
    "maximum_value": 70.0,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    } 
    
# list of bars data: [barData1, barData2,...barData10]
displayValue = [PkW_barData, QkVAr_barData, VrmsLL_barData, f_barData, I_RMS_barData]
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <bars_data>
                    </bars_data>
                <widget_settings>
                    <x>464.0</x>
                    <y>48.0</y>
                    <width>256</width>
                    <height>175</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee77b7ab5711ea8c150050b686ec77</id>
                <name><![CDATA[NG genset]]></name>
                <type>BarGraphDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
meter_name = 'Home.Natural Gas Genset.'

PkW = hil.read_analog_signal(name=meter_name+'P_gen_kW')
QkVAr = hil.read_analog_signal(name=meter_name+'Q_gen_kVAr')
pf = hil.read_analog_signal(name=meter_name+'cos_phi_gen')
f = hil.read_analog_signal(name=meter_name+'n_rpm')/30.0



# specify one bar data ('bar_name', 'value', 'minimum_value' and 'maximum_value' parts are mandatory)
PkW_barData = {
    # display name
    "bar_name": "PkW",
    # value to display
    "value": PkW,
    # value unit
    "unit": "kW",
    # minimum value
    "minimum_value": -5.0,
    # maximum value
    "maximum_value": 50.0,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    }
    
pf_barData = {
    # display name
    "bar_name": "pf",
    # value to display
    "value": pf,
    # value unit
    "unit": "",
    # minimum value
    "minimum_value": -1.2,
    # maximum value
    "maximum_value": 1.2,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    }    

f_barData = {
    # display name
    "bar_name": "f",
    # value to display
    "value": f,
    # value unit
    "unit": "Hz",
    # minimum value
    "minimum_value": 0.0,
    # maximum value
    "maximum_value": 100.0,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    }    
    
# list of bars data: [barData1, barData2,...barData10]
displayValue = [PkW_barData, pf_barData, f_barData]
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <bars_data>
                    </bars_data>
                <widget_settings>
                    <x>480.0</x>
                    <y>296.0</y>
                    <width>136</width>
                    <height>105</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee77bcab5711ea872f0050b686ec77</id>
                <name><![CDATA[Home]]></name>
                <type>BarGraphDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
meter_name = 'Charging Station.Charging_station_meter_split.'

PkW = hil.read_analog_signal(name=meter_name+'POWER_P')/1e3
QkVAr = hil.read_analog_signal(name=meter_name+'POWER_Q')/1e3
pf = hil.read_analog_signal(name=meter_name+'pf')


# specify one bar data ('bar_name', 'value', 'minimum_value' and 'maximum_value' parts are mandatory)
PkW_barData = {
    # display name
    "bar_name": "P",
    # value to display
    "value": PkW,
    # value unit
    "unit": "kW",
    # minimum value
    "minimum_value": -50.0,
    # maximum value
    "maximum_value": 50.0,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    }
    
pf_barData = {
    # display name
    "bar_name": "pf",
    # value to display
    "value": pf,
    # value unit
    "unit": "",
    # minimum value
    "minimum_value": -1.0,
    # maximum value
    "maximum_value": 1.0,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    }    

# list of bars data: [barData1, barData2,...barData10]
displayValue = [PkW_barData, pf_barData]
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <bars_data>
                    </bars_data>
                <widget_settings>
                    <x>720.0</x>
                    <y>320.0</y>
                    <width>128</width>
                    <height>70</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee77bdab5711eab5b10050b686ec77</id>
                <name><![CDATA[Lumped Load]]></name>
                <type>BarGraphDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
meter_name = 'Home.Lump1_out.'

P_percent = hil.read_analog_signal(name=meter_name+'P_kW') / 20.0 * 100.0

# specify one bar data ('bar_name', 'value', 'minimum_value' and 'maximum_value' parts are mandatory)
P_barData = {
    # display name
    "bar_name": "Load",
    # value to display
    "value": P_percent,
    # value unit
    "unit": "%",
    # minimum value
    "minimum_value": -10.0,
    # maximum value
    "maximum_value": 110.0,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    }

# list of bars data: [barData1, barData2,...barData10]
displayValue = [P_barData]
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <bars_data>
                    </bars_data>
                <widget_settings>
                    <x>224.0</x>
                    <y>632.0</y>
                    <width>120</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee77beab5711eabdfb0050b686ec77</id>
                <name><![CDATA[EV]]></name>
                <displayed_name><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">EV</p></body></html>]]></displayed_name>
                <name_position><![CDATA[Top]]></name_position>
                <type>SubPanel</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['d0ee77bfab5711ea9a630050b686ec77', 'd0ee9eaeab5711ea9c310050b686ec77', 'd0ee9eafab5711ea9ed30050b686ec77', 'd0ee9eb0ab5711ea81c10050b686ec77', 'd0ee9eb1ab5711eaaa920050b686ec77']]]></components_ids>
                <hierarchy_position>2</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <use_background_image>True</use_background_image>
                <image><![CDATA[..\..\0900 EATON-Typhoon Demo 5_26_2020\img\scada_ev.png]]></image>
                <image_scaling><![CDATA[Ignore aspect ratio]]></image_scaling>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>944.0</x>
                    <y>440.0</y>
                    <width>296</width>
                    <height>144</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0eec594ab5711eaa62f0050b686ec77</id>
                <name><![CDATA[ESS Panel]]></name>
                <displayed_name><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">ESS Panel</p></body></html>]]></displayed_name>
                <name_position><![CDATA[Top]]></name_position>
                <type>SubPanel</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['d0eec595ab5711eab3000050b686ec77', 'd0eec596ab5711ea90ad0050b686ec77', 'd0eec597ab5711eaaa210050b686ec77', 'd0eec598ab5711ea963c0050b686ec77', 'd0eec599ab5711eaa81a0050b686ec77', 'd0eec59aab5711eab42e0050b686ec77', 'd0eec59bab5711ea899d0050b686ec77', 'd0eec59cab5711eabe7c0050b686ec77', 'd0eec59dab5711eaacf00050b686ec77', 'd0eec59eab5711eaafd40050b686ec77', 'd0eec59fab5711eabe5e0050b686ec77', 'd0eec5a0ab5711eabd560050b686ec77', 'd0eec5a1ab5711ea8b680050b686ec77', 'd0eec5a2ab5711eab5b40050b686ec77', 'd0eec5a3ab5711eabd0d0050b686ec77']]]></components_ids>
                <hierarchy_position>2</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <use_background_image>True</use_background_image>
                <image><![CDATA[..\..\0900 EATON-Typhoon Demo 5_26_2020\img\ess_for_scada_png.png]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

input_stem = 'Home.Batt_in1'
output_stem = 'Home.Batt_out1'
inv_root = 'Home.Battery inverter (Average)1'
v_nom_LL = 208.0
f_nom_Hz = 60.0
]]></initialization_code>
                <widget_settings>
                    <x>8.0</x>
                    <y>432.0</y>
                    <width>128</width>
                    <height>184</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0eec5a4ab5711eaa9d40050b686ec77</id>
                <name><![CDATA[Home]]></name>
                <type>BarGraphDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
meter_name = 'Home.Lump1_out.'

PkW = hil.read_analog_signal(name=meter_name+'P_kW')
QkVAr = hil.read_analog_signal(name=meter_name+'Q_kVAr')
pf = hil.read_analog_signal(name=meter_name+'Pf')
Irms = hil.read_analog_signal(name='Home.Lump1.Irms1')



# specify one bar data ('bar_name', 'value', 'minimum_value' and 'maximum_value' parts are mandatory)
PkW_barData = {
    # display name
    "bar_name": "P",
    # value to display
    "value": PkW,
    # value unit
    "unit": "kW",
    # minimum value
    "minimum_value": -50.0,
    # maximum value
    "maximum_value": 50.0,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    }
    
pf_barData = {
    # display name
    "bar_name": "pf",
    # value to display
    "value": pf,
    # value unit
    "unit": "",
    # minimum value
    "minimum_value": -1.2,
    # maximum value
    "maximum_value": 1.2,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    }    

Irms_barData = {
    # display name
    "bar_name": "Irms",
    # value to display
    "value": Irms,
    # value unit
    "unit": "A rms",
    # minimum value
    "minimum_value": 0.0,
    # maximum value
    "maximum_value": 100.0,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    }    
    
# list of bars data: [barData1, barData2,...barData10]
displayValue = [PkW_barData, pf_barData, Irms_barData]
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <bars_data>
                    </bars_data>
                <widget_settings>
                    <x>288.0</x>
                    <y>296.0</y>
                    <width>160</width>
                    <height>105</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0eec5a5ab5711eaad950050b686ec77</id>
                <name><![CDATA[Loads]]></name>
                <displayed_name><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Loads</p></body></html>]]></displayed_name>
                <name_position><![CDATA[Top]]></name_position>
                <type>SubPanel</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['d0eec5a6ab5711ea87690050b686ec77', 'd0eec5a7ab5711ea83240050b686ec77', 'd0eec5a8ab5711ea971d0050b686ec77', 'd0eeec88ab5711eaa9f90050b686ec77', 'd0eeec89ab5711eaabff0050b686ec77', 'd0eeec8aab5711eaac170050b686ec77', 'd0eeec8bab5711eab6ff0050b686ec77', 'd0eeec8cab5711ea8c090050b686ec77', 'd0eeec8dab5711ea9ee50050b686ec77']]]></components_ids>
                <hierarchy_position>2</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <use_background_image>True</use_background_image>
                <image><![CDATA[..\..\0900 EATON-Typhoon Demo 5_26_2020\img\light_bulb_downsampled.jpg]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

input_stem = 'Home.Lump1_in'
output_stem = 'Home.Lump1_out']]></initialization_code>
                <widget_settings>
                    <x>216</x>
                    <y>464</y>
                    <width>128</width>
                    <height>120</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0eeec90ab5711ea87910050b686ec77</id>
                <name><![CDATA[EV Port]]></name>
                <displayed_name><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">EV Port</p></body></html>]]></displayed_name>
                <name_position><![CDATA[Top]]></name_position>
                <type>SubPanel</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['d0eeec91ab5711ea87770050b686ec77', 'd0eeec92ab5711ea89cd0050b686ec77', 'd0ef1383ab5711eaae010050b686ec77', 'd0ef1384ab5711eab4ca0050b686ec77', 'd0ef1385ab5711eaae680050b686ec77', 'd0ef1386ab5711eab7ea0050b686ec77', 'd0ef1387ab5711ea88590050b686ec77', 'd0ef1388ab5711eaa6a10050b686ec77', 'd0ef1389ab5711eabd540050b686ec77', 'd0ef138aab5711ea834b0050b686ec77', 'd0ef138bab5711eabc370050b686ec77', 'd0ef138cab5711ea83070050b686ec77', 'd0ef138dab5711eab3400050b686ec77', 'd0ef138eab5711eaa9440050b686ec77', 'd0ef138fab5711ea9ee60050b686ec77', 'd0ef1390ab5711ea82470050b686ec77', 'd0ef1391ab5711eabaa30050b686ec77', 'd0ef1392ab5711eab4310050b686ec77', 'd0ef1393ab5711eab9420050b686ec77', 'd0ef1394ab5711ea94940050b686ec77', 'd0ef1395ab5711ea8ac50050b686ec77', 'd0ef3a74ab5711eab6a50050b686ec77', 'd0ef3a75ab5711ea895f0050b686ec77', 'd0ef3a76ab5711eaa27a0050b686ec77', 'd0ef3a77ab5711eab0560050b686ec77', 'd0ef3a78ab5711ea90210050b686ec77', 'd0ef3a79ab5711eab2b00050b686ec77', 'd0ef3a7aab5711ea86950050b686ec77', 'd0ef3a7bab5711eab4af0050b686ec77', 'd0ef3a7cab5711ea96a20050b686ec77', 'd0ef3a7dab5711eab27b0050b686ec77', 'd0ef3a7eab5711ea979f0050b686ec77', 'd0ef3a7fab5711eab71b0050b686ec77', 'd0ef3a80ab5711ea8a130050b686ec77', 'd0ef3a81ab5711eab3da0050b686ec77', 'd0ef3a82ab5711ea8b9e0050b686ec77', 'd0ef3a83ab5711eab2b50050b686ec77', 'd0ef3a84ab5711eaa1780050b686ec77', 'd0ef3a85ab5711ea87620050b686ec77', 'd0ef3a86ab5711ea8aae0050b686ec77', 'd0ef3a87ab5711ea9d110050b686ec77', 'd0ef3a88ab5711eab4620050b686ec77', 'd0ef6166ab5711ea80880050b686ec77', 'd0ef6167ab5711eab31c0050b686ec77']]]></components_ids>
                <hierarchy_position>2</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <use_background_image>True</use_background_image>
                <image><![CDATA[..\..\0900 EATON-Typhoon Demo 5_26_2020\img\station.png]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

#path_to_component = 'Charging Station.Battery inverter.'

path_to_component = "Charging Station.Battery inverter."
path_to_inputs = "Charging Station.Batt_in."
path_to_outputs = "Charging Station.Batt_out."
path_to_battery = "Electric Vehicle."

##########################################################################################
###############################   BASE VARIABLES   #######################################
##########################################################################################

Vb = 208.0  # V
fb = 60.0  # Hz
Sb = 22000.0  # VA]]></initialization_code>
                <widget_settings>
                    <x>656</x>
                    <y>448</y>
                    <width>128</width>
                    <height>120</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef6168ab5711eab2d70050b686ec77</id>
                <name><![CDATA[NG genset]]></name>
                <type>BarGraphDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
meter_name = 'Home.Natural Gas Genset.'

P_percent = hil.read_analog_signal(name=meter_name+'P_gen_kW') / 25.0 * 100.0
rpm = hil.read_analog_signal(name=meter_name+'n_rpm')



# specify one bar data ('bar_name', 'value', 'minimum_value' and 'maximum_value' parts are mandatory)
P_barData = {
    # display name
    "bar_name": "Load",
    # value to display
    "value": P_percent,
    # value unit
    "unit": "%",
    # minimum value
    "minimum_value": -10.0,
    # maximum value
    "maximum_value": 110.0,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    }
    
rpm_barData = {
    # display name
    "bar_name": "rpm",
    # value to display
    "value": rpm,
    # value unit
    "unit": "rpm",
    # minimum value
    "minimum_value": -10.0,
    # maximum value
    "maximum_value": 3000.0,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    }    

# list of bars data: [barData1, barData2,...barData10]
displayValue = [P_barData, rpm_barData]
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <bars_data>
                    </bars_data>
                <widget_settings>
                    <x>400.0</x>
                    <y>632.0</y>
                    <width>136</width>
                    <height>70</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef6169ab5711eab1a10050b686ec77</id>
                <name><![CDATA[]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['d0ef616aab5711ea92920050b686ec77', 'd0ef616bab5711eaac300050b686ec77', 'd0ef616cab5711eab5670050b686ec77']]]></components_ids>
                <hierarchy_position>2</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

charging_station = 'Charging Station.'
charging_inverter = 'Charging Station.Battery inverter.']]></initialization_code>
                <widget_settings>
                    <x>792.0</x>
                    <y>448.0</y>
                    <width>152</width>
                    <height>120</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef616dab5711eab1620050b686ec77</id>
                <name><![CDATA[ESS]]></name>
                <type>BarGraphDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
meter_name = 'Home.Batt_out1.'

PkW = hil.read_analog_signal(name=meter_name+'P_kW') #By choice, ESS should produce +ve power when discharging battery and -ve power when charging
QkVAr = hil.read_analog_signal(name=meter_name+'Q_kVAr')
Irms = hil.read_analog_signal(name='Home.Battery inverter (Average)1.Irms1')


# specify one bar data ('bar_name', 'value', 'minimum_value' and 'maximum_value' parts are mandatory)
PkW_barData = {
    # display name
    "bar_name": "P",
    # value to display
    "value": PkW,
    # value unit
    "unit": "kW",
    # minimum value
    "minimum_value": -50.0,
    # maximum value
    "maximum_value": 50.0,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    }
    
QkVAr_barData = {
    # display name
    "bar_name": "Q",
    # value to display
    "value": QkVAr,
    # value unit
    "unit": "kVAr",
    # minimum value
    "minimum_value": -50.0,
    # maximum value
    "maximum_value": 50.0,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    }    
    
Irms_barData = {
    # display name
    "bar_name": "Irms",
    # value to display
    "value": Irms,
    # value unit
    "unit": "Arms",
    # minimum value
    "minimum_value": 0.0,
    # maximum value
    "maximum_value": 100.0,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    }        

# list of bars data: [barData1, barData2,...barData10]
displayValue = [PkW_barData, QkVAr_barData, Irms_barData]
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <bars_data>
                    </bars_data>
                <widget_settings>
                    <x>80.0</x>
                    <y>288.0</y>
                    <width>152</width>
                    <height>105</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0edb4e8ab5711eabd5c0050b686ec77</id>
                <name><![CDATA[NG Genset]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['d0edb4e9ab5711ea9a220050b686ec77', 'd0edb4eaab5711eaa9f70050b686ec77', 'd0edb4ebab5711ea87a80050b686ec77', 'd0eddbe4ab5711ea80840050b686ec77', 'd0eddbe5ab5711eaad8c0050b686ec77', 'd0eddbe6ab5711ea92da0050b686ec77', 'd0eddbe7ab5711eaa12b0050b686ec77', 'd0ee29cdab5711ea9ae80050b686ec77', 'd0ee77afab5711ea9ed90050b686ec77', 'd0ee77b0ab5711eaaf930050b686ec77', 'd0ee77b1ab5711ea88fb0050b686ec77', 'd0ee77b2ab5711eabd7a0050b686ec77', 'd0ee77b3ab5711ea85150050b686ec77', 'd0ee77b4ab5711eab8b00050b686ec77']]]></components_ids>
                <hierarchy_position>3</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

start_gen = 0
stop_gen = 0
op_mode = ''
f_setpoint = 60.0
v_setpoint = 208.0
P_setpoint_kW = 0.0
Q_setpoint_kVAr = 0.0
gen_root = 'Home.Natural Gas Genset.'
controls_root = 'Home.Natural Gas Genset.controls.'

]]></initialization_code>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>480</width>
                    <height>728</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0edb4e9ab5711ea9a220050b686ec77</id>
                <name><![CDATA[STATUS]]></name>
                <type>TextDisplay</type>
                <description><![CDATA[]]></description>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
text_append = ''
if (op_mode == 'V-F (GRID-FORMING)'):
    text_append = ' (V-F)'
elif (op_mode == 'P-V (GRID-FOLLOWING 1)'):
    text_append = ' (P-V)'
elif (op_mode == 'P-Q (GRID-FOLLOWING 2)'):
    text_append = ' (P-Q)'

state_genset_controller = hil.read_analog_signal(name=controls_root+'state')

if (state_genset_controller == -1):
    text = 'GENSET STOPPED'
    text_color = 'black'
if (state_genset_controller == 0):
    text = 'RUNNING IN STANDBY'
    text_color = 'orange'
if (state_genset_controller == 1):
    text = 'RAMPING TO RATED'
    text_color = 'green'
if (state_genset_controller == 2):
    text = 'SYNC IN PROGRESS'
    text_color = 'green'
if (state_genset_controller == 3):
    text = 'GENSET RUNNING' +text_append
    text_color = 'green'


# specify Text Display options ('text' part is mandatory)
textDisplayData = {

    # label text
    "text": text,

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": text_color,
}

# mandatory variable used for storing value that will be displayed
displayValue = textDisplayData
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>400</width>
                    <height>56</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0edb4eaab5711eaa9f70050b686ec77</id>
                <name><![CDATA[Alarm]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
exciter_error = hil.read_analog_signal(name=controls_root+'exciter.error_msg')
engine_error = hil.read_analog_signal(name=controls_root+'gov.error_msg')
genset_controller_unknown_error = hil.read_analog_signal(name=controls_root+'err_msg')
general_error = exciter_error + engine_error + genset_controller_unknown_error
displayValue = bool(general_error)
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>400.0</x>
                    <y>0.0</y>
                    <width>64</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0edb4ebab5711ea87a80050b686ec77</id>
                <name><![CDATA[Setpoints]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['d0edb4ecab5711ea83bf0050b686ec77', 'd0edb4edab5711eaa9560050b686ec77', 'd0edb4eeab5711ea87800050b686ec77', 'd0edb4efab5711eab6a20050b686ec77']]]></components_ids>
                <hierarchy_position>4</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>0.0</x>
                    <y>136.0</y>
                    <width>232</width>
                    <height>192</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0edb4ecab5711ea83bf0050b686ec77</id>
                <name><![CDATA[Frequency]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
f_setpoint = inputValue
hil.set_scada_input_value(controls_root+'f_Hz_ref', f_setpoint)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = f_setpoint
hil.set_scada_input_value(controls_root+'f_Hz_ref', f_setpoint)

]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = f_setpoint

]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[60.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[Hz]]></unit>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>184</width>
                    <height>40</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0edb4edab5711eaa9560050b686ec77</id>
                <name><![CDATA[Voltage]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
v_setpoint = inputValue
hil.set_scada_input_value(controls_root+'V_LL_ref_rms', v_setpoint)]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = v_setpoint
hil.set_scada_input_value(controls_root+'V_LL_ref_rms', v_setpoint)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = v_setpoint

]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[208.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[Vrms, L-L]]></unit>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>32.0</y>
                    <width>216</width>
                    <height>40</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0edb4eeab5711ea87800050b686ec77</id>
                <name><![CDATA[Active Power]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
P_setpoint_kW = inputValue
hil.set_scada_input_value(controls_root+'P controller.P_ref_kW', P_setpoint_kW)]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = P_setpoint_kW
hil.set_scada_input_value(controls_root+'P controller.P_ref_kW', P_setpoint_kW)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = P_setpoint_kW
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[kW]]></unit>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>64.0</y>
                    <width>192</width>
                    <height>40</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0edb4efab5711eab6a20050b686ec77</id>
                <name><![CDATA[Reactive Power]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
Q_setpoint_kVAr = inputValue
hil.set_scada_input_value(controls_root+'Q controller.Q_ref_kVAr', Q_setpoint_kVAr)]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = Q_setpoint_kVAr
hil.set_scada_input_value(controls_root+'Q controller.Q_ref_kVAr', Q_setpoint_kVAr)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = Q_setpoint_kVAr
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[kVAr]]></unit>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>96.0</y>
                    <width>200</width>
                    <height>40</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0eddbe4ab5711ea80840050b686ec77</id>
                <name><![CDATA[OPERATING MODE]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
global op_mode
op_mode = inputValue

if inputValue == 'STANDBY':
    hil.set_scada_input_value(controls_root+'mode', 0)
    pass
elif inputValue == 'V-F (GRID-FORMING)':
    hil.set_scada_input_value(controls_root+'mode', 1)
    pass
elif inputValue == 'P-V (GRID-FOLLOWING 1)':
    hil.set_scada_input_value(controls_root+'mode', 2)
    pass
elif inputValue == 'P-Q (GRID-FOLLOWING 2)':
    hil.set_scada_input_value(controls_root+'mode', 3)
    pass


]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 'STANDBY'

global op_mode
op_mode = 'STANDBY'

hil.set_scada_input_value(controls_root+'mode', 0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[P-Q (GRID-FOLLOWING 2)]]></inputValue>
                <availableValues><![CDATA[['STANDBY', 'V-F (GRID-FORMING)', 'P-V (GRID-FOLLOWING 1)', 'P-Q (GRID-FOLLOWING 2)']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>56.0</y>
                    <width>464</width>
                    <height>40</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0eddbe5ab5711eaad8c0050b686ec77</id>
                <name><![CDATA[f]]></name>
                <type>Gauge</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed

displayValue = hil.read_analog_signal(name=gen_root+'n_rpm')/30.0


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.controls.PLLs.f_Hz_gen_]]></signal_name>
                <unit><![CDATA[Hz]]></unit>
                <automatic_unit>False</automatic_unit>
                <updateRate>500</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>344.0</y>
                    <width>224</width>
                    <height>136</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>True</color_range>
                    <min>0.0</min>
                    <max>70.0</max>
                    <warning_range>(61.0, 62.0, 62.0, 63.0)</warning_range>
                    <critical_range>(63.0, 65.0, 66.0, 70.0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eddbe6ab5711ea92da0050b686ec77</id>
                <name><![CDATA[Vgen LL]]></name>
                <type>Gauge</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=gen_root+'vab_rms')


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.controls.PLLs.v_ab_rms_gen]]></signal_name>
                <unit><![CDATA[Vrms]]></unit>
                <automatic_unit>False</automatic_unit>
                <updateRate>500</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>232.0</x>
                    <y>344.0</y>
                    <width>224</width>
                    <height>136</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>500.0</max>
                    <warning_range>(1850.0, 1900.0, 1900.0, 1910.0)</warning_range>
                    <critical_range>(1910.0, 1950.0, 1950.0, 2000.0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eddbe7ab5711eaa12b0050b686ec77</id>
                <name><![CDATA[ENGINE DASHBOARD]]></name>
                <displayed_name><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:10pt;">ENGINE DASHBOARD</span></p></body></html>]]></displayed_name>
                <name_position><![CDATA[Top]]></name_position>
                <type>SubPanel</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['d0eddbe8ab5711eaa45a0050b686ec77', 'd0eddbe9ab5711eaac2d0050b686ec77', 'd0eddbeaab5711eabf2a0050b686ec77', 'd0eddbebab5711eaacb40050b686ec77', 'd0eddbecab5711eaa6740050b686ec77', 'd0eddbedab5711eaabf60050b686ec77', 'd0ee02ccab5711ea8b0b0050b686ec77', 'd0ee02cdab5711ea92b60050b686ec77', 'd0ee02ceab5711eab9110050b686ec77', 'd0ee02cfab5711eab4ae0050b686ec77', 'd0ee02d0ab5711ea82ee0050b686ec77', 'd0ee02d1ab5711ea99040050b686ec77', 'd0ee02d2ab5711ea83530050b686ec77', 'd0ee02d3ab5711eab7280050b686ec77', 'd0ee02d4ab5711ea85ba0050b686ec77', 'd0ee02d5ab5711eab4c20050b686ec77', 'd0ee02d6ab5711ea89da0050b686ec77', 'd0ee02d7ab5711ea8c140050b686ec77', 'd0ee02d8ab5711eabe270050b686ec77', 'd0ee29c2ab5711eaa4660050b686ec77', 'd0ee29c3ab5711ea99f90050b686ec77', 'd0ee29c4ab5711ea86ad0050b686ec77', 'd0ee29c5ab5711ea81250050b686ec77', 'd0ee29c6ab5711ea884a0050b686ec77', 'd0ee29c7ab5711ea9f930050b686ec77', 'd0ee29c8ab5711eaa04a0050b686ec77', 'd0ee29c9ab5711eab3850050b686ec77', 'd0ee29caab5711ea92350050b686ec77', 'd0ee29cbab5711eab07b0050b686ec77', 'd0ee29ccab5711eaa0e30050b686ec77']]]></components_ids>
                <hierarchy_position>4</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <use_background_image>True</use_background_image>
                <image><![CDATA[..\..\..\..\..\t_cprj\00 Project management\10 Customer projects\229 LEX TM3 - Moser Hybrid Gen\00 Model\img\engine-1.png]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

gov_root = 'Home.Natural Gas Genset.controls'
engine_root = 'Home.Natural Gas Genset']]></initialization_code>
                <widget_settings>
                    <x>0.0</x>
                    <y>528.0</y>
                    <width>232</width>
                    <height>152</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0eddbe8ab5711eaa45a0050b686ec77</id>
                <name><![CDATA[Power loss]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=gen_root+'Gas Engine.P_loss_kW')


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.Gas Engine.P_loss_kW]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>1168.0</x>
                    <y>320.0</y>
                    <width>120</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eddbe9ab5711eaac2d0050b686ec77</id>
                <name><![CDATA[Aeq]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=controls_root+'gov.Aeq_pu_') * 100.0


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.controls.gov.Aeq_pu_]]></signal_name>
                <unit><![CDATA[%]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>632.0</x>
                    <y>304.0</y>
                    <width>112</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eddbeaab5711eabf2a0050b686ec77</id>
                <name><![CDATA[Thermal torque]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=gen_root+'Gas Engine.Torque_thermal')


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.Gas Engine.Torque_thermal]]></signal_name>
                <unit><![CDATA[Nm]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>1168.0</x>
                    <y>272.0</y>
                    <width>120</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eddbebab5711eaacb40050b686ec77</id>
                <name><![CDATA[Shaft Torque]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=gen_root+'Gas Engine.T_shaft_')


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.Gas Engine.T_shaft_]]></signal_name>
                <unit><![CDATA[Nm]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>1408.0</x>
                    <y>288.0</y>
                    <width>112</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eddbecab5711eaa6740050b686ec77</id>
                <name><![CDATA[mi_dot]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=gen_root+'Gas Engine.mi_dot_')


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.Gas Engine.mi_dot_]]></signal_name>
                <unit><![CDATA[kg/s]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[5]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>608.0</x>
                    <y>32.0</y>
                    <width>144</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eddbedab5711eaabf60050b686ec77</id>
                <name><![CDATA[mfi_dot]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=gen_root+'Gas Engine.mfi_dot')


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.Gas Engine.mfi_dot]]></signal_name>
                <unit><![CDATA[kg/s]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[4]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>128.0</y>
                    <width>112</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee02ccab5711ea8b0b0050b686ec77</id>
                <name><![CDATA[Shaft Speed]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=gen_root+'n_rpm')


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.n_rpm]]></signal_name>
                <unit><![CDATA[rpm]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>1408.0</x>
                    <y>192.0</y>
                    <width>112</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>True</color_range>
                    <green_range>(0.0, 1800.0, 1800.0, 1850.0)</green_range>
                    <orange_range>(1850.0, 1950.0, 1950.0, 2000.0)</orange_range>
                    <red_range>(2000.0, 2001.0, 2001.0, 2002.0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee02cdab5711ea92b60050b686ec77</id>
                <name><![CDATA[P manifold]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=gen_root+'Gas Engine.P_manifold_MPa')


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.Gas Engine.P_manifold_MPa]]></signal_name>
                <unit><![CDATA[MPa]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[4]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>832.0</x>
                    <y>168.0</y>
                    <width>112</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee02ceab5711eab9110050b686ec77</id>
                <name><![CDATA[Fuel fraction]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=gen_root+'Gas Engine.fuel_fraction')


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.Gas Engine.fuel_fraction]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[4]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>832.0</x>
                    <y>264.0</y>
                    <width>112</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee02cfab5711eab4ae0050b686ec77</id>
                <name><![CDATA[Vol. eff.]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=gen_root+'Gas Engine.eta_vol_')*100.0

]]></code>
                <signal_name><![CDATA[Natural Gas Genset.Gas Engine.eta_vol_]]></signal_name>
                <unit><![CDATA[%]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>1168.0</x>
                    <y>224.0</y>
                    <width>120</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee02d0ab5711ea82ee0050b686ec77</id>
                <name><![CDATA[Shaft Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=gen_root+'Gas Engine.P_shaft_kW')


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.Gas Engine.P_shaft_kW]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>1408.0</x>
                    <y>240.0</y>
                    <width>112</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee02d1ab5711ea99040050b686ec77</id>
                <name><![CDATA[λ_spb]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=gen_root+'Gas Engine.lambda_spb_')


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.Gas Engine.lambda_spb_]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[4]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>832.0</x>
                    <y>216.0</y>
                    <width>112</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee02d2ab5711ea83530050b686ec77</id>
                <name><![CDATA[Thermal eff.]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=gen_root+'Gas Engine.eta_therm_') * 100.0


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.Gas Engine.eta_therm_]]></signal_name>
                <unit><![CDATA[%]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>1168.0</x>
                    <y>176.0</y>
                    <width>120</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee02d3ab5711eab7280050b686ec77</id>
                <name><![CDATA[Image component]]></name>
                <type>Image</type>
                <description><![CDATA[]]></description>
                <image><![CDATA[..\..\..\..\..\t_cprj\00 Project management\10 Customer projects\229 LEX TM3 - Moser Hybrid Gen\00 Model\img\engine_diagrams_img.png]]></image>
                <image_scaling><![CDATA[Ignore aspect ratio]]></image_scaling>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>1544</width>
                    <height>424</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Transparent]]></background_type>
                    <is_background>True</is_background>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee02d4ab5711ea85ba0050b686ec77</id>
                <name><![CDATA[Po]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=gen_root+'Gas Engine.Po_')/1e6


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.Gas Engine.Po_]]></signal_name>
                <unit><![CDATA[MPa]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[4]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>480.0</x>
                    <y>144.0</y>
                    <width>112</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee02d5ab5711eab4c20050b686ec77</id>
                <name><![CDATA[To]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=gen_root+'Gas Engine.To_')


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.Gas Engine.Po_]]></signal_name>
                <unit><![CDATA[K]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[4]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>480.0</x>
                    <y>192.0</y>
                    <width>112</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee02d6ab5711ea89da0050b686ec77</id>
                <name><![CDATA[Tm]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=gen_root+'Gas Engine.Tm_')


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.Gas Engine.Po_]]></signal_name>
                <unit><![CDATA[K]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[4]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>832.0</x>
                    <y>312.0</y>
                    <width>112</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee02d7ab5711ea8c140050b686ec77</id>
                <name><![CDATA[θ]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=gen_root+'Gas Engine.theta_deg_')

]]></code>
                <signal_name><![CDATA[Natural Gas Genset.controls.gov.Aeq_pu_]]></signal_name>
                <unit><![CDATA[°]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>976.0</x>
                    <y>296.0</y>
                    <width>112</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee02d8ab5711eabe270050b686ec77</id>
                <name><![CDATA[NOx emissions]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=gen_root+'Gas Engine.NOx')


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.Gas Engine.NOx]]></signal_name>
                <unit><![CDATA[ppm [mol fraction]]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>1136.0</x>
                    <y>360.0</y>
                    <width>184</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee29c2ab5711eaa4660050b686ec77</id>
                <name><![CDATA[Error message]]></name>
                <type>TextDisplay</type>
                <description><![CDATA[]]></description>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# specify Text Display options ('text' part is mandatory)

error_code = hil.read_analog_signal(name=controls_root+'gov.error_msg')

if error_code == 0:
    error_message = 'engine ok'
    message_color = 'green'
if error_code == 1:
    error_message = 'engine overspeed'
    message_color = 'red'
    
if error_code == 2:
    error_message = 'engine stall'
    message_color = 'red'
    
if error_code == 1000:
    error_message = 'unknown error'
    message_color = 'red'

textDisplayData = {

    # label text
    "text": error_message,

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": message_color,
}

# mandatory variable used for storing value that will be displayed
displayValue = textDisplayData
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>392.0</x>
                    <y>0.0</y>
                    <width>184</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee29c3ab5711ea99f90050b686ec77</id>
                <name><![CDATA[Fuel ON]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off

ignition = hil.read_analog_signal(name=gov_root+'.gov.ignition_')
if ignition > 0:
    displayValue = True
else:
    displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>632.0</x>
                    <y>0.0</y>
                    <width>80</width>
                    <height>32</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee29c4ab5711ea86ad0050b686ec77</id>
                <name><![CDATA[state]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=controls_root+'gov.state')


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.controls.gov.state]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[0]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>240.0</x>
                    <y>0.0</y>
                    <width>72</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee29c5ab5711ea81250050b686ec77</id>
                <name><![CDATA[err]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=controls_root+'gov.error_msg')


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.controls.gov.error_msg]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[0]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>312.0</x>
                    <y>0.0</y>
                    <width>72</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee29c6ab5711ea884a0050b686ec77</id>
                <name><![CDATA[]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
Aeq = hil.read_analog_signal(name=controls_root+'gov.Aeq_pu_')*100


data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": ['Throttle [%]'],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [Aeq],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['Natural Gas Genset.n_rpm']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>500</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>680.0</x>
                    <y>432.0</y>
                    <width>304</width>
                    <height>208</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>60</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee29c7ab5711ea9f930050b686ec77</id>
                <name><![CDATA[Manifold pressure [MPa]]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
MPa = hil.read_analog_signal(name=gen_root+'Gas Engine.P_manifold_MPa')

data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": ['Pm [MPa]'],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [MPa],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['Natural Gas Genset.Gas Engine.P_manifold_MPa']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>500</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>376.0</x>
                    <y>432.0</y>
                    <width>304</width>
                    <height>208</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>60</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee29c8ab5711eaa04a0050b686ec77</id>
                <name><![CDATA[]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
rpm = hil.read_analog_signal(name=gen_root+'n_rpm')

data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": ['rpm'],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [rpm],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['Natural Gas Genset.Gas Engine.P_shaft_kW']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>500</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>984.0</x>
                    <y>432.0</y>
                    <width>304</width>
                    <height>208</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>60</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee29c9ab5711eab3850050b686ec77</id>
                <name><![CDATA[Start engine (manual) NOT WORKING]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
hil.set_scada_input_value(controls_root+'gov.start_engine(manual)', 1)
hil.wait_msec(100.0)
hil.set_scada_input_value(controls_root+'gov.start_engine(manual)', 0)

#hil.set_scada_input_value(controls_root+'gov.start_engine', 0)
]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>272.0</x>
                    <y>288.0</y>
                    <width>224</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee29caab5711ea92350050b686ec77</id>
                <name><![CDATA[Stop engine (manual)]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
hil.set_scada_input_value(controls_root+'gov.stop(manual)', 1)
hil.wait_msec(100.0)
hil.set_scada_input_value(controls_root+'gov.stop(manual)', 0)

#hil.set_scada_input_value(controls_root+'gov.stop', 1)
#hil.wait_msec(100.0)
#hil.set_scada_input_value(controls_root+'gov.stop', 0)
]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>352.0</x>
                    <y>336.0</y>
                    <width>144</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee29cbab5711eab07b0050b686ec77</id>
                <name><![CDATA[Reset Engine Faults]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
hil.set_scada_input_value(controls_root+'gov.reset', 1)
hil.wait_msec(100.0)
hil.set_scada_input_value(controls_root+'gov.reset', 0)
]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>344.0</x>
                    <y>368.0</y>
                    <width>144</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee29ccab5711eaa0e30050b686ec77</id>
                <name><![CDATA[λsp setpoint]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=gen_root+'Gas Engine.lambda_sp_')


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.controls.gov.Aeq_pu_]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>120.0</x>
                    <y>296.0</y>
                    <width>112</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee29cdab5711ea9ae80050b686ec77</id>
                <name><![CDATA[GEN. DASHBOARD]]></name>
                <displayed_name><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:10pt;">GEN. DASHBOARD</span></p></body></html>]]></displayed_name>
                <name_position><![CDATA[Top]]></name_position>
                <type>SubPanel</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['d0ee29ceab5711eab0b60050b686ec77', 'd0ee29cfab5711ea9ac60050b686ec77', 'd0ee29d0ab5711ea9ad70050b686ec77', 'd0ee29d1ab5711eaaee70050b686ec77', 'd0ee29d2ab5711eab2f90050b686ec77', 'd0ee29d3ab5711eaa3a50050b686ec77', 'd0ee29d4ab5711ea96c20050b686ec77', 'd0ee50b4ab5711eab2ad0050b686ec77', 'd0ee50b5ab5711ea845a0050b686ec77', 'd0ee50b6ab5711eaa82b0050b686ec77', 'd0ee50b7ab5711ea93fe0050b686ec77', 'd0ee50b8ab5711ea8faf0050b686ec77', 'd0ee50b9ab5711ea84b40050b686ec77', 'd0ee50baab5711ea8a580050b686ec77', 'd0ee50bbab5711ea97e40050b686ec77', 'd0ee50bcab5711ea8c2d0050b686ec77', 'd0ee50bdab5711eab6cd0050b686ec77', 'd0ee50beab5711eabd460050b686ec77', 'd0ee50bfab5711ea927b0050b686ec77', 'd0ee50c0ab5711eaaac00050b686ec77', 'd0ee50c1ab5711ea973f0050b686ec77', 'd0ee50c2ab5711ea9e0f0050b686ec77', 'd0ee50c3ab5711eaaccb0050b686ec77', 'd0ee50c4ab5711eabd440050b686ec77', 'd0ee50c5ab5711eab4e40050b686ec77', 'd0ee50c6ab5711eab6450050b686ec77', 'd0ee50c7ab5711eabccf0050b686ec77', 'd0ee50c8ab5711eabbb60050b686ec77', 'd0ee77aeab5711eab38e0050b686ec77']]]></components_ids>
                <hierarchy_position>4</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <use_background_image>True</use_background_image>
                <image><![CDATA[..\..\..\..\..\t_cprj\00 Project management\10 Customer projects\229 LEX TM3 - Moser Hybrid Gen\00 Model\img\Synchronous-Motors-Market.jpg]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>240.0</x>
                    <y>528.0</y>
                    <width>224</width>
                    <height>152</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee29ceab5711eab0b60050b686ec77</id>
                <name><![CDATA[Synchroscope]]></name>
                <type>PhasorGraphDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ ['Phasor 1 name', Phasor 1 phase, Phasor 1 magnitude],
#                      ['Phasor X name', Phasor X phase, Phasor X magnitude] ]

phasor_gen_name = 'vab_gen'
phasor_grid_name = 'vab_grid'

mag_gen = hil.read_analog_signal(name=controls_root+'phasor_units.v_rms_gen_')
mag_grid = hil.read_analog_signal(name=controls_root+'phasor_units.v_rms_grid_')

phase_gen = hil.read_analog_signal(name=controls_root+'phasor_units.phase_a_gen_')
phase_grid = hil.read_analog_signal(name=controls_root+'phasor_units.phase_a_grid_')


displayValue = [    [phasor_gen_name, phase_gen, mag_gen],
                    [phasor_grid_name, phase_grid, mag_grid]]

]]></code>
                <signals><![CDATA[]]></signals>
                <updateRate>500</updateRate>
                <background_color>#ffffff</background_color>
                <hierarchy_position>5</hierarchy_position>
                <phasors_data>
                    </phasors_data>
                <widget_settings>
                    <x>376.0</x>
                    <y>224.0</y>
                    <width>280</width>
                    <height>264</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <range_max>20.0</range_max>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee29cfab5711ea9ac60050b686ec77</id>
                <name><![CDATA[Image component]]></name>
                <type>Image</type>
                <description><![CDATA[]]></description>
                <image><![CDATA[..\..\..\..\..\t_cprj\00 Project management\10 Customer projects\229 LEX TM3 - Moser Hybrid Gen\00 Model\img\gen_diagram_.png]]></image>
                <image_scaling><![CDATA[Ignore aspect ratio]]></image_scaling>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>16.0</x>
                    <y>128.0</y>
                    <width>912</width>
                    <height>128</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Transparent]]></background_type>
                    <is_background>True</is_background>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee29d0ab5711ea9ad70050b686ec77</id>
                <name><![CDATA[Vab gen]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Natural Gas Genset.controls.PLLs.v_ab_rms_gen]]></signal_name>
                <unit><![CDATA[VrmsLL]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[1]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>160.0</x>
                    <y>256.0</y>
                    <width>144</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee29d1ab5711eaaee70050b686ec77</id>
                <name><![CDATA[state]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Natural Gas Genset.controls.exciter.state]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[0]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>64</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee29d2ab5711eab2f90050b686ec77</id>
                <name><![CDATA[err]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Natural Gas Genset.controls.exciter.error_msg]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[0]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>64.0</x>
                    <y>0.0</y>
                    <width>64</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee29d3ab5711eaa3a50050b686ec77</id>
                <name><![CDATA[Error message]]></name>
                <type>TextDisplay</type>
                <description><![CDATA[]]></description>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# specify Text Display options ('text' part is mandatory)

error_code = hil.read_analog_signal(name=controls_root+'exciter.error_msg')
if error_code == 0:
    error_message = 'exciter ok'
    message_color = 'green'
if error_code == 1:
    error_message = 'stall'
    message_color = 'red'
    
if error_code == 2:
    error_message = 'overvoltage'
    message_color = 'red'
    
if error_code == 1000:
    error_message = 'unknown error'
    message_color = 'red'

textDisplayData = {

    # label text
    "text": error_message,

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": message_color,
}

# mandatory variable used for storing value that will be displayed
displayValue = textDisplayData
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>128.0</x>
                    <y>0.0</y>
                    <width>128</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee29d4ab5711ea96c20050b686ec77</id>
                <name><![CDATA[GCB Status]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = bool(hil.read_digital_signal(name=gen_root+'GCB_fb'))
displayValue = x
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>496.0</x>
                    <y>96.0</y>
                    <width>88</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee50b4ab5711eab2ad0050b686ec77</id>
                <name><![CDATA[Vab grid]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Natural Gas Genset.controls.PLLs.v_ab_rms_grid]]></signal_name>
                <unit><![CDATA[VrmsLL]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[1]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>736.0</x>
                    <y>200.0</y>
                    <width>144</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee50b5ab5711ea845a0050b686ec77</id>
                <name><![CDATA[frequency]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Natural Gas Genset.controls.PLLs.f_Hz_gen_]]></signal_name>
                <unit><![CDATA[Hz]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>160.0</x>
                    <y>304.0</y>
                    <width>144</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee50b6ab5711eaa82b0050b686ec77</id>
                <name><![CDATA[frequency]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Natural Gas Genset.controls.PLLs.f_Hz_grid_]]></signal_name>
                <unit><![CDATA[Hz]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>736.0</x>
                    <y>248.0</y>
                    <width>144</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee50b7ab5711ea93fe0050b686ec77</id>
                <name><![CDATA[dθ]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=controls_root+'Synchronizer.dtheta')


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.controls.Synchronizer.dtheta]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>488.0</x>
                    <y>480.0</y>
                    <width>64</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee50b8ab5711ea8faf0050b686ec77</id>
                <name><![CDATA[df]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=controls_root+'Synchronizer.df')


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.controls.Synchronizer.df]]></signal_name>
                <unit><![CDATA[Hz]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>424.0</x>
                    <y>480.0</y>
                    <width>64</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee50b9ab5711ea84b40050b686ec77</id>
                <name><![CDATA[dv]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=controls_root+'Synchronizer.dv')


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.controls.Synchronizer.dv]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>552.0</x>
                    <y>480.0</y>
                    <width>64</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee50baab5711ea8a580050b686ec77</id>
                <name><![CDATA[f match]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
f_match = bool(hil.read_analog_signal(name=controls_root+'Synchronizer.ok_df'))

displayValue = f_match
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>432.0</x>
                    <y>528.0</y>
                    <width>64</width>
                    <height>32</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee50bbab5711ea97e40050b686ec77</id>
                <name><![CDATA[v match]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
v_match = bool(hil.read_analog_signal(name=controls_root+'Synchronizer.ok_dv'))

displayValue = v_match
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>504.0</x>
                    <y>528.0</y>
                    <width>64</width>
                    <height>32</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee50bcab5711ea8c2d0050b686ec77</id>
                <name><![CDATA[θ match]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
theta_match = bool(hil.read_analog_signal(name=controls_root+'Synchronizer.ok_dtheta'))

displayValue = theta_match
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>576.0</x>
                    <y>528.0</y>
                    <width>72</width>
                    <height>32</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee50bdab5711eab6cd0050b686ec77</id>
                <name><![CDATA[direction match]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
dir_match = bool(hil.read_analog_signal(name=controls_root+'Synchronizer.ok_dir'))

displayValue = dir_match
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>320.0</x>
                    <y>528.0</y>
                    <width>104</width>
                    <height>32</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee50beab5711eabd460050b686ec77</id>
                <name><![CDATA[Reset Exciter]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
hil.set_scada_input_value(controls_root+'exciter.reset_exc', 1)
hil.wait_msec(100.0)
hil.set_scada_input_value(controls_root+'exciter.reset_exc', 0)
]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>72.0</y>
                    <width>176</width>
                    <height>32</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee50bfab5711ea927b0050b686ec77</id>
                <name><![CDATA[Enable exc (NOT WORKING)]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'

if inputValue:
    # do something when checkbox is checked
    hil.set_scada_input_value(controls_root+'exciter.stop_exc', 0)
    hil.set_scada_input_value(controls_root+'exciter.start_exc', 1)
    hil.wait_msec(500)
    hil.set_scada_input_value(controls_root+'exciter.start_exc', 0)
    


    pass
else:
    # do something when checkbox is unchecked
    hil.set_scada_input_value(controls_root+'exciter.start_exc', 0)
    hil.set_scada_input_value(controls_root+'exciter.stop_exc', 1)
    hil.wait_msec(500)
    hil.set_scada_input_value(controls_root+'exciter.stop_exc', 0)
    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = False
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[False]]></inputValue>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>40.0</y>
                    <width>176</width>
                    <height>32</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee50c0ab5711eaaac00050b686ec77</id>
                <name><![CDATA[P Gen]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Natural Gas Genset.P_gen_kW]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>160.0</x>
                    <y>352.0</y>
                    <width>144</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee50c1ab5711ea973f0050b686ec77</id>
                <name><![CDATA[Q Gen]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Natural Gas Genset.Q_gen_kVAr]]></signal_name>
                <unit><![CDATA[kVAr]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>160.0</x>
                    <y>400.0</y>
                    <width>144</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee50c2ab5711ea9e0f0050b686ec77</id>
                <name><![CDATA[Ia gen]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Natural Gas Genset.Ia_gen_rms]]></signal_name>
                <unit><![CDATA[Arms]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>160.0</x>
                    <y>208.0</y>
                    <width>144</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee50c3ab5711eaaccb0050b686ec77</id>
                <name><![CDATA[Note component]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Button not working</p></body></html>]]></text>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>184.0</x>
                    <y>40.0</y>
                    <width>96</width>
                    <height>32</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Transparent]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee50c4ab5711eabd440050b686ec77</id>
                <name><![CDATA[cos(φ)]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Natural Gas Genset.cos_phi_gen]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>160.0</x>
                    <y>448.0</y>
                    <width>144</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee50c5ab5711eab4e40050b686ec77</id>
                <name><![CDATA[P droop gain]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value(controls_root+'P_droop_gain', inputValue)]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 0.0
hil.set_scada_input_value(controls_root+'P_droop_gain', 0.0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <min>0.0</min>
                <max>0.2</max>
                <step>0.01</step>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>288.0</x>
                    <y>0.0</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee50c6ab5711eab6450050b686ec77</id>
                <name><![CDATA[Q droop gain]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value(controls_root+'Q_droop_gain', inputValue)]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 0.0
hil.set_scada_input_value(controls_root+'Q_droop_gain', 0.0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <min>0.0</min>
                <max>0.2</max>
                <step>0.01</step>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>592.0</x>
                    <y>0.0</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee50c7ab5711eabccf0050b686ec77</id>
                <name><![CDATA[P rate kW/s]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value(controls_root+'P controller.rise_fall_rate_P_kWps', inputValue)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 2.5
hil.set_scada_input_value(controls_root+'P controller.rise_fall_rate_P_kWps', 2.5)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[2.5]]></inputValue>
                <min>0.0</min>
                <max>25.0</max>
                <step>1.0</step>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>912.0</x>
                    <y>0.0</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee50c8ab5711eabbb60050b686ec77</id>
                <name><![CDATA[V exc]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[	]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Natural Gas Genset.controls.exciter.v_exc]]></signal_name>
                <unit><![CDATA[Vdc]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>24.0</x>
                    <y>256.0</y>
                    <width>112</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee77aeab5711eab38e0050b686ec77</id>
                <name><![CDATA[Init PID parameters]]></name>
                <type>Macro</type>
                <description><![CDATA[]]></description>
                <on_click_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.
# HIL API is imported as 'hil'

]]></on_click_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

#Init P controller
hil.set_scada_input_value('Home.Natural Gas Genset.controls.P controller.ki_P', 1.0)
hil.set_scada_input_value('Home.Natural Gas Genset.controls.P controller.kp_P', 0.01)
hil.set_scada_input_value('Home.Natural Gas Genset.controls.P controller.kd_P', 0.0)

#Init Q controller
hil.set_scada_input_value('Home.Natural Gas Genset.controls.Q controller.ki_Q', 0.1)
hil.set_scada_input_value('Home.Natural Gas Genset.controls.Q controller.kp_Q', 0.1)
hil.set_scada_input_value('Home.Natural Gas Genset.controls.Q controller.kd_Q', 0.0)

#Init Exciter
hil.set_scada_input_value('Home.Natural Gas Genset.controls.exciter.ki_exc', 0.4)
hil.set_scada_input_value('Home.Natural Gas Genset.controls.exciter.kp_exc', 0.1)
hil.set_scada_input_value('Home.Natural Gas Genset.controls.exciter.kd_exc', 0.001)

#Init governor
#Gov parameters are applied by gov state machine. See schmeatic model.
hil.set_scada_input_value('Home.Natural Gas Genset.controls.gov.ki_gov', 0.1)
hil.set_scada_input_value('Home.Natural Gas Genset.controls.gov.kp_gov', 0.5)
]]></on_start_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.
# HIL API is imported as 'hil'

]]></on_timer_code>
                <run_each>250</run_each>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>336.0</x>
                    <y>48.0</y>
                    <width>128</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee77afab5711ea9ed90050b686ec77</id>
                <name><![CDATA[P Gen]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=gen_root+'P_gen_kW')


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.P_gen_kW]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>24.0</x>
                    <y>480.0</y>
                    <width>160</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee77b0ab5711eaaf930050b686ec77</id>
                <name><![CDATA[Q Gen]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=gen_root+'Q_gen_kVAr')


]]></code>
                <signal_name><![CDATA[Natural Gas Genset.Q_gen_kVAr]]></signal_name>
                <unit><![CDATA[kVAr]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>264.0</x>
                    <y>480.0</y>
                    <width>160</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee77b1ab5711ea88fb0050b686ec77</id>
                <name><![CDATA[Synchroscope]]></name>
                <type>PhasorGraphDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ ['Phasor 1 name', Phasor 1 phase, Phasor 1 magnitude],
#                      ['Phasor X name', Phasor X phase, Phasor X magnitude] ]

phasor_gen_name = 'vab_gen'
phasor_grid_name = 'vab_grid'

mag_gen = hil.read_analog_signal(name=controls_root+'phasor_units.v_rms_gen_')
mag_grid = hil.read_analog_signal(name=controls_root+'phasor_units.v_rms_grid_')

phase_gen = hil.read_analog_signal(name=controls_root+'phasor_units.phase_a_gen_')
phase_grid = hil.read_analog_signal(name=controls_root+'phasor_units.phase_a_grid_')


displayValue = [    [phasor_gen_name, phase_gen, mag_gen],
                    [phasor_grid_name, phase_grid, mag_grid]]

]]></code>
                <signals><![CDATA[]]></signals>
                <updateRate>500</updateRate>
                <background_color>#ffffff</background_color>
                <hierarchy_position>4</hierarchy_position>
                <phasors_data>
                    </phasors_data>
                <widget_settings>
                    <x>232.0</x>
                    <y>136.0</y>
                    <width>240</width>
                    <height>192</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <range_max>20.0</range_max>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee77b2ab5711eabd7a0050b686ec77</id>
                <name><![CDATA[START GENSET]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
#Toggle ON button
hil.set_scada_input_value(controls_root+'start', 1.0)
hil.wait_msec(100.0)
hil.set_scada_input_value(controls_root+'start', 0.0)

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
start_gen = 0.0
hil.set_scada_input_value(controls_root+'start', start_gen)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>96.0</y>
                    <width>232</width>
                    <height>40</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee77b3ab5711ea85150050b686ec77</id>
                <name><![CDATA[STOP GENSET]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
hil.set_scada_input_value(controls_root+'stop', 1.0)
hil.wait_msec(100.0)
hil.set_scada_input_value(controls_root+'stop', 0.0)]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

stop_gen = 0.0
hil.set_scada_input_value(controls_root+'stop', 0.0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>232.0</x>
                    <y>96.0</y>
                    <width>232</width>
                    <height>40</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee77b4ab5711eab8b00050b686ec77</id>
                <name><![CDATA[GCB]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off

displayValue = bool(hil.read_digital_signal(name=gen_root+'GCB_fb'))
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>304.0</x>
                    <y>312.0</y>
                    <width>56</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee77bfab5711ea9a630050b686ec77</id>
                <name><![CDATA[Car Dashboard]]></name>
                <displayed_name><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:12pt;">Car Dashboard</span></p></body></html>]]></displayed_name>
                <name_position><![CDATA[Top]]></name_position>
                <type>SubPanel</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['d0ee77c0ab5711eaae720050b686ec77', 'd0ee77c1ab5711eaa2c30050b686ec77', 'd0ee9ea4ab5711ea95ad0050b686ec77', 'd0ee9ea5ab5711eab7f30050b686ec77', 'd0ee9ea6ab5711eab02d0050b686ec77', 'd0ee9ea7ab5711ea98cc0050b686ec77', 'd0ee9ea8ab5711eab2790050b686ec77', 'd0ee9ea9ab5711ea971d0050b686ec77', 'd0ee9eaaab5711eaa6a00050b686ec77', 'd0ee9eabab5711eaaab90050b686ec77', 'd0ee9eacab5711eabf6b0050b686ec77', 'd0ee9eadab5711ea924e0050b686ec77']]]></components_ids>
                <hierarchy_position>3</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <use_background_image>True</use_background_image>
                <image><![CDATA[..\..\..\..\..\..\users\efonk\appdata\roaming\typhoon\2020.1\examples\models\power electronics\electric_vehicle\Dashboard.PNG]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>528.0</x>
                    <y>32.0</y>
                    <width>700</width>
                    <height>288</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee77c0ab5711eaae720050b686ec77</id>
                <name><![CDATA[Image component]]></name>
                <type>Image</type>
                <description><![CDATA[]]></description>
                <image><![CDATA[..\..\0900 EATON-Typhoon Demo 5_26_2020\img\dashboard_clean.png]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>1824</width>
                    <height>1048</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Transparent]]></background_type>
                    <is_background>True</is_background>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee77c1ab5711eaa2c30050b686ec77</id>
                <name><![CDATA[Brake [%]]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value('Electric Vehicle.Load.Brake', inputValue)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 0
hil.set_scada_input_value('Electric Vehicle.Load.Brake', widgetValue)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0]]></inputValue>
                <min>0.0</min>
                <max>100.0</max>
                <step>1.0</step>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>760.0</x>
                    <y>616.0</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee9ea4ab5711ea95ad0050b686ec77</id>
                <name><![CDATA[]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[Electric Vehicle.motor started]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>250</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>800.0</x>
                    <y>744.0</y>
                    <width>32</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee9ea5ab5711eab7f30050b686ec77</id>
                <name><![CDATA[speed]]></name>
                <type>Gauge</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Electric Vehicle.Load.speed kmph]]></signal_name>
                <unit><![CDATA[km/h]]></unit>
                <automatic_unit>False</automatic_unit>
                <updateRate>250</updateRate>
                <decimals>1</decimals>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>288.0</x>
                    <y>464.0</y>
                    <width>304</width>
                    <height>192</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>True</color_range>
                    <min>0.0</min>
                    <max>250.0</max>
                    <warning_range>(190.0, 210.0, 190.0, 210.0)</warning_range>
                    <critical_range>(210.0, 260.0, 210.0, 260.0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee9ea6ab5711eab02d0050b686ec77</id>
                <name><![CDATA[P]]></name>
                <type>Gauge</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name='Electric Vehicle.P')/1000


]]></code>
                <signal_name><![CDATA[p]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>500</updateRate>
                <decimals>1</decimals>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>1208.0</x>
                    <y>464.0</y>
                    <width>304</width>
                    <height>192</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>True</color_range>
                    <min>-200.0</min>
                    <max>300.0</max>
                    <warning_range>(200.0, 250.0, 200.0, 250.0)</warning_range>
                    <critical_range>(250.0, 300.0, 250.0, 250.0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee9ea7ab5711ea98cc0050b686ec77</id>
                <name><![CDATA[start-stop motor]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'


if motor_state == 0:
    hil.set_scada_input_value('Electric Vehicle.start motor', 1.0)
    motor_state = 1
else:
    hil.set_scada_input_value('Electric Vehicle.start motor', 0.0)
    motor_state = 0
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
hil.set_scada_input_value('Electric Vehicle.start motor', 0.0)
motor_state = 0
hil.set_scada_input_value('Electric Vehicle.Throttle', 0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>624.0</x>
                    <y>744.0</y>
                    <width>144</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee9ea8ab5711eab2790050b686ec77</id>
                <name><![CDATA[speed kmph]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['Electric Vehicle.Load.speed kmph']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>680.0</x>
                    <y>400.0</y>
                    <width>424</width>
                    <height>160</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>0.0</y_range_min>
                    <y_range_max>250.0</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee9ea9ab5711ea971d0050b686ec77</id>
                <name><![CDATA[]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Electric Vehicle.Load.Distance]]></signal_name>
                <unit><![CDATA[km]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>1296.0</x>
                    <y>632.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee9eaaab5711eaa6a00050b686ec77</id>
                <name><![CDATA[Throttle [%] x 250kW]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value('Electric Vehicle.Throttle', inputValue)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.

widgetValue = 0
hil.set_scada_input_value('Electric Vehicle.Throttle', widgetValue)
]]></on_start_code>
                <on_stop_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 0
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
if motor_state == 0:
    widgetValue = 0
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0]]></inputValue>
                <min>0.0</min>
                <max>100.0</max>
                <step>1.0</step>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>760.0</x>
                    <y>560.0</y>
                    <width>288</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee9eabab5711eaaab90050b686ec77</id>
                <name><![CDATA[Typhoon ReGen]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off

power  = hil.read_analog_signal(name='Electric Vehicle.P')
if power<0:
    displayValue = True
else:
    displayValue = False]]></code>
                <updateRate>250</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>976.0</x>
                    <y>744.0</y>
                    <width>112</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee9eacab5711eabf6b0050b686ec77</id>
                <name><![CDATA[]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name='Electric Vehicle.Induction motor_machine mechanical speed')/2/np.pi*60

]]></code>
                <signal_name><![CDATA[machine mechanical speed]]></signal_name>
                <unit><![CDATA[RPM]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[0]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>368.0</x>
                    <y>632.0</y>
                    <width>152</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee9eadab5711ea924e0050b686ec77</id>
                <name><![CDATA[Battery SOC]]></name>
                <type>BarGraphDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# specify one bar data ('bar_name', 'value', 'minimum_value' and 'maximum_value' parts are mandatory)
barData1 = {
    # display name
    "bar_name": "Battery SOC",
    # value to display
    "value": hil.get_scada_output_value('Electric Vehicle.battery soc'),
    # value unit
    "unit": "",
    # minimum value
    "minimum_value": 0.0,
    # maximum value
    "maximum_value": 100.0,
    # show warning and critical values
    "use_warning_critical": True,
    # warning value
    "warning_value": 15.0,
    # critical value
    "critical_value": 5.0,
    }

# list of bars data: [barData1, barData2,...barData10]
displayValue = [barData1]
]]></code>
                <updateRate>250</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <bars_data>
                    <bar>
                        <display_name><![CDATA[Bar graph name]]></display_name>
                        <signal_name><![CDATA[Charging Station.grid_Z.L2]]></signal_name>
                        <minimum_value>0.0</minimum_value>
                        <maximum_value>100.0</maximum_value>
                        <use_warning_critical>True</use_warning_critical>
                        <warning_value>70.0</warning_value>
                        <critical_value>90.0</critical_value>
                        <unit><![CDATA[]]></unit>
                    </bar>
                    </bars_data>
                <widget_settings>
                    <x>744.0</x>
                    <y>688.0</y>
                    <width>296</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee9eaeab5711ea9c310050b686ec77</id>
                <name><![CDATA[Battery SOC]]></name>
                <type>BarGraphDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# specify one bar data ('bar_name', 'value', 'minimum_value' and 'maximum_value' parts are mandatory)
barData1 = {
    # display name
    "bar_name": "",
    # value to display
    "value": hil.get_scada_output_value('Electric Vehicle.battery soc'),
    # value unit
    "unit": "",
    # minimum value
    "minimum_value": 0.0,
    # maximum value
    "maximum_value": 100.0,
    # show warning and critical values
    "use_warning_critical": True,
    # warning value
    "warning_value": 15.0,
    # critical value
    "critical_value": 5.0,
    }

# list of bars data: [barData1, barData2,...barData10]
displayValue = [barData1]
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <bars_data>
                    <bar>
                        <display_name><![CDATA[Bar graph name]]></display_name>
                        <signal_name><![CDATA[Alternator_i_als]]></signal_name>
                        <minimum_value>0.0</minimum_value>
                        <maximum_value>100.0</maximum_value>
                        <use_warning_critical>True</use_warning_critical>
                        <warning_value>70.0</warning_value>
                        <critical_value>90.0</critical_value>
                        <unit><![CDATA[]]></unit>
                    </bar>
                    </bars_data>
                <widget_settings>
                    <x>656.0</x>
                    <y>600.0</y>
                    <width>208</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee9eafab5711ea9ed30050b686ec77</id>
                <name><![CDATA[]]></name>
                <type>TextDisplay</type>
                <description><![CDATA[]]></description>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# specify Text Display options ('text' part is mandatory)
global arrow_count_ev
text_forward = str('..')*arrow_count_ev + '>>>' + str('..')*(4-arrow_count_ev)
text_reverse = str('..')*(4-arrow_count_ev) + '<<<' + str('..')*arrow_count_ev

arrow_count_ev = int(arrow_count_ev + 1)
if arrow_count_ev >= 5:
    arrow_count_ev = 0
else:
    pass

power = hil.read_analog_signal(name = 'Charging Station.Battery inverter.Control.P')
powerv = hil.read_analog_signal(name = 'Electric Vehicle.P')
enable = hil.read_digital_signal(name = 'Electric Vehicle.motor started')

textDisplayDataGreen = {
    # label text
    "text": text_reverse,
    #"text": "<<<<<<<<<<<<<<<<<<",

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": 'green',
}
textDisplayDataRed = {
    # label text
    "text": text_forward,
    #"text": ">>>>>>>>>>>>>>>>>>",

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": 'red',
}
textDisplayDataOrange = {
    # label text
    "text": "------------------",

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": 'orange',
}

# mandatory variable used for storing value that will be displayed
if enable:
    if power > 10 or powerv > 10 :
        displayValue =  textDisplayDataRed
    elif power < -10 or powerv < -10:
        displayValue = textDisplayDataGreen
    else:
        displayValue = textDisplayDataOrange
else:
    displayValue = textDisplayDataOrange

]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>872.0</x>
                    <y>536.0</y>
                    <width>104</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee9eb0ab5711ea81c10050b686ec77</id>
                <name><![CDATA[Image component]]></name>
                <type>Image</type>
                <description><![CDATA[]]></description>
                <image><![CDATA[..\..\0900 EATON-Typhoon Demo 5_26_2020\img\bottom_view.png]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>528.0</x>
                    <y>264.0</y>
                    <width>720</width>
                    <height>576</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Transparent]]></background_type>
                    <is_background>True</is_background>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee9eb1ab5711eaaa920050b686ec77</id>
                <name><![CDATA[EV Battery]]></name>
                <displayed_name><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:12pt;">EV Battery</span></p></body></html>]]></displayed_name>
                <name_position><![CDATA[Top]]></name_position>
                <type>SubPanel</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['d0ee9eb2ab5711eaa6c90050b686ec77', 'd0ee9eb3ab5711ea9a980050b686ec77', 'd0ee9eb4ab5711eaa0300050b686ec77', 'd0ee9eb5ab5711eabd4e0050b686ec77', 'd0ee9eb6ab5711eaa04a0050b686ec77']]]></components_ids>
                <hierarchy_position>3</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <use_background_image>True</use_background_image>
                <image><![CDATA[..\..\..\..\..\..\users\efonk\appdata\roaming\typhoon\2020.1\examples\models\power electronics\electric_vehicle\Battery.PNG]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.

##########################################################################################
####################################   PATHS   ###########################################
##########################################################################################
############## When defining paths, the last "." must always be included. ################
# Paths here are defined as the full qualified name (fqn) to the desired 
# composite component. For example a composite_component inside subsystem1 
# inside subsystem2 will have fqn="subsystem2.subsystem1.composite_component.".
# Note that the path ends with a ".", since it's related to a composite
# component. By following this approach it becomes easier to locate inner
# components of the composite component.


path_to_battery = "Electric Vehicle."

##########################################################################################
###############################   BASE VARIABLES   #######################################
##########################################################################################

Vb = 208.0  # V
fb = 60.0  # Hz
Sb = 22000.0  # VA]]></initialization_code>
                <widget_settings>
                    <x>656.0</x>
                    <y>488.0</y>
                    <width>192</width>
                    <height>104</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee9eb2ab5711eaa6c90050b686ec77</id>
                <name><![CDATA[SoC [%]]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
SoC = hil.get_scada_output_value('Electric Vehicle.battery soc')
displayValue = SoC]]></code>
                <analog_signals><![CDATA[['PCC and ESS.Ess_inverter.Control.Vd']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>616.0</x>
                    <y>0.0</y>
                    <width>256</width>
                    <height>144</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>190000.0</y_range_min>
                    <y_range_max>210000.0</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee9eb3ab5711ea9a980050b686ec77</id>
                <name><![CDATA[Battery voltage]]></name>
                <type>Gauge</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
Vdc = hil.read_analog_signal(name='Charging Station.Battery inverter.VDC')
displayValue = Vdc

]]></code>
                <signal_name><![CDATA[Ess_inverter.VDC]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>1000</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>176</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>1200.0</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee9eb4ab5711eaa0300050b686ec77</id>
                <name><![CDATA[Battery charge]]></name>
                <type>Gauge</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
soc = hil.get_battery_soc(path_to_battery + "Battery")
displayValue = soc*100.0

]]></code>
                <signal_name><![CDATA[PCC and ESS.Battery 1]]></signal_name>
                <unit><![CDATA[%]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>1000</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>176.0</x>
                    <y>0.0</y>
                    <width>176</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>100.0</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee9eb5ab5711eabd4e0050b686ec77</id>
                <name><![CDATA[Batt voltage [V]]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name='Charging Station.Battery inverter.VDC')
]]></code>
                <analog_signals><![CDATA[['PCC and ESS.Ess_inverter.Control.P']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>368.0</x>
                    <y>0.0</y>
                    <width>248</width>
                    <height>144</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>190000.0</y_range_min>
                    <y_range_max>210000.0</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee9eb6ab5711eaa04a0050b686ec77</id>
                <name><![CDATA[Ibatt [A]]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
Ibatt = hil.read_analog_signal(name='I_battery')

displayValue = Ibatt]]></code>
                <analog_signals><![CDATA[['PCC and ESS.Ess_inverter.Control.Vd']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>872.0</x>
                    <y>0.0</y>
                    <width>256</width>
                    <height>144</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>190000.0</y_range_min>
                    <y_range_max>210000.0</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eec595ab5711eab3000050b686ec77</id>
                <name><![CDATA[P ref]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

hil.set_scada_input_value(input_stem+'.Pref_kW', inputValue)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 0.0
hil.set_scada_input_value(input_stem+'.Pref_kW', 0.0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[kW]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>88.0</y>
                    <width>144</width>
                    <height>40</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0eec596ab5711ea90ad0050b686ec77</id>
                <name><![CDATA[Enable]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue:
    # do something when checkbox is checked
    #hil.set_contactor(CB_name, swControl=True, swState=True)
    #hil.wait_msec(100.0)
    hil.set_scada_input_value(input_stem+'.en', 1.0)
    pass
else:
    # do something when checkbox is unchecked
    hil.set_scada_input_value(input_stem+'.en', 0.0)
    #hil.set_contactor(CB_name, swControl=True, swState=False)
    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = False

hil.set_scada_input_value(input_stem+'.en', 0.0)
#hil.set_contactor(CB_name, swControl=True, swState=False)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[False]]></inputValue>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>72</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0eec597ab5711eaaa210050b686ec77</id>
                <name><![CDATA[Q ref]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value(input_stem+'.Qref_kVAr', inputValue)]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 0.0
hil.set_scada_input_value(input_stem+'.Qref_kVAr', 0.0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[kVAr ]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>120.0</y>
                    <width>152</width>
                    <height>40</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0eec598ab5711ea963c0050b686ec77</id>
                <name><![CDATA[P]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
#displayValue = hil.read_analog_signal(name=output_stem+'.P_kW')

displayValue = hil.read_analog_signal(name=output_stem+'.P_kW')

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>256.0</x>
                    <y>0.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eec599ab5711eaa81a0050b686ec77</id>
                <name><![CDATA[Q]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=output_stem+'.Q_kVAr')


]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kVAr]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>408.0</x>
                    <y>0.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eec59aab5711eab42e0050b686ec77</id>
                <name><![CDATA[Vt]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=output_stem+'.Vt')*np.sqrt(3.0)


]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[Vrms L-L]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>552.0</x>
                    <y>0.0</y>
                    <width>208</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eec59bab5711ea899d0050b686ec77</id>
                <name><![CDATA[f]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=output_stem+'.f')


]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[Hz]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>760.0</x>
                    <y>0.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eec59cab5711eabe7c0050b686ec77</id>
                <name><![CDATA[f ref]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value(inv_root+'.f_ref', inputValue)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 60.0
hil.set_scada_input_value(inv_root+'.f_ref', 60.0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[60.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[Hz]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>192.0</x>
                    <y>96.0</y>
                    <width>160</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0eec59dab5711eaacf00050b686ec77</id>
                <name><![CDATA[Mode]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'Grid-following':
    # do something when 'Case 1' is selected
    hil.set_scada_input_value(input_stem+'.mode', 0.0)
    pass
elif inputValue == 'Grid-forming':
    # do something when 'Case 2' is selected
    hil.set_scada_input_value(input_stem+'.mode', 1.0)
    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 'Grid-following'
hil.set_scada_input_value(input_stem+'.mode', 0.0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[Grid-following]]></inputValue>
                <availableValues><![CDATA[['Grid-following', 'Grid-forming']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>32.0</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0eec59eab5711eaafd40050b686ec77</id>
                <name><![CDATA[v ref LL]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value(inv_root+'.vq_ref', inputValue*np.sqrt(2.0/3.0))
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = v_nom_LL*np.sqrt(2.0/3.0)
hil.set_scada_input_value(inv_root+'.vq_ref', v_nom_LL*np.sqrt(2.0/3.0))]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[169.831288832967]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[VrmsLL]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>192.0</x>
                    <y>128.0</y>
                    <width>176</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0eec59fab5711eabe5e0050b686ec77</id>
                <name><![CDATA[P,Q]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
PkW = hil.read_analog_signal(name=output_stem+'.P_kW')
QkVAr = hil.read_analog_signal(name=output_stem+'.Q_kVAr')

total_PkW = PkW
total_QkVAr = QkVAr

data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": ["Total PkW", "Total QkVAr"],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [total_PkW, total_QkVAr],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[[]]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>184.0</y>
                    <width>400</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>60</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 0.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'blue',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eec5a0ab5711eabd560050b686ec77</id>
                <name><![CDATA[bus freq error]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
f_err_Hz = hil.read_analog_signal(name='Home.sync_observer.f_err_Hz')
displayValue = f_err_Hz



]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[Hz]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>568.0</x>
                    <y>64.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eec5a1ab5711ea8b680050b686ec77</id>
                <name><![CDATA[bus phase error]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed

displayValue = hil.read_analog_signal(name='Home.sync_observer.wt_err_deg')


]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>712.0</x>
                    <y>64.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eec5a2ab5711eab5b40050b686ec77</id>
                <name><![CDATA[bus voltage error]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed

displayValue = hil.read_analog_signal(name='Home.sync_observer.v_err_Vrms')
]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[Vrms]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>856.0</x>
                    <y>64.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eec5a3ab5711eabd0d0050b686ec77</id>
                <name><![CDATA[SoC]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
SOC = hil.read_analog_signal(name='Home.Batt1_SoC')

data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": ["SOC"],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [SOC],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[[]]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>400.0</x>
                    <y>184.0</y>
                    <width>400</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>300</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>True</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
MAX_SOC = 90.0
MIN_SOC = 81.0
# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": MAX_SOC,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'blue',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "MAX_SOC",

    # show a title in the legend
    "show_in_legend": True
}

refCurveData2 = {
    # reference curve data point
    "data": MIN_SOC,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "MIN_SOC",

    # show a title in the legend
    "show_in_legend": True
}


# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1, refCurveData2]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eec5a6ab5711ea87690050b686ec77</id>
                <name><![CDATA[P ref]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

hil.set_scada_input_value(input_stem+'.Pref_kW', inputValue)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 0.0
hil.set_scada_input_value(input_stem+'.Pref_kW', 0.0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[kW]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>32.0</y>
                    <width>168</width>
                    <height>40</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0eec5a7ab5711ea83240050b686ec77</id>
                <name><![CDATA[Enable]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue:
    # do something when checkbox is checked
    #hil.set_contactor(CB_name, swControl=True, swState=True)
    #hil.wait_msec(100.0)
    hil.set_scada_input_value(input_stem+'.en', 1.0)
    pass
else:
    # do something when checkbox is unchecked
    hil.set_scada_input_value(input_stem+'.en', 0.0)
    #hil.set_contactor(CB_name, swControl=True, swState=False)
    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = False

hil.set_scada_input_value(input_stem+'.en', 0.0)
#hil.set_contactor(CB_name, swControl=True, swState=False)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[True]]></inputValue>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>80</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0eec5a8ab5711ea971d0050b686ec77</id>
                <name><![CDATA[Q ref]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value(input_stem+'.Qref_kVAr', inputValue)]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 0.0
hil.set_scada_input_value(input_stem+'.Qref_kVAr', 0.0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[kVAr ]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>80.0</y>
                    <width>176</width>
                    <height>40</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0eeec88ab5711eaa9f90050b686ec77</id>
                <name><![CDATA[P]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
#displayValue = hil.read_analog_signal(name=output_stem+'.P_kW')

displayValue = hil.read_analog_signal(name=output_stem+'.P_kW')

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>256.0</x>
                    <y>0.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eeec89ab5711eaabff0050b686ec77</id>
                <name><![CDATA[Q]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=output_stem+'.Q_kVAr')


]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kVAr]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>408.0</x>
                    <y>0.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eeec8aab5711eaac170050b686ec77</id>
                <name><![CDATA[Vt]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=output_stem+'.Vt')*np.sqrt(3.0)


]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[Vrms L-L]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>552.0</x>
                    <y>0.0</y>
                    <width>208</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eeec8bab5711eab6ff0050b686ec77</id>
                <name><![CDATA[f]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=output_stem+'.f')


]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[Hz]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>760.0</x>
                    <y>0.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eeec8cab5711ea8c090050b686ec77</id>
                <name><![CDATA[Image component]]></name>
                <type>Image</type>
                <description><![CDATA[]]></description>
                <image><![CDATA[..\..\0900 EATON-Typhoon Demo 5_26_2020\img\duck_curve.png]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>288.0</x>
                    <y>304.0</y>
                    <width>416</width>
                    <height>160</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Transparent]]></background_type>
                    <is_background>False</is_background>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0eeec8dab5711ea9ee50050b686ec77</id>
                <name><![CDATA[Begin profile]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['d0eeec8eab5711ea9cd40050b686ec77', 'd0eeec8fab5711eab4710050b686ec77', '94e4c824ac1411eaafa70050b686ec77']]]></components_ids>
                <hierarchy_position>3</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

profile_counter = 0
begin_profile = 0
progress_update = 0
unit_of_time = int(1/60*60) #This will determine if load profile is traversed for example every second
#or every 5 minutes
time_counter = 0]]></initialization_code>
                <widget_settings>
                    <x>304.0</x>
                    <y>72.0</y>
                    <width>544</width>
                    <height>232</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0eeec8eab5711ea9cd40050b686ec77</id>
                <name><![CDATA[Begin/Stop profile]]></name>
                <type>Macro</type>
                <description><![CDATA[]]></description>
                <on_click_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.
# HIL API is imported as 'hil'
global begin_profile

if (begin_profile == 0):
    begin_profile = 1
    printf('Load profile started')
else:
    begin_profile = 0
    printf('Load profile stopped')
]]></on_click_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

profile_counter = 0
begin_profile = 0
progress_update = 0
time_counter = 0]]></on_start_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.
# HIL API is imported as 'hil'
global begin_profile
if (begin_profile):
    #hil.set_scada_input_value('Charging Station.Lump1_in.Pref_kW', )
    hil.set_scada_input_value('Home.Lump1_in.Pref_kW', load_profile_P[profile_counter])

    time_counter = int(time_counter + 1)
    if (time_counter >= unit_of_time):
        
        profile_counter = int(profile_counter + 1)
        if (profile_counter >= length_profile):
            printf('100% done. Looping back...')
            profile_counter = 0
            progress_update = 0
            
        progress_update = progress_update + 1
        if progress_update%5 == 0:
            progress = progress_update / length_profile * 100
            #printf(str(progress)+'% done')
            printf("Profile is %.2f" % progress + '% done')
        time_counter = 0
else:
    pass
]]></on_timer_code>
                <run_each>1000</run_each>
                <on_stop_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>400.0</x>
                    <y>0.0</y>
                    <width>128</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0eeec8fab5711eab4710050b686ec77</id>
                <name><![CDATA[Trace graph]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
PkW1 = hil.read_analog_signal(name='Home.Lump1_out.P_kW')
total_PkW = PkW1
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": ["Total PkW"],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [total_PkW],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[[]]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>400</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>300</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 0.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'blue',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eeec91ab5711ea87770050b686ec77</id>
                <name><![CDATA[Vd_ref]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_component + "Control.Vmode_control.Vt_ref")
displayValue = x

]]></code>
                <signal_name><![CDATA[Ess_inverter.Control.Vmode_control.vd ref]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>448.0</x>
                    <y>520.0</y>
                    <width>80</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eeec92ab5711ea89cd0050b686ec77</id>
                <name><![CDATA[Outputs]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['d0eeec93ab5711ea90480050b686ec77', 'd0eeec94ab5711ea8e370050b686ec77', 'd0eeec95ab5711ea84980050b686ec77', 'd0eeec96ab5711eaade20050b686ec77', 'd0eeec97ab5711ea824c0050b686ec77', 'd0eeec98ab5711eab3bd0050b686ec77', 'd0eeec99ab5711ea8c700050b686ec77', 'd0eeec9aab5711ea844d0050b686ec77', 'd0ef1382ab5711ea8f8a0050b686ec77']]]></components_ids>
                <hierarchy_position>3</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
]]></initialization_code>
                <widget_settings>
                    <x>8.0</x>
                    <y>400.0</y>
                    <width>416</width>
                    <height>240</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0eeec93ab5711ea90480050b686ec77</id>
                <name><![CDATA[Note component]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Outputs 2 to 4 and 6 to 8 are instantenous values for currents and voltages, </p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">thus, they are better observed in the scope.</p></body></html>]]></text>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>8.0</x>
                    <y>176.0</y>
                    <width>376</width>
                    <height>32</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Transparent]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0eeec94ab5711ea8e370050b686ec77</id>
                <name><![CDATA[Out [0] - Connected]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_outputs + "Out[0]")
displayValue = x


]]></code>
                <signal_name><![CDATA[PCC and ESS.Out[0]]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>0.0</y>
                    <width>112</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eeec95ab5711ea84980050b686ec77</id>
                <name><![CDATA[Out [1] - Inverter On]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_outputs + "Out[1]")
displayValue = x

]]></code>
                <signal_name><![CDATA[PCC and ESS.Out[1]]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>144.0</x>
                    <y>0.0</y>
                    <width>112</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eeec96ab5711eaade20050b686ec77</id>
                <name><![CDATA[Out [5] - Vt]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_outputs + "Out[5]")
displayValue = x

]]></code>
                <signal_name><![CDATA[PCC and ESS.Out[5]]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>256.0</x>
                    <y>0.0</y>
                    <width>112</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eeec97ab5711ea824c0050b686ec77</id>
                <name><![CDATA[Out [9] - f]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_outputs + "Out[9]")
displayValue = x

]]></code>
                <signal_name><![CDATA[PCC and ESS.Out[9]]]></signal_name>
                <unit><![CDATA[Hz]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>56.0</y>
                    <width>112</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eeec98ab5711eab3bd0050b686ec77</id>
                <name><![CDATA[Out [10] - P]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_outputs + "Out[10]")
displayValue = x

]]></code>
                <signal_name><![CDATA[PCC and ESS.Out[10]]]></signal_name>
                <unit><![CDATA[W]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[0]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>112.0</x>
                    <y>56.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eeec99ab5711ea8c700050b686ec77</id>
                <name><![CDATA[Out [11] - Q]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_outputs + "Out[11]")
displayValue = x

]]></code>
                <signal_name><![CDATA[PCC and ESS.Out[11]]]></signal_name>
                <unit><![CDATA[VAr]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[0]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>256.0</x>
                    <y>56.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0eeec9aab5711ea844d0050b686ec77</id>
                <name><![CDATA[Out [12] - S]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_outputs + "Out[12]")
displayValue = x

]]></code>
                <signal_name><![CDATA[PCC and ESS.Out[12]]]></signal_name>
                <unit><![CDATA[VA]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[0]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>80.0</x>
                    <y>112.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef1382ab5711ea8f8a0050b686ec77</id>
                <name><![CDATA[Out [13] - pf]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_outputs + "Out[13]")
displayValue = x

]]></code>
                <signal_name><![CDATA[PCC and ESS.Out[13]]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>224.0</x>
                    <y>112.0</y>
                    <width>96</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef1383ab5711eaae010050b686ec77</id>
                <name><![CDATA[Pref [kW]]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

hil.set_scada_input_value(path_to_inputs + 'Pref', inputValue*1000.0)

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 0.0
hil.set_scada_input_value(path_to_inputs + 'Pref', widgetValue*1000.0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <min>-22.0</min>
                <max>22.0</max>
                <step>1.0</step>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>464.0</x>
                    <y>296.0</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef1384ab5711eab4ca0050b686ec77</id>
                <name><![CDATA[Battery charge]]></name>
                <type>Gauge</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
soc = hil.get_battery_soc(path_to_battery + "Battery")
displayValue = soc*100.0

]]></code>
                <signal_name><![CDATA[PCC and ESS.Battery 1]]></signal_name>
                <unit><![CDATA[%]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>1000</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>528.0</x>
                    <y>0.0</y>
                    <width>176</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>100.0</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef1385ab5711eaae680050b686ec77</id>
                <name><![CDATA[Terminal Voltage]]></name>
                <type>Gauge</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
Vt = hil.read_analog_signal(name = path_to_component + "Control.Vt")
displayValue = Vt*Vb

]]></code>
                <signal_name><![CDATA[Ess_inverter.Control.Vt]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>1000</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>176</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>757.0</max>
                    <warning_range>(384.0, 432.0, 528.0, 576.0)</warning_range>
                    <critical_range>(0.0, 384.0, 576.0, 800.0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef1386ab5711eab7ea0050b686ec77</id>
                <name><![CDATA[Frequency lock]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Synch.freq_lock]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off

x = hil.read_digital_signal(name = path_to_component + "Control.Synch.freq_lock")
displayValue = bool(x)]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>192.0</x>
                    <y>232.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef1387ab5711ea88590050b686ec77</id>
                <name><![CDATA[Vd]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_component + "Control.Vd")
displayValue = x

]]></code>
                <signal_name><![CDATA[Ess_inverter.Control.Vd]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>528.0</x>
                    <y>408.0</y>
                    <width>80</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef1388ab5711eaa6a10050b686ec77</id>
                <name><![CDATA[Qref]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_component + "Control.Imode_control.Qref")
displayValue = x

]]></code>
                <signal_name><![CDATA[PCC and ESS.Ess_inverter.Q]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>448.0</x>
                    <y>464.0</y>
                    <width>80</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef1389ab5711eabd540050b686ec77</id>
                <name><![CDATA[Synch]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Inv_Cab_SM.synch]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "Control.Inv_Cab_SM.synch")
displayValue = bool(x)

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>192.0</x>
                    <y>208.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef138aab5711ea834b0050b686ec77</id>
                <name><![CDATA[Vref [V]]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

hil.set_scada_input_value(path_to_inputs + 'Vref', inputValue)

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = Vb
hil.set_scada_input_value(path_to_inputs + 'Vref', widgetValue)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[208.0]]></inputValue>
                <min>0.0</min>
                <max>800.0</max>
                <step>1.0</step>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>464.0</x>
                    <y>200.0</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef138bab5711eabc370050b686ec77</id>
                <name><![CDATA[Utility voltage out of limits]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Synch.Check_grid.out of limit volts]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "Control.Synch.Check_grid.out of limit volts")
displayValue = bool(x)

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>192.0</x>
                    <y>312.0</y>
                    <width>208</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef138cab5711ea83070050b686ec77</id>
                <name><![CDATA[mq_ref]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_component + "Control.duty_cycle.m_q")
displayValue = x

]]></code>
                <signal_name><![CDATA[PCC and ESS.Ess_inverter.Control.dq to abc.m_q]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>608.0</x>
                    <y>520.0</y>
                    <width>72</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef138dab5711eab3400050b686ec77</id>
                <name><![CDATA[Frequency]]></name>
                <type>Gauge</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
f = hil.read_analog_signal(name = path_to_component + "Control.f")
displayValue = f*fb

]]></code>
                <signal_name><![CDATA[PCC and ESS.Ess_inverter.Control.f]]></signal_name>
                <unit><![CDATA[Hz]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>1000</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>176.0</x>
                    <y>0.0</y>
                    <width>176</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>100.0</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef138eab5711eaa9440050b686ec77</id>
                <name><![CDATA[Inverter On]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Inv_Cab_SM.read_mode.on]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "Control.Inv_Cab_SM.read_mode.on")
displayValue = bool(x)

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>208.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef138fab5711ea9ee60050b686ec77</id>
                <name><![CDATA[Frequency [pu]]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
f = hil.read_analog_signal(name = path_to_component + "Control.f")
displayValue = f]]></code>
                <analog_signals><![CDATA[['PCC and ESS.Ess_inverter.Control.f']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>752.0</x>
                    <y>152.0</y>
                    <width>296</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>0.98</y_range_min>
                    <y_range_max>1.01</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef1390ab5711ea82470050b686ec77</id>
                <name><![CDATA[Pref]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name = path_to_component + "Control.Imode_control.Pref")
displayValue = P

]]></code>
                <signal_name><![CDATA[PCC and ESS.Ess_inverter.Control.Imode_control.Pref]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>448.0</x>
                    <y>408.0</y>
                    <width>80</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef1391ab5711eabaa30050b686ec77</id>
                <name><![CDATA[Reactive Power [kVAr]]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
Q = hil.read_analog_signal(name = path_to_component + "Control.Q")
displayValue = Q/1000.0

]]></code>
                <analog_signals><![CDATA[['PCC and ESS.Ess_inverter.Control.Q']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>1048.0</x>
                    <y>160.0</y>
                    <width>296</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>190000.0</y_range_min>
                    <y_range_max>210000.0</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef1392ab5711eab4310050b686ec77</id>
                <name><![CDATA[Reactive Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
Q = hil.read_analog_signal(name = path_to_component + "Control.Q")
displayValue = Q/1000.0

]]></code>
                <signal_name><![CDATA[PCC and ESS.Ess_inverter.Control.P]]></signal_name>
                <unit><![CDATA[kVAr]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>144.0</y>
                    <width>152</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef1393ab5711eab9420050b686ec77</id>
                <name><![CDATA[Utility frequency out of limits]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Synch.Check_grid.out of limit freq]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "Control.Synch.Check_grid.out of limit freq")
displayValue = bool(x)

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>192.0</x>
                    <y>336.0</y>
                    <width>208</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef1394ab5711ea94940050b686ec77</id>
                <name><![CDATA[iq_meas]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_component + "Control.Iq")
displayValue = x

]]></code>
                <signal_name><![CDATA[iq]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>608.0</x>
                    <y>464.0</y>
                    <width>72</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef1395ab5711ea8ac50050b686ec77</id>
                <name><![CDATA[Apparent Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
S = hil.read_analog_signal(name = path_to_component + "Control.S")
displayValue = S/1000.0

]]></code>
                <signal_name><![CDATA[PCC and ESS.Ess_inverter.Control.P]]></signal_name>
                <unit><![CDATA[kVA]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>304.0</x>
                    <y>144.0</y>
                    <width>152</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef3a74ab5711eab6a50050b686ec77</id>
                <name><![CDATA[DC link voltage]]></name>
                <type>Gauge</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
Vdc = hil.read_analog_signal(name = path_to_component + "VDC")
displayValue = Vdc

]]></code>
                <signal_name><![CDATA[Ess_inverter.VDC]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>1000</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>352.0</x>
                    <y>0.0</y>
                    <width>176</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>1200.0</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef3a75ab5711ea895f0050b686ec77</id>
                <name><![CDATA[Vmode]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Inv_Cab_SM.V_mode]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "Control.Inv_Cab_SM.V_mode")
displayValue = bool(x)

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>336.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef3a76ab5711eaa27a0050b686ec77</id>
                <name><![CDATA[Grid Following]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Inv_Cab_SM.read_mode.Grid following]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "Control.Inv_Cab_SM.read_mode.Grid following")
displayValue = bool(x)

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>304.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef3a77ab5711eab0560050b686ec77</id>
                <name><![CDATA[Inverter Mode]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'Grid forming':
    # do something when 'Case 2' is selected
    #hil.set_contactor('Charging Station.S1', swControl=True, swState=False)
    hil.set_scada_input_value(path_to_inputs + 'mode', 0.0)
    hil.set_scada_input_value('Charging Station.Natural Gas Genset.controls.stop', 1.0)

elif inputValue == 'Grid following':
    # do something when 'Case 2' is selected
    hil.set_scada_input_value(path_to_inputs + 'mode', 1.0)
    #hil.set_contactor('Charging Station.S1', swControl=True, swState=True)]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = "Grid following"
hil.set_scada_input_value(path_to_inputs + 'mode', 1.0)
#hil.set_contactor('Charging Station.S1', swControl=True, swState=True)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[Grid following]]></inputValue>
                <availableValues><![CDATA[['Grid forming', 'Grid following']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>464.0</x>
                    <y>168.0</y>
                    <width>208</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef3a78ab5711ea90210050b686ec77</id>
                <name><![CDATA[Vq]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_component + "Control.Vq")
displayValue = x

]]></code>
                <signal_name><![CDATA[PCC and ESS.Ess_inverter.Control.Vq]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>608.0</x>
                    <y>408.0</y>
                    <width>72</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef3a79ab5711eab2b00050b686ec77</id>
                <name><![CDATA[id_meas]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_component + "Control.Id")
displayValue = x

]]></code>
                <signal_name><![CDATA[PCC and ESS.Ess_inverter.Control.id]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>528.0</x>
                    <y>464.0</y>
                    <width>80</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef3a7aab5711ea86950050b686ec77</id>
                <name><![CDATA[Inverter On]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'OFF':
    # do something when 'Case 1' is selected
    hil.set_scada_input_value(path_to_inputs + 'On', 0.0)
    pass
elif inputValue == 'ON':
    # do something when 'Case 2' is selected
    hil.set_scada_input_value(path_to_inputs + 'On', 1.0)
    pass
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = "OFF"
hil.set_scada_input_value(path_to_inputs + 'On', 0.0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[OFF]]></inputValue>
                <availableValues><![CDATA[['ON', 'OFF']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>464.0</x>
                    <y>136.0</y>
                    <width>208</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef3a7bab5711eab4af0050b686ec77</id>
                <name><![CDATA[f_diff]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_component + "Control.Synch.f_match.f_diff")
displayValue = x

]]></code>
                <signal_name><![CDATA[Ess_inverter.Control.Synch.f_match.f_diff]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>688.0</x>
                    <y>488.0</y>
                    <width>72</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef3a7cab5711ea96a20050b686ec77</id>
                <name><![CDATA[Phase diff]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
S = hil.read_analog_signal(name = path_to_component + "Control.Synch.phase_match.phase_diff")
displayValue = S*180.0/np.pi


]]></code>
                <signal_name><![CDATA[PCC and ESS.Ess_inverter.Control.Synch.SRF PLL.AST sync.check_phase_diff.phase_diff]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>688.0</x>
                    <y>432.0</y>
                    <width>72</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef3a7dab5711eab27b0050b686ec77</id>
                <name><![CDATA[Qref [kW]]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

hil.set_scada_input_value(path_to_inputs + 'Qref', inputValue*1000.0)

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 0.0
hil.set_scada_input_value(path_to_inputs + 'Qref', widgetValue*1000.0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <min>-23.0</min>
                <max>23.0</max>
                <step>1.0</step>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>464.0</x>
                    <y>336.0</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef3a7eab5711ea979f0050b686ec77</id>
                <name><![CDATA[Grid Forming]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Inv_Cab_SM.read_mode.Grid forming]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "Control.Inv_Cab_SM.read_mode.Grid forming")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>280.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef3a7fab5711eab71b0050b686ec77</id>
                <name><![CDATA[Terminal Voltage [pu]]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
Vt = hil.read_analog_signal(name = path_to_component + "Control.Vt")
displayValue = Vt]]></code>
                <analog_signals><![CDATA[['PCC and ESS.Ess_inverter.Control.Vd']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>760.0</x>
                    <y>0.0</y>
                    <width>296</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>190000.0</y_range_min>
                    <y_range_max>210000.0</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef3a80ab5711ea8a130050b686ec77</id>
                <name><![CDATA[md_ref]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_component + "Control.duty_cycle.m_d")
displayValue = x
]]></code>
                <signal_name><![CDATA[Ess_inverter.Control.duty_cycle.m_d]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>528.0</x>
                    <y>520.0</y>
                    <width>80</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef3a81ab5711eab3da0050b686ec77</id>
                <name><![CDATA[Inverter CB]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Inv_Cab_SM.CB_status]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "Control.Inv_Cab_SM.CB_status")
displayValue = bool(x)

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>232.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef3a82ab5711ea8b9e0050b686ec77</id>
                <name><![CDATA[Stand By]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Inv_Cab_SM.read_mode.StandBy]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "Control.Inv_Cab_SM.read_mode.StandBy")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>256.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef3a83ab5711eab2b50050b686ec77</id>
                <name><![CDATA[Note component]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Variables used in the widgets here are defined through the sub-panel </p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">namespace script.</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">To access them, click with the right button on the sub-panel component </p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">and select &quot;Properties&quot;.</p></body></html>]]></text>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>800.0</x>
                    <y>496.0</y>
                    <width>352</width>
                    <height>64</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef3a84ab5711eaa1780050b686ec77</id>
                <name><![CDATA[Phase diff [°]]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
S = hil.read_analog_signal(name = path_to_component + "Control.Synch.phase_match.phase_diff")
displayValue = S*180.0/np.pi

]]></code>
                <analog_signals><![CDATA[['Ess_inverter.Control.Synch.phase_match.phase_diff']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>768.0</x>
                    <y>312.0</y>
                    <width>296</width>
                    <height>184</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>190000.0</y_range_min>
                    <y_range_max>210000.0</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef3a85ab5711ea87620050b686ec77</id>
                <name><![CDATA[Active Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name = path_to_component + "Control.P")
displayValue = P/1000.0

]]></code>
                <signal_name><![CDATA[PCC and ESS.Ess_inverter.Control.P]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>144.0</y>
                    <width>152</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef3a86ab5711ea8aae0050b686ec77</id>
                <name><![CDATA[f_ref [Hz]]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

hil.set_scada_input_value(path_to_inputs + 'f_ref', inputValue)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = fb
hil.set_scada_input_value(path_to_inputs + 'f_ref', widgetValue)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[60.0]]></inputValue>
                <min>0.0</min>
                <max>100.0</max>
                <step>1.0</step>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>464.0</x>
                    <y>248.0</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef3a87ab5711ea9d110050b686ec77</id>
                <name><![CDATA[Apparent Power [kVA]]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
S = hil.read_analog_signal(name = path_to_component + "Control.S")
displayValue = S/1000.0

]]></code>
                <analog_signals><![CDATA[['PCC and ESS.Ess_inverter.Control.S']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>1040.0</x>
                    <y>312.0</y>
                    <width>296</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>190000.0</y_range_min>
                    <y_range_max>210000.0</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef3a88ab5711eab4620050b686ec77</id>
                <name><![CDATA[Active Power [kW]]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name = path_to_component + "Control.P")
displayValue = P/1000.0

]]></code>
                <analog_signals><![CDATA[['PCC and ESS.Ess_inverter.Control.P']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>1040.0</x>
                    <y>0.0</y>
                    <width>296</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>190000.0</y_range_min>
                    <y_range_max>210000.0</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ef6166ab5711ea80880050b686ec77</id>
                <name><![CDATA[Phase lock]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Synch.phase_lock]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "Control.Synch.phase_lock")
displayValue = bool(x)

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>192.0</x>
                    <y>256.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef6167ab5711eab31c0050b686ec77</id>
                <name><![CDATA[Voltage Match]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Synch.phase_lock]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "Control.Synch.phase_lock")
displayValue = bool(x)

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>192.0</x>
                    <y>280.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef616aab5711ea92920050b686ec77</id>
                <name><![CDATA[Connected to grid]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Inv_Cab_SM.CB_status]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off

x = hil.read_digital_signal(charging_inverter + 'Control.Inv_Cab_SM.CB_status')

displayValue = bool(x)

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>128</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef616bab5711eaac300050b686ec77</id>
                <name><![CDATA[Stand by]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Yellow</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off

x = hil.read_digital_signal(charging_inverter + 'Control.Inv_Cab_SM.CB_status')
connected = bool(x)

power = hil.read_analog_signal(charging_inverter + 'Control.P')
if (power < 1) and (power > -1) and connected:
    displayValue = True
else:
   displayValue = False 

printf('power '+str(power))
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>32.0</y>
                    <width>128</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ef616cab5711eab5670050b686ec77</id>
                <name><![CDATA[]]></name>
                <type>TextDisplay</type>
                <description><![CDATA[]]></description>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# specify Text Display options ('text' part is mandatory)
global arrow_count

power = hil.read_analog_signal(name = charging_inverter+'Control.P')
powerv = hil.read_analog_signal(name = 'Electric Vehicle.P')
enable = hil.read_digital_signal(name=charging_inverter+'Control.Inv_Cab_SM.CB_status')

text_forward = str('...')*arrow_count + '>>>' + str('...')*(4-arrow_count)
text_reverse = str('...')*(4-arrow_count) + '<<<' + str('...')*arrow_count

arrow_count = int(arrow_count + 1)
if arrow_count >= 5:
    arrow_count = 0
else:
    pass

textDisplayDataGreen = {
    # label text

    
    #"text": ">>>>>>>>>>>>>>>>>>",    
    "text": text_forward,

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": 'green',
}
textDisplayDataRed = {
    # label text
    "text": text_reverse,
    #"text": "<<<<<<<<<<<<<<<<<<",

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": 'red',
}
textDisplayDataOrange = {
    # label text
    "text": "------------------",

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": 'orange',
}

# mandatory variable used for storing value that will be displayed
if enable:
    if power > 10 or powerv > 10:
        displayValue =  textDisplayDataRed
    elif power < -10 or powerv < -10:
        displayValue = textDisplayDataGreen
    else:
        displayValue = textDisplayDataOrange
else:
    displayValue = textDisplayDataOrange

]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>64.0</y>
                    <width>136</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>e0fb5870ab5711eaa9b80050b686ec77</id>
                <name><![CDATA[Image component]]></name>
                <type>Image</type>
                <description><![CDATA[]]></description>
                <image><![CDATA[img\online_inkscape_v3.png]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>808</width>
                    <height>640</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Transparent]]></background_type>
                    <is_background>True</is_background>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b1efc5faab5811eaabf60050b686ec77</id>
                <name><![CDATA[Microgrid & Energy Management System]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['b1efc5fbab5811eaa0320050b686ec77', 'b1efed6eab5811ea904c0050b686ec77', 'b1efed6fab5811eaa27d0050b686ec77', 'b1efed70ab5811eaab450050b686ec77', 'b1efed71ab5811ea97070050b686ec77', 'b1efed77ab5811eaab600050b686ec77', 'b1f013e2ab5811ea8d210050b686ec77', 'b1f013e3ab5811ea866b0050b686ec77', 'b1f013e4ab5811eab6410050b686ec77', 'b1f013e5ab5811ea8d9b0050b686ec77', '04138decab5911ea90fe0050b686ec77']]]></components_ids>
                <hierarchy_position>2</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

sync_to_mains_en = 0
w_bias_pu_value = 0
timer_block_stopping = 0
timer_block_starting = 0
timer_gen_settle = 0
timer_genset_settle_HBMS_SM = 0
genset_start_allowed = 0
genset_stop_allowed = 0 
ILSM_state = 0
en_ILSM = 0
en_UILSM = 0
en_NOP = 0
NOP_SM_state = 0
v_bias = 0.0
f_bias_Hz = 0.0
wt_bias_deg = 0.0
en_HBMS = 0
HBMS_SM = 0
MAX_SOC = 90.0 #BMS will activate to discharge battery if SOC goes above this point
MIN_SOC = 81.0 #BMS will activate to charge battery if SOC goes below this point
REST_MIN_SOC = 82.0 #BMS will attempt to charge battery upto this point once BMS is running
REST_MAX_SOC = 80.0 #BMS will attempt to discharge battery downto this point once BMS is running
en_IMP_EXP_SM = 0

int_state_Vrms_k1 = 0
int_state_fHz_k1 = 0
int_state_wt_k1 = 0


genset_controls_root = 'Home.Natural Gas Genset.controls.'
genset_root = 'Home.Natural Gas Genset.'

GEN_P_RATING_KW = 25.0
HOME_ESS_RATING_KW = 20.0


P_import_export = 0
Q_import_export = 0]]></initialization_code>
                <widget_settings>
                    <x>904.0</x>
                    <y>0.0</y>
                    <width>336</width>
                    <height>304</height>
                    <appearance><![CDATA[Raised]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b1efc5fbab5811eaa0320050b686ec77</id>
                <name><![CDATA[]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = bool(en_IMP_EXP_SM)
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>288.0</x>
                    <y>120.0</y>
                    <width>32</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b1efed6eab5811ea904c0050b686ec77</id>
                <name><![CDATA[]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = bool(en_NOP)
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>288.0</x>
                    <y>0.0</y>
                    <width>32</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b1efed6fab5811eaa27d0050b686ec77</id>
                <name><![CDATA[]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = bool(en_ILSM)
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>288.0</x>
                    <y>40.0</y>
                    <width>32</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b1efed70ab5811eaab450050b686ec77</id>
                <name><![CDATA[]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = bool(en_HBMS)
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>288.0</x>
                    <y>80.0</y>
                    <width>32</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b1efed71ab5811ea97070050b686ec77</id>
                <name><![CDATA[ENABLE /DISABLE INTENTIONAL ISLANDING SM]]></name>
                <type>Macro</type>
                <description><![CDATA[]]></description>
                <on_click_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.
# HIL API is imported as 'hil'
global en_ILSM
global ILSM_state
global en_NOP

if en_ILSM == 1:
    en_ILSM = 0
else:
    en_ILSM = 1
    ILSM_state = 1
    en_NOP = 0
]]></on_click_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'


]]></on_start_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.
# HIL API is imported as 'hil'
#global sync_to_mains_en
global timer_block_stopping
global timer_block_starting
global timer_gen_settle
global genset_start_allowed
global genset_stop_allowed
global ILSM_state
global en_ILSM

if (en_ILSM == 1):
    #Read Asset P/Q measurements in preparation for matching them
    P_load_kW = hil.read_analog_signal(name='Home.Lump1_out.P_kW')
    Q_load_kVAr = hil.read_analog_signal(name='Home.Lump1_out.Q_kVAr')
    P_ESS_kW = hil.read_analog_signal(name='Home.Batt_out1.P_kW')
    Q_ESS_kVAr = hil.read_analog_signal(name='Home.Batt_out1.Q_kVAr')
    P_gen_kW = hil.read_analog_signal(name=genset_root+'P_gen_kW')
    Q_gen_kVAr = hil.read_analog_signal(name=genset_root+'Q_gen_kVAr')
    state_genset_controller = hil.read_analog_signal(name=genset_controls_root+'state')
    total_P_load_kW = P_load_kW #+ P_ESS_kW + 0
    total_Q_load_kVAr = Q_load_kVAr #+ Q_ESS_kVAr
    
    #Traverse state machine
    if ILSM_state == 0:
        #do nothing
        pass
    elif ILSM_state == 1:
        #printf('ILSM State '+str(ILSM_state))
        #printf('Preparing intentional islanding mode...')
        #preparing for intentional islanding
        #1. If mains is connected, and genset starting is allowed:
            #1a. start genset
            #1b. pick up load (experiment with P/Q or V/F with offset)
            #1c. Open mains, and set genset to V/F
        #2. If mains is connected, and genset starting is NOT allowed:
            #1a. Do nothing with genset.
        #mains_CB = hil.read_digital_signal(name='Home.S1_fb')
        
        #Start ESS
        hil.set_scada_input_value('Home.Batt_in1.en', 1.0)
        
        #Start genset if load is greater than 30% of genset rating, else ESS is enough.
        if (total_P_load_kW > 7.0):
            #A bug will cause misoperation of genset if it is started again once already started
            if (hil.read_digital_signal(name='Home.Natural Gas Genset.GCB_fb') == 0):
                hil.set_scada_input_value(genset_controls_root+'start', 1.0) #Start genset
                hil.wait_msec(100)
                hil.set_scada_input_value(genset_controls_root+'start', 0.0)
            else:
                pass
            #printf('starting gen in PQ')
            hil.set_scada_input_value(genset_controls_root+'mode', 3) #Put genset in P-Q (GRID-FOLLOWING 2)
            ILSM_state = 2 #continue with monitoring genset turn on.
        else:
            ILSM_state = 4 #go to the final state
            
    elif ILSM_state == 2:
        #printf('syncing...')
        #wait for contactor to close and transition to next state
        if (hil.read_digital_signal(name='Home.Natural Gas Genset.GCB_fb') == 1) :
            ILSM_state = 3
    
    elif ILSM_state == 3:
        #printf('ILSM State '+str(ILSM_state))
        P_gen_kW_error = abs(P_gen_kW - total_P_load_kW)
        Q_gen_kVAr_error = abs(Q_gen_kVAr - total_Q_load_kVAr)
        #Set points of genset
        printf('Write to gen P ref = '+str(total_P_load_kW))
        hil.set_scada_input_value(genset_controls_root+'P controller.P_ref_kW', total_P_load_kW)
        hil.set_scada_input_value(genset_controls_root+'Q controller.Q_ref_kVAr', total_Q_load_kVAr)

        if (P_gen_kW_error < 1.0) and ( Q_gen_kVAr_error < 1.0):
            #If genset has picked up the load for a minimum time, proceed to disconnect mains
            if (timer_gen_settle > 10): #2 seconds wait time
                #open mains contactor and switch genset to grid-forming.
                timer_gen_settle  = 0
                ILSM_state = 4
            else:
                timer_gen_settle = timer_gen_settle + 1
                #printf('Settling')
        else:
            timer_gen_settle  = 0

    elif ILSM_state == 4:
        #printf('ESM State '+str(ILSM_state))
        #hil.set_scada_input_value(genset_controls_root+'mode', 1) #Put genset in V-F (GRID-FORMING)
        hil.set_contactor('Home.S1', swControl=True, swState=False) #open mains contactor.
        ILSM_state = 0
        en_ILSM = 0 #disable state machine.
    else:
        printf('illegal state. Returning to 0')
        pass
else:
    pass




'''
#Allow starting of genset if load is more than minimal (30% of rated power) for more than 5seconds 
if (total_P_load_kW >= 7.5):
    timer_block_starting = timer_block_starting + 1
    if (timer_block_starting >= 20): #if load is above minimum for 5seconds
        genset_start_allowed = 1
        timer_block_starting = 0
    else:
        pass
else:
    pass

#Block stopping of genset for minimum runtime if genset already started
if (state_genset_controller > 0):
    timer_block_stopping = timer_block_stopping + 1
else:
    timer_block_stopping = 0
    
if (timer_block_stopping >= 120):
    genset_stop_allowed = 1
    timer_block_stopping = 0
else:
    pass
''']]></on_timer_code>
                <run_each>1000</run_each>
                <on_stop_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>40.0</y>
                    <width>288</width>
                    <height>40</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b1efed77ab5811eaab600050b686ec77</id>
                <name><![CDATA[NORMAL OPERATION]]></name>
                <type>Macro</type>
                <description><![CDATA[]]></description>
                <on_click_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.
# HIL API is imported as 'hil'

global en_NOP
global NOP_SM_state
global timer_ramp_down
global int_state_Vrms_k1
global int_state_fHz_k1
global int_state_wt_k1
global v_bias
global f_bias_Hz
global wt_bias_deg

en_NOP = 1
timer_ramp_down = 0
NOP_SM_state = 0

int_state_Vrms_k1 = 0
int_state_fHz_k1 = 0
int_state_wt_k1 = 0

v_bias = 0.0
f_bias_Hz = 0.0
wt_bias_deg = 0.0]]></on_click_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

]]></on_start_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.
# HIL API is imported as 'hil'
global NOP_SM_state
global en_NOP
global timer_ramp_down
global int_state_Vrms_k1
global int_state_fHz_k1
global int_state_wt_k1
global v_bias
global f_bias_Hz
global wt_bias_deg


#1. If in black out, proceed to close mains breaker, and start ESS
#2. If in a planned or unplanned island, synchronize the ESS with the grid and then close the mains breaker

if (en_NOP == 1):
    
    if (NOP_SM_state == 0):
        #printf('NOP_SM_state '+str(NOP_SM_state))
        mcb_fb = hil.read_digital_signal(name='Home.S1_fb')
        ess_fb = hil.read_digital_signal(name='Home.Battery inverter (Average)1.calc_current.Active')
        gcb_fb = hil.read_digital_signal(name='Home.Natural Gas Genset.GCB_fb')
        #include EV when available        
        
        if (mcb_fb == 0) and (ess_fb == 0) and (gcb_fb == 0):
            #close mains
            hil.set_contactor('Home.S1', swControl=True, swState=True)
            
            #start Home ESS
            hil.set_scada_input_value('Home.Batt_in1.en', 1.0)
            
             #goto end state
            NOP_SM_state = 3
        elif (mcb_fb == 1) and (ess_fb == 0):
            #start ESS (in PQ mode) and go to end state
            #start Home ESS
            hil.set_scada_input_value('Home.Batt_in1.en', 1.0)
            NOP_SM_state = 3
        elif (gcb_fb) == 1:
            NOP_SM_state = 1 #goto genset shutdown state
        else:
            NOP_SM_state = 2 #goto ESS sync state
            
    elif NOP_SM_state == 1:
        #printf('NOP_SM_state '+str(NOP_SM_state))
        #shutdown genset if it was turned on
        #Put genset in P/Q mode so that we can ramp power down to 0
        hil.set_scada_input_value('Home.Natural Gas Genset.controls.mode', 3)

        hil.set_scada_input_value('Home.Natural Gas Genset.controls.P controller.P_ref_kW', 0.0)
        hil.set_scada_input_value('Home.Natural Gas Genset.controls.Q controller.Q_ref_kVAr', 0.0)
        
        Pgen = hil.read_analog_signal(name='Home.Natural Gas Genset.P_gen_kW')
        Qgen = hil.read_analog_signal(name='Home.Natural Gas Genset.Q_gen_kVAr')
        
        #wait for settling and stop genset
        if (abs(Pgen) < 0.7) and (abs(Qgen) < 0.7):
            timer_ramp_down = timer_ramp_down+1
            if (timer_ramp_down) >= 5:
                hil.set_scada_input_value('Home.Natural Gas Genset.controls.stop', 1.0)
                hil.wait_msec(100)
                hil.set_scada_input_value('Home.Natural Gas Genset.controls.stop', 0.0)
                #goto Home ESS sync state
                NOP_SM_state = 2
            else:
                pass
        else:
            pass
    elif NOP_SM_state == 2:
        #printf('NOP_SM_state '+str(NOP_SM_state))
        #Synchronise the Home ESS to the grid
        #Observe bus freq and angle error and adjust ESS freq. and angle accordingly
        v_err_Vrms = hil.read_analog_signal(name='Home.sync_observer.v_err_Vrms')
        f_err_Hz = hil.read_analog_signal(name='Home.sync_observer.f_err_Hz')
        wt_err_deg = hil.read_analog_signal(name='Home.sync_observer.wt_err_deg2')
        
        kp_vsync = 0.01
        ki_vsync = 0.01
        kp_fsync = 0.1
        ki_fsync = 1.0
        kp_wtsync = 0.1
        ki_wtsync = 2.5
        time_slot = 0.5 #change if time_slot changes
        
        if v_err_Vrms >= 5.0:
            en_Vrms_sync = 1
        elif v_err_Vrms < 1.0:
            en_Vrms_sync = 0
        else:
            pass
            
        if abs(f_err_Hz) >= 0.2:
            en_fHz_sync = 1
            en_wt_sync = 0 #not useful to change phase when freq is being adjusted
        elif abs(f_err_Hz) < 0.01:
            en_fHz_sync = 0
            #changing phase once freq is satisfactory
            if abs(wt_err_deg) >= 5.0:
                en_wt_sync = 1
            elif abs(wt_err_deg) < 2.0:
                en_wt_sync = 0
            else:
                pass
        else:
            pass
        
        if en_Vrms_sync:
            int_state_Vrms = v_err_Vrms*ki_vsync*time_slot + int_state_Vrms_k1
            v_bias = v_err_Vrms*kp_vsync + int_state_Vrms
            int_state_Vrms_k1 = int_state_Vrms #update history
        else:
            pass
        
        if en_fHz_sync:
            printf('in fsync')
            printf('f_bias_Hz = '+str(f_bias_Hz))
            printf('f_err_Hz = '+str(f_err_Hz))
            
            int_state_fHz = f_err_Hz*ki_fsync*time_slot + int_state_fHz_k1
            f_bias_Hz = f_err_Hz*kp_fsync + int_state_fHz
            int_state_fHz_k1 = int_state_fHz #update history        
        else:
            pass
            
        if en_wt_sync:
            #int_state_wt = wt_err_deg*ki_wtsync*time_slot + int_state_wt_k1
            #wt_bias_deg = wt_err_deg*kp_wtsync + int_state_wt
            #int_state_wt_k1 = int_state_wt #update history
            
            printf('in wt_sync')
            printf('wt_bias_deg = '+str(wt_bias_deg))
            printf('wt_err_deg = '+str(wt_err_deg))
            
            int_state_wt = wt_err_deg*ki_wtsync*time_slot + int_state_wt_k1
            wt_bias_deg = wt_err_deg*kp_wtsync + int_state_wt
            
            if (int_state_wt > 180.0):
                int_state_wt = int_state_wt - 360.0
            elif (int_state_wt < -180.0):
                int_state_wt = int_state_wt + 360.0
                
            int_state_wt_k1 = int_state_wt #update history            

                
        else:
            #int_state_wt_k1 = 0.0
            pass
        
        #apply the computed outputs
        hil.set_scada_input_value('Home.Battery inverter (Average)1.f_ref', 60.0+f_bias_Hz)
        hil.set_scada_input_value('Home.Battery inverter (Average)1.vq_ref', 169.7056274847714+v_bias*np.sqrt(2.0/3.0))
        hil.set_scada_input_value('Home.Battery inverter (Average)1.ph_offset_grid_forming', 0.0+round(wt_bias_deg,4))
        
        #wait for settling
        if (en_Vrms_sync == 0) and (en_fHz_sync == 0) and (en_wt_sync == 0):
            printf('synced! close mains CB')
            #connect mains CB
            hil.set_contactor('Home.S1', swControl=True, swState=True)
            
            NOP_SM_state = 3 #goto end state
        else:
            pass
            
    elif NOP_SM_state == 3:
        #printf('NOP_SM_state '+str(NOP_SM_state))
        #end state
        en_NOP = 0
        pass
    else: #illegal state, should not get here
        printf('illegal state NOP')

]]></on_timer_code>
                <run_each>500</run_each>
                <on_stop_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>288</width>
                    <height>40</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b1f013e2ab5811ea8d210050b686ec77</id>
                <name><![CDATA[ENABLE/DISABLE HOME BMS SM]]></name>
                <type>Macro</type>
                <description><![CDATA[]]></description>
                <on_click_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.
# HIL API is imported as 'hil'
global en_HBMS
global HBMS_SM
global timer_genset_settle_HBMS_SM
if (en_HBMS == 1):
    en_HBMS = 0
    HBMS_SM = 0
    timer_genset_settle_HBMS_SM = 0
else:
    en_HBMS = 1
    ]]></on_click_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

]]></on_start_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.
# HIL API is imported as 'hil'
global en_HBMS
global HBMS_SM
global timer_genset_settle_HBMS_SM


#1. If in black out, proceed to close mains breaker, and start ESS
#2. If in a planned or unplanned island, synchronize the ESS with the grid and then close the mains breaker

if (en_HBMS == 1):
    HBMS_SOC = hil.read_analog_signal(name='Home.Batt1_SoC')
    
    if (HBMS_SM == 0):
        if (HBMS_SOC < MIN_SOC):
            #goto MIN_SOC state of SM. start ESS
            HBMS_SM = 1
            hil.set_scada_input_value('Home.Batt_in1.en', 1.0) 
        elif (HBMS_SOC > MAX_SOC):
            #goto MAX_SOC state of SM. Start ESS
            HBMS_SM = 5
            hil.set_scada_input_value('Home.Batt_in1.en', 1.0)
        else:
            pass
    elif (HBMS_SM == 1):
        #If grid is connected, charge battery via grid, else charge via genset.
        if (hil.read_digital_signal(name='Home.S1_fb') == 1):
            #goto charging via grid
            HBMS_SM = 2
        else:
            #goto charging via genset.
            HBMS_SM = 3
    elif (HBMS_SM  == 2):
        #set ESS charging power to max charging power if grid-connected
        hil.set_scada_input_value('Home.Batt_in1.Pref_kW', HOME_ESS_RATING_KW)
        if (HBMS_SOC > REST_MIN_SOC):
            hil.set_scada_input_value('Home.Batt_in1.Pref_kW', 0.0) #stop charging battery
            HBMS_SM = 7 #goto end state
        else:
            pass
    elif (HBMS_SM == 3):
        #Start genset in PQ mode and move to next state.
        #A bug in genset state machine will cause issues if attempting to start when it already started
        if (hil.read_digital_signal(name='Home.Natural Gas Genset.GCB_fb') == 0):
            hil.set_scada_input_value(genset_controls_root+'start', 1.0) #Start genset
            hil.wait_msec(100)
            hil.set_scada_input_value(genset_controls_root+'start', 0.0)
            #Set P/Q to 0 to avoid instability
            hil.set_scada_input_value('Home.Natural Gas Genset.controls.P controller.P_ref_kW', 0.0)
            hil.set_scada_input_value('Home.Natural Gas Genset.controls.Q controller.Q_ref_kVAr', 0.0)
        else:
            pass
        #printf('starting gen in PQ')
        hil.set_scada_input_value(genset_controls_root+'mode', 3) #Put genset in P-Q (GRID-FOLLOWING 2)
        HBMS_SM = 4
    elif (HBMS_SM == 4):
        #if genset is synced and connected, ramp up power
        if (hil.read_digital_signal(name='Home.Natural Gas Genset.GCB_fb') == 1) :
            if (HBMS_SOC < REST_MIN_SOC):
                #Charge battery via genset without overloading genset, and without overloading ESS
                P_load_kW = hil.read_analog_signal(name='Home.Lump1_out.P_kW')
                P_ref_genset_kW = HOME_ESS_RATING_KW + P_load_kW - 2.0
                if (P_ref_genset_kW < 0):
                    P_ref_genset_kW = 0
                elif (P_ref_genset_kW > GEN_P_RATING_KW-2.0):
                    P_ref_genset_kW = GEN_P_RATING_KW - 2.0
                else:
                    pass
                printf('Pref BMS = '+str(P_ref_genset_kW)+'kW')
                hil.set_scada_input_value('Home.Natural Gas Genset.controls.P controller.P_ref_kW', P_ref_genset_kW)
            else:
                #charging is done. stop genset, goto end state
                HBMS_SM = 7
        else:
            pass
    elif (HBMS_SM == 5):
        #If grid is connected, discharge battery via grid, else discharge via load (shutdown genset if it is running).
        if (hil.read_digital_signal(name='Home.S1_fb') == 1):
            #goto discharging via grid
            hil.set_scada_input_value('Home.Batt_in1.Pref_kW', -HOME_ESS_RATING_KW) #discharge battery via grid at max power
            if (HBMS_SOC < REST_MAX_SOC):
                #battery sufficiently discharged. goto end state.
                hil.set_scada_input_value('Home.Batt_in1.Pref_kW', 0.0) #stop discharging battery via grid
                HBMS_SM = 7
            else:
                pass
        else:
            #goto discharging via load (shutdown genset if running).
            HBMS_SM = 6
    elif (HBMS_SM == 6):
        #now discharging via load.
        if (HBMS_SOC < REST_MAX_SOC):
            #finished discharging. Goto end state. 
            #Later, consider re-starting genset if load more than minimum
            HBMS_SM = 7
        else:
            #do nothing now. 
            pass
    elif (HBMS_SM == 7):
        #In end state, if genset was ON, proceed to stop it. 
        #discharging via load (set genset ref. power to 0) if genset was ON
        if (hil.read_digital_signal(name='Home.Natural Gas Genset.GCB_fb') == 1):
            hil.set_scada_input_value('Home.Natural Gas Genset.controls.P controller.P_ref_kW', 0.0)
            hil.set_scada_input_value('Home.Natural Gas Genset.controls.Q controller.Q_ref_kVAr', 0.0)
            P_gen_kW = hil.read_analog_signal(name=genset_root+'P_gen_kW')
            if (P_gen_kW < 0.7):
                if (timer_genset_settle_HBMS_SM > 5): #5 seconds wait time
                    #shutdown genset and goto state 8
                    hil.set_scada_input_value(genset_controls_root+'stop', 1.0)
                    hil.wait_msec(100)
                    hil.set_scada_input_value(genset_controls_root+'stop', 0.0)
                    timer_genset_settle_HBMS_SM  = 0
                    HBMS_SM = 7
                else:
                    timer_genset_settle_HBMS_SM = timer_genset_settle_HBMS_SM + 1
                    #printf('Settling')
            else:
                pass
        else:
            #if genst is already OFF, do nothing
            HBMS_SM = 0        
            pass
    else:
        printf('Illegal OP: HBMS')
else:
    pass


]]></on_timer_code>
                <run_each>1000</run_each>
                <on_stop_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>80.0</y>
                    <width>288</width>
                    <height>40</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b1f013e3ab5811ea866b0050b686ec77</id>
                <name><![CDATA[ENABLE/DISABLE IMPORT/EXPORT SM]]></name>
                <type>Macro</type>
                <description><![CDATA[]]></description>
                <on_click_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.
# HIL API is imported as 'hil'

global en_IMP_EXP_SM
if (en_IMP_EXP_SM == 1):
    en_IMP_EXP_SM = 0
else:
    en_IMP_EXP_SM = 1
    
]]></on_click_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

]]></on_start_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.
# HIL API is imported as 'hil'
global P_import_export
global Q_import_export

if (en_IMP_EXP_SM == 1):
    EV_connection_state = hil.read_digital_signal(name='Charging Station.Battery inverter.S1_fb')
    NG_genset_connection_state = hil.read_digital_signal(name='Home.Natural Gas Genset.GCB_fb')
    grid_connection_state = hil.read_digital_signal(name='Home.S1_fb')
    Home_ESS_connection_state = hil.read_digital_signal(name='Home.Battery inverter (Average)1.calc_current.Active')
    P_load_kW = hil.read_analog_signal(name='Home.Lump1_out.P_kW')
    Q_load_kVAr = hil.read_analog_signal(name='Home.Lump1_out.Q_kVAr')
    
    if (grid_connection_state == 1):
        if (Home_ESS_connection_state == 0) and (NG_genset_connection_state == 0) and (EV_connection_state == 0):
            #do nothing here
            P_ref_each_kW = 0.0
            P_ref_HESS_kW = 0.0
            P_ref_NG_kW = 0
            P_ref_EV_kW = 0.0
            Q_ref_each_kVAr = 0.0
            Q_ref_HESS_kVAr = 0.0
            Q_ref_NG_kVAr = 0.0
            Q_ref_EV_kVAr = 0.0
            pass
            
        elif (Home_ESS_connection_state == 0) and (NG_genset_connection_state == 0) and (EV_connection_state == 1):
            P_ref_each_kW = (P_import_export - P_load_kW)/1.0
            P_ref_HESS_kW = 0
            P_ref_NG_kW = 0
            P_ref_EV_kW = -P_ref_each_kW
            
            Q_ref_each_kVAr = (Q_import_export - Q_load_kVAr)/1.0
            Q_ref_HESS_kVAr = 0
            Q_ref_NG_kVAr = 0
            Q_ref_EV_kVAr = -Q_ref_each_kVAr
        
        elif (Home_ESS_connection_state == 0) and (NG_genset_connection_state == 1) and (EV_connection_state == 0):
            P_ref_each_kW = (P_import_export - P_load_kW)/1.0
            P_ref_HESS_kW = 0
            P_ref_NG_kW = -P_ref_each_kW
            P_ref_EV_kW = 0
            
            Q_ref_each_kVAr = (Q_import_export - Q_load_kVAr)/1.0
            Q_ref_HESS_kVAr = 0
            Q_ref_NG_kVAr = -Q_ref_each_kVAr
            Q_ref_EV_kVAr = 0
            
        elif (Home_ESS_connection_state == 0) and (NG_genset_connection_state == 1) and (EV_connection_state == 1):
            P_ref_each_kW = (P_import_export - P_load_kW)/2.0
            P_ref_HESS_kW = 0
            P_ref_NG_kW = -P_ref_each_kW
            P_ref_EV_kW = -P_ref_each_kW
            
            Q_ref_each_kVAr = (Q_import_export - Q_load_kVAr)/2.0
            Q_ref_HESS_kVAr = 0
            Q_ref_NG_kVAr = -Q_ref_each_kVAr
            Q_ref_EV_kVAr = -Q_ref_each_kVAr
            
        elif (Home_ESS_connection_state == 1) and (NG_genset_connection_state == 0) and (EV_connection_state == 0):
            P_ref_each_kW = (P_import_export - P_load_kW)/1.0
            P_ref_HESS_kW = P_ref_each_kW
            P_ref_NG_kW = 0
            P_ref_EV_kW = 0
            
            Q_ref_each_kVAr = (Q_import_export - Q_load_kVAr)/1.0
            Q_ref_HESS_kVAr = Q_ref_each_kVAr
            Q_ref_NG_kVAr = 0
            Q_ref_EV_kVAr = 0        
            
        elif (Home_ESS_connection_state == 1) and (NG_genset_connection_state == 0) and (EV_connection_state == 1):
            P_ref_each_kW = (P_import_export - P_load_kW)/2.0
            P_ref_HESS_kW = P_ref_each_kW
            P_ref_NG_kW = 0
            P_ref_EV_kW = -P_ref_each_kW
            
            Q_ref_each_kVAr = (Q_import_export - Q_load_kVAr)/2.0
            Q_ref_HESS_kVAr = Q_ref_each_kVAr
            Q_ref_NG_kVAr = 0
            Q_ref_EV_kVAr = -Q_ref_each_kVAr                
            
        elif (Home_ESS_connection_state == 1) and (NG_genset_connection_state == 1) and (EV_connection_state == 0):
            P_ref_each_kW = (P_import_export - P_load_kW)/2.0
            P_ref_HESS_kW = P_ref_each_kW
            P_ref_NG_kW =-P_ref_each_kW
            P_ref_EV_kW = 0
            
            Q_ref_each_kVAr = (Q_import_export - Q_load_kVAr)/2.0
            Q_ref_HESS_kVAr = Q_ref_each_kVAr
            Q_ref_NG_kVAr = -Q_ref_each_kVAr
            Q_ref_EV_kVAr = 0
            
        elif (Home_ESS_connection_state == 1) and (NG_genset_connection_state == 1) and (EV_connection_state == 1):
            P_ref_each_kW = (P_import_export - P_load_kW)/3.0
            P_ref_HESS_kW = P_ref_each_kW
            P_ref_NG_kW = -P_ref_each_kW
            P_ref_EV_kW = -P_ref_each_kW
            
            Q_ref_each_kVAr = (Q_import_export - Q_load_kVAr)/3.0
            Q_ref_HESS_kVAr = Q_ref_each_kVAr
            Q_ref_NG_kVAr = -Q_ref_each_kVAr
            Q_ref_EV_kVAr = -Q_ref_each_kVAr
        else:
            printf('Illegal state')
        
        #Clip ref. values
        #==================
        #Home ESS
        if (P_ref_HESS_kW > 20.0):
            P_ref_HESS_kW = 20.0
        elif (P_ref_HESS_kW < -20.0):
            P_ref_HESS_kW = -20.0
        else:
            pass
        if (Q_ref_HESS_kVAr > 20.0):
            Q_ref_HESS_kVAr = 20.0
        elif (Q_ref_HESS_kVAr < -20.0):
            Q_ref_HESS_kVAr = -20.0
        else:
            pass
        
        #NG genset
        if (P_ref_NG_kW > 25.0):
            P_ref_NG_kW = 25.0
        elif (P_ref_NG_kW < 0.0):
            P_ref_NG_kW = 0.0
        else:
            pass
        if (Q_ref_NG_kVAr > 25.0):
            Q_ref_NG_kVAr = 25.0
        elif (Q_ref_NG_kVAr < -25.0):
            Q_ref_NG_kVAr = -25.0
        else:
            pass
        
        #EV
        if (P_ref_EV_kW > 22.0):
            P_ref_EV_kW = 22.0
        elif (P_ref_EV_kW < -22.0):
            P_ref_EV_kW = -22.0
        else:
            pass
        if (Q_ref_EV_kVAr > 22.0):
            Q_ref_EV_kVAr = 22.0
        elif (Q_ref_EV_kVAr < -22.0):
            Q_ref_EV_kVAr = -22.0
        else:
            pass
            
        #Apply the reference values
        #1. Apply Home ESS
        hil.set_scada_input_value('Home.Batt_in1.Pref_kW', P_ref_HESS_kW)
        hil.set_scada_input_value('Home.Batt_in1.Qref_kVAr', Q_ref_HESS_kVAr)
        
        #2. Apply NG genset
        hil.set_scada_input_value('Home.Natural Gas Genset.controls.P controller.P_ref_kW', P_ref_NG_kW)
        hil.set_scada_input_value('Home.Natural Gas Genset.controls.Q controller.Q_ref_kVAr', Q_ref_NG_kVAr)
        
        #3. Apply EV ESS
        hil.set_scada_input_value('Charging Station.Batt_in.Pref', P_ref_EV_kW*1e3)
        hil.set_scada_input_value('Charging Station.Batt_in.Qref', Q_ref_EV_kVAr*1e3)
    else:
        #if grid is absent do nothing
        pass
else:
    #do nothing if import export function disabled.
    pass]]></on_timer_code>
                <run_each>1000</run_each>
                <on_stop_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>120.0</y>
                    <width>288</width>
                    <height>40</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b1f013e4ab5811eab6410050b686ec77</id>
                <name><![CDATA[P Import]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[Import (+ve) or Export (-ve) value]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
global P_import_export
P_import_export = inputValue]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 0.0

]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[-40.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[kW]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>160.0</y>
                    <width>288</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b1f013e5ab5811ea8d9b0050b686ec77</id>
                <name><![CDATA[Q Import]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[Import (+ve) or Export (-ve) value]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
global Q_import_export
Q_import_export = inputValue]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 0.0
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[-20.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[kVAr]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>192.0</y>
                    <width>288</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>04138decab5911ea90fe0050b686ec77</id>
                <name><![CDATA[Microgrid Status]]></name>
                <type>TextDisplay</type>
                <description><![CDATA[]]></description>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
global ILSM_state

# specify Text Display options ('text' part is mandatory)
mcb_fb = hil.read_digital_signal(name='Home.S1_fb')
ess_fb = hil.read_digital_signal(name='Home.Battery inverter (Average)1.calc_current.Active')
gcb_fb = hil.read_digital_signal(name='Home.Natural Gas Genset.GCB_fb')

#Grid msg
if (mcb_fb == 1):
    msg_GRID_STATUS = 'Grid-tied'
elif (ess_fb == 0) and (gcb_fb == 0): #include EV ess when available
    msg_GRID_STATUS = 'Blackout'
else:
    msg_GRID_STATUS = 'Islanded'

#ILSM msg
if ILSM_state == 0:
    msg_IL = ''
elif (ILSM_state == 1) or (ILSM_state == 2):
    msg_IL = ' + Int. isl.: starting assets'
elif (ILSM_state == 3):
    msg_IL = ' + Int. isl.: ramping NG genset'
elif (ILSM_state == 4):
    msg_IL = ' + Int. isl.: OK'
else:
    msg_IL = 'illegal OP'

textDisplayData = {

    # label text
    "text": msg_GRID_STATUS + msg_IL,

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": 'black',
}

# mandatory variable used for storing value that will be displayed
displayValue = textDisplayData
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>224.0</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>c321a852ab5e11eab2c70050b686ec77</id>
                <name><![CDATA[Battery SOC]]></name>
                <type>BarGraphDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# specify one bar data ('bar_name', 'value', 'minimum_value' and 'maximum_value' parts are mandatory)
barData1 = {
    # display name
    "bar_name": "",
    # value to display
    "value": hil.get_scada_output_value('Electric Vehicle.battery soc'),
    # value unit
    "unit": "",
    # minimum value
    "minimum_value": 0.0,
    # maximum value
    "maximum_value": 100.0,
    # show warning and critical values
    "use_warning_critical": True,
    # warning value
    "warning_value": 15.0,
    # critical value
    "critical_value": 5.0,
    }

# list of bars data: [barData1, barData2,...barData10]
displayValue = [barData1]
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <bars_data>
                    <bar>
                        <display_name><![CDATA[Bar graph name]]></display_name>
                        <signal_name><![CDATA[Alternator_i_als]]></signal_name>
                        <minimum_value>0.0</minimum_value>
                        <maximum_value>100.0</maximum_value>
                        <use_warning_critical>True</use_warning_critical>
                        <warning_value>70.0</warning_value>
                        <critical_value>90.0</critical_value>
                        <unit><![CDATA[]]></unit>
                    </bar>
                    </bars_data>
                <widget_settings>
                    <x>1016.0</x>
                    <y>584.0</y>
                    <width>168</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f802a28cab6411eaadea0050b686ec77</id>
                <name><![CDATA[Capture/Scope]]></name>
                <type>Capture/Scope</type>
                <description><![CDATA[]]></description>
                <hierarchy_position>2</hierarchy_position>
                <working_mode>windowed</working_mode>
                <widget_settings>
                    <x>1104</x>
                    <y>304</y>
                    <width>120</width>
                    <height>120</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <state>Capture</state>
                    <layout>None</layout>
                    <presets>
                        <active_capture_preset>fault</active_capture_preset>
                        <active_scope_preset>genset_sync</active_scope_preset>
                        <capture name="Default">
                            <time_interval>10.0</time_interval>
                            <sample_rate>500000.0</sample_rate>
                            <background_color>black</background_color>
                            <layout>Vertical</layout>
                            <legend>True</legend>
                            <analog_signals>
                            <analog>
                            <channel>0</channel>
                            <name>Charging Station.Battery inverter.Vab</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>1</channel>
                            <name>Home.vab_gs</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>2</channel>
                            <name>Charging Station.Battery inverter.Ia</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>3</channel>
                            <name>Charging Station.Battery inverter.Idc_link</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>4</channel>
                            <name>Home.vab_ls</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>5</channel>
                            <name>Electric Vehicle.Vab0</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>6</channel>
                            <name>Grid.NPC PV inverter1.Vab</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>7</channel>
                            <name>Grid.NPC PV inverter1.Ig_a</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>8</channel>
                            <name>Grid.NPC PV inverter1.Ic_a</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>9</channel>
                            <name>Electric Vehicle.L2</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>10</channel>
                            <name>Electric Vehicle.Ia</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            </analog_signals>
                            <digital_signals>
                            </digital_signals>
                            <trigger>
                                <device>0</device>
                                <is_force>True</is_force>
                                <type>Analog</type>
                                <source>Home.vab_gs</source>
                                <edge>Rising edge</edge>
                                <treshold>0.0</treshold>
                                <offset>50.0</offset>
                                <useFirstTrigger>False</useFirstTrigger>
                            </trigger>
                            <plotting_options in_use="False">
                                <subplots>
                                    </subplots>
                            </plotting_options>
                        </capture>
                        <capture name="capture_switching_inverters">
                            <time_interval>1.0</time_interval>
                            <sample_rate>500000.0</sample_rate>
                            <background_color>black</background_color>
                            <layout>Vertical</layout>
                            <legend>True</legend>
                            <analog_signals>
                            <analog>
                            <channel>0</channel>
                            <name>Charging Station.Battery inverter.Vab</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>1</channel>
                            <name>Home.vab_gs</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>2</channel>
                            <name>Charging Station.Battery inverter.Ia</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>3</channel>
                            <name>Charging Station.Battery inverter.Idc_link</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>4</channel>
                            <name>Home.vab_ls</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>5</channel>
                            <name>Electric Vehicle.Vab0</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>6</channel>
                            <name>Grid.NPC PV inverter1.Vab</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>7</channel>
                            <name>Grid.NPC PV inverter1.Ig_a</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>8</channel>
                            <name>Grid.NPC PV inverter1.Ic_a</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            </analog_signals>
                            <digital_signals>
                            </digital_signals>
                            <trigger>
                                <device>0</device>
                                <is_force>True</is_force>
                                <type>Analog</type>
                                <source>Home.vab_gs</source>
                                <edge>Rising edge</edge>
                                <treshold>0.0</treshold>
                                <offset>50.0</offset>
                                <useFirstTrigger>False</useFirstTrigger>
                            </trigger>
                            <plotting_options in_use="False">
                                <subplots>
                                    </subplots>
                            </plotting_options>
                        </capture>
                        <capture name="fault">
                            <time_interval>0.5</time_interval>
                            <sample_rate>500000.0</sample_rate>
                            <background_color>black</background_color>
                            <layout>Vertical</layout>
                            <legend>True</legend>
                            <analog_signals>
                            <analog>
                            <channel>0</channel>
                            <name>Grid.Protection.Three-phase Meter1.IA</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>1</channel>
                            <name>Grid.Protection.Three-phase Meter1.IB</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>2</channel>
                            <name>Grid.Protection.Three-phase Meter1.IC</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>3</channel>
                            <name>Grid.Node 3.V1_rms</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            </analog_signals>
                            <digital_signals>
                            <digital>
                            <channel>0</channel>
                            <name>Grid.Protection.MP Breaker 1.S1_fb</name>
                            <is_locked>False</is_locked>
                            <vertical_offset>0.0</vertical_offset>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </digital>
                            <digital>
                            <channel>1</channel>
                            <name>Grid.Grid Fault1.enable_fb</name>
                            <is_locked>False</is_locked>
                            <vertical_offset>0.0</vertical_offset>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </digital>
                            </digital_signals>
                            <trigger>
                                <device>0</device>
                                <is_force>False</is_force>
                                <type>Digital</type>
                                <source>Grid.Grid Fault1.enable_fb</source>
                                <edge>Rising edge</edge>
                                <treshold>0.0</treshold>
                                <offset>10.0</offset>
                                <useFirstTrigger>False</useFirstTrigger>
                            </trigger>
                            <plotting_options in_use="False">
                                <subplots>
                                    </subplots>
                            </plotting_options>
                        </capture>
                        <capture name="intentional_islanding">
                            <time_interval>120.0</time_interval>
                            <sample_rate>10000.0</sample_rate>
                            <background_color>black</background_color>
                            <layout>Vertical</layout>
                            <legend>True</legend>
                            <analog_signals>
                            <analog>
                            <channel>0</channel>
                            <name>Home.Lump1_out.P_kW</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>1</channel>
                            <name>Home.Lump1_out.Q_kVAr</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>2</channel>
                            <name>Home.Batt_out1.P_kW</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>3</channel>
                            <name>Home.Batt_out1.Q_kVAr</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>4</channel>
                            <name>Home.Natural Gas Genset.P_gen_kW</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>5</channel>
                            <name>Home.Natural Gas Genset.Q_gen_kVAr</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>6</channel>
                            <name>Home.Grid_meter.I_RMS</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>7</channel>
                            <name>Home.Grid_meter.VLL_RMS</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>8</channel>
                            <name>Home.Grid_meter_split.P_kW</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>9</channel>
                            <name>Home.Natural Gas Genset.n_rpm_pu</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>10</channel>
                            <name>Home.Grid_meter_split.f_Hz_pu</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>11</channel>
                            <name>Home.Grid_meter_split.Q_kVAr</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>12</channel>
                            <name>Charging Station.Charging_station_meter_split.P_kW</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>13</channel>
                            <name>Charging Station.Charging_station_meter_split.Q_kVAr</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            </analog_signals>
                            <digital_signals>
                            <digital>
                            <channel>0</channel>
                            <name>Home.Natural Gas Genset.GCB_fb</name>
                            <is_locked>False</is_locked>
                            <vertical_offset>0.0</vertical_offset>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </digital>
                            <digital>
                            <channel>1</channel>
                            <name>Home.S1_fb</name>
                            <is_locked>False</is_locked>
                            <vertical_offset>0.0</vertical_offset>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </digital>
                            </digital_signals>
                            <trigger>
                                <device>0</device>
                                <is_force>True</is_force>
                                <type>Analog</type>
                                <source>Home.Lump1_out.P_kW</source>
                                <edge>Rising edge</edge>
                                <treshold>0.0</treshold>
                                <offset>10.0</offset>
                                <useFirstTrigger>False</useFirstTrigger>
                            </trigger>
                            <plotting_options in_use="False">
                                <subplots>
                                    </subplots>
                            </plotting_options>
                        </capture>
                        <scope name="Default">
                            <background_color>black</background_color>
                            <layout>Vertical</layout>
                            <legend>True</legend>
                            <show_viewports>4</show_viewports>
                            <decimation>2.0</decimation>
                            <time_base>0.005</time_base>
                            <analog_signals>
                            <analog>
                            <channel>0</channel>
                            <name>Charging Station.Battery inverter.Vab</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>1</channel>
                            <name>Home.vab_gs</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>2</channel>
                            <name>Charging Station.Battery inverter.Ia</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>3</channel>
                            <name>Charging Station.Battery inverter.Idc_link</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>4</channel>
                            <name>Home.vab_ls</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>5</channel>
                            <name>Electric Vehicle.Vab0</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>6</channel>
                            <name>Grid.NPC PV inverter1.Vab</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>7</channel>
                            <name>Grid.NPC PV inverter1.Ig_a</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>8</channel>
                            <name>Grid.NPC PV inverter1.Ic_a</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            </analog_signals>
                            <digital_signals>
                            </digital_signals>
                            <trigger>
                                <device>0</device>
                                <is_force>False</is_force>
                                <type>Analog</type>
                                <source>Home.vab_gs</source>
                                <edge>Rising edge</edge>
                                <treshold>0.0</treshold>
                                <offset>50.0</offset>
                                <useFirstTrigger>False</useFirstTrigger>
                            </trigger>
                        </scope>
                        <scope name="scope_inverter_switching">
                            <background_color>black</background_color>
                            <layout>Vertical</layout>
                            <legend>True</legend>
                            <show_viewports>4</show_viewports>
                            <decimation>2</decimation>
                            <time_base>0.005</time_base>
                            <analog_signals>
                            <analog>
                            <channel>0</channel>
                            <name>Charging Station.Battery inverter.Vab</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>1</channel>
                            <name>Home.vab_gs</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>2</channel>
                            <name>Charging Station.Battery inverter.Ia</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>3</channel>
                            <name>Charging Station.Battery inverter.Idc_link</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>4</channel>
                            <name>Home.vab_ls</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>5</channel>
                            <name>Electric Vehicle.Vab0</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>6</channel>
                            <name>Grid.NPC PV inverter1.Vab</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>7</channel>
                            <name>Grid.NPC PV inverter1.Ig_a</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>8</channel>
                            <name>Grid.NPC PV inverter1.Ic_a</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>9</channel>
                            <name>Electric Vehicle.L2</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>10</channel>
                            <name>Electric Vehicle.Ia</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            </analog_signals>
                            <digital_signals>
                            </digital_signals>
                            <trigger>
                                <device>0</device>
                                <is_force>False</is_force>
                                <type>Analog</type>
                                <source>Home.vab_gs</source>
                                <edge>Rising edge</edge>
                                <treshold>0.0</treshold>
                                <offset>50.0</offset>
                                <useFirstTrigger>False</useFirstTrigger>
                            </trigger>
                        </scope>
                        <scope name="genset_sync">
                            <background_color>black</background_color>
                            <layout>Grid</layout>
                            <legend>True</legend>
                            <show_viewports>1</show_viewports>
                            <decimation>2</decimation>
                            <time_base>0.005</time_base>
                            <analog_signals>
                            <analog>
                            <channel>0</channel>
                            <name>Home.Natural Gas Genset.v_ab</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>1</channel>
                            <name>Home.Natural Gas Genset.v_ab_mains</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            </analog_signals>
                            <digital_signals>
                            </digital_signals>
                            <trigger>
                                <device>0</device>
                                <is_force>False</is_force>
                                <type>Analog</type>
                                <source>Home.Natural Gas Genset.v_ab_mains</source>
                                <edge>Rising edge</edge>
                                <treshold>0.0</treshold>
                                <offset>50.0</offset>
                                <useFirstTrigger>False</useFirstTrigger>
                            </trigger>
                        </scope>
                        </presets>
                    <capture>
                        <time_interval>0.5</time_interval>
                        <sample_rate>500000.0</sample_rate>
                        <background_color>black</background_color>
                        <layout>Vertical</layout>
                        <legend>True</legend>
                        <trigger>
                            <type>Digital</type>
                            <source>Grid.Grid Fault1.enable_fb</source>
                            <edge>Rising edge</edge>
                            <treshold>0.0</treshold>
                            <offset>10.0</offset>
                            <useFirstTrigger>False</useFirstTrigger>
                        </trigger>

                        <analog_signals>
                            <analog>
                            <channel>0</channel>
                            <name>Grid.Protection.Three-phase Meter1.IA</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>1</channel>
                            <name>Grid.Protection.Three-phase Meter1.IB</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>2</channel>
                            <name>Grid.Protection.Three-phase Meter1.IC</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>3</channel>
                            <name>Grid.Node 3.V1_rms</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            </analog_signals>

                         <digital_signals>
                            <digital>
                            <channel>0</channel>
                            <name>Grid.Protection.MP Breaker 1.S1_fb</name>
                            <is_locked>False</is_locked>
                            <vertical_offset>0.0</vertical_offset>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </digital>
                            <digital>
                            <channel>1</channel>
                            <name>Grid.Grid Fault1.enable_fb</name>
                            <is_locked>False</is_locked>
                            <vertical_offset>0.0</vertical_offset>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </digital>
                            </digital_signals>

                    </capture>

                    <scope>
                        <time_base>0.005 </time_base>
                        <background_color>black</background_color>
                        <layout>Grid</layout>
                        <legend>True</legend>
                        <trigger>
                            <mode>Auto</mode>
                            <type>Analog</type>
                            <source>Home.Natural Gas Genset.v_ab_mains</source>
                            <edge>Rising edge</edge>
                            <treshold>0.0</treshold>
                            <offset>50.0</offset>
                        </trigger>

                         <analog_signals>
                            <analog>
                            <channel>0</channel>
                            <name>Home.Natural Gas Genset.v_ab</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>1</channel>
                            <name>Home.Natural Gas Genset.v_ab_mains</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            </analog_signals>

                        <digital_signals>
                            </digital_signals>

                    </scope>
                    <plotting_options in_use="False">
                    
                        <subplots>
                            </subplots>
                    </plotting_options>
                </widget_settings>

            </component_data>
        <component_data>
                <id>94e4c824ac1411eaafa70050b686ec77</id>
                <name><![CDATA[]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
global begin_profile
displayValue = bool(begin_profile)
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>448.0</x>
                    <y>40.0</y>
                    <width>56</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>68c9cee6ac1a11ea855e0050b686ec77</id>
                <name><![CDATA[Test Cases]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['901916ccac1a11ea86910050b686ec77', 'a4a1b1faac1a11ea96bf0050b686ec77', '220c15dcac1b11eab0950050b686ec77', '4cda0764ac1b11ea89600050b686ec77', '6d046d0aac1b11ea99e00050b686ec77']]]></components_ids>
                <hierarchy_position>2</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

v_inc = 0
begin_LVRT = 0]]></initialization_code>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>160</width>
                    <height>168.0</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>True</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>901916ccac1a11ea86910050b686ec77</id>
                <name><![CDATA[Reset grid]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'


hil.set_source_sine_waveform('Grid.Vs1', rms=120.08885599144216, frequency=60.0, phase=0.0, harmonics_pu=())
]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>112</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4a1b1faac1a11ea96bf0050b686ec77</id>
                <name><![CDATA[Grid harmonics]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# list of harmonics
#              (harmonic_number, rms, phase)
harmonics = [
             (5, 0.05, 0.0),
             (7, 0.01, 0.0),
             (11, 0.01, 0.0),
             (2, 0.0, 0.0),
             (2, 0.0, 0.0),
             (2, 0.0, 0.0),
             (2, 0.0, 0.0),
             (2, 0.0, 0.0),
             (2, 0.0, 0.0),
             (2, 0.0, 0.0),
             ]
hil.set_source_sine_waveform('Grid.Vs1', rms=120.08885599144216, frequency=60.0, phase=0.0, harmonics_pu=harmonics)
]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>32.0</y>
                    <width>112</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>220c15dcac1b11eab0950050b686ec77</id>
                <name><![CDATA[LVRT]]></name>
                <type>Macro</type>
                <description><![CDATA[]]></description>
                <on_click_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.
# HIL API is imported as 'hil'
global begin_LVRT
global v_inc
if (begin_LVRT == 1):
    begin_LVRT = 0
else:
    begin_LVRT = 1
    v_inc = 0

]]></on_click_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

]]></on_start_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.
# HIL API is imported as 'hil'
global begin_LVRT
global v_inc

if begin_LVRT:
    v_inc = v_inc + 20.0/10
    if v_inc <= 20.0:
        hil.set_source_sine_waveform('Grid.Vs1', rms=120.0888559-v_inc, frequency=60.0, phase=0.0, harmonics_pu=())
    else:
        begin_LVRT = 0
        v_inc = 0
else:
    pass]]></on_timer_code>
                <run_each>250</run_each>
                <on_stop_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>96.0</y>
                    <width>120</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>4cda0764ac1b11ea89600050b686ec77</id>
                <name><![CDATA[]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
global begin_LVRT
displayValue = bool(begin_LVRT)
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>120.0</x>
                    <y>104.0</y>
                    <width>32</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>6d046d0aac1b11ea99e00050b686ec77</id>
                <name><![CDATA[Grid loss]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
hil.set_contactor('Home.S1', swControl=True, swState=False)
]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>64.0</y>
                    <width>112</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f8b424f4acc411ea962d0050b686ec77</id>
                <name><![CDATA[Grid]]></name>
                <displayed_name><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Grid</p></body></html>]]></displayed_name>
                <name_position><![CDATA[Top]]></name_position>
                <type>SubPanel</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['787add52acc511ea9e490050b686ec77', '787b041aacc511ea90ff0050b686ec77', '787b2b0eacc511ea8dee0050b686ec77', '787b2b1cacc511eaa9230050b686ec77', 'f41643d8aec011eab14c0050b686ec77', '512587e6aec111ea891a0050b686ec77', '1991c5d8aecc11ea924b0050b686ec77', '5d0254d8aecc11ea9c4a0050b686ec77', '4825f86cb04a11ea8cf50028f8dc6aad']]]></components_ids>
                <hierarchy_position>2</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <use_background_image>True</use_background_image>
                <image><![CDATA[img\grid_source.png]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>336</x>
                    <y>0</y>
                    <width>72</width>
                    <height>72</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>787add52acc511ea9e490050b686ec77</id>
                <name><![CDATA[NODE 4]]></name>
                <type>Group</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[['787add53acc511eaa9a00050b686ec77', '787add54acc511ea86200050b686ec77', '787add55acc511ea9b090050b686ec77', '787add56acc511ea89c80050b686ec77', '787add57acc511ea9b4b0050b686ec77', '787add58acc511ea82580050b686ec77', '787add59acc511ea89780050b686ec77', '787add5aacc511ea9e6c0050b686ec77', '787add5bacc511ea85f40050b686ec77', '787add5cacc511eaac0c0050b686ec77', '787add5dacc511ea9be30050b686ec77', '787b0418acc511ea8a680050b686ec77', '787b0419acc511ea88510050b686ec77']]]></components_ids>
                <hierarchy_position>3</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

node = 'Grid.Node 4.']]></initialization_code>
                <widget_settings>
                    <x>1184.0</x>
                    <y>0.0</y>
                    <width>312</width>
                    <height>528</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>787b041aacc511ea90ff0050b686ec77</id>
                <name><![CDATA[NODE 2]]></name>
                <type>Group</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[['787b041bacc511eaa2a30050b686ec77', '787b041cacc511ea832c0050b686ec77', '787b041dacc511eabceb0050b686ec77', '787b041eacc511ea88de0050b686ec77', '787b041facc511ea876f0050b686ec77', '787b0420acc511ea80050050b686ec77', '787b0421acc511eabfaa0050b686ec77', '787b0422acc511ea817a0050b686ec77', '787b0423acc511eaa24a0050b686ec77', '787b0424acc511eab0480050b686ec77', '787b0425acc511eaafb50050b686ec77', '787b2b0cacc511ea80ed0050b686ec77', '787b2b0dacc511eab67d0050b686ec77']]]></components_ids>
                <hierarchy_position>3</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

node = 'Grid.Node 2.']]></initialization_code>
                <widget_settings>
                    <x>312.0</x>
                    <y>0.0</y>
                    <width>312</width>
                    <height>528</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>787b2b0eacc511ea8dee0050b686ec77</id>
                <name><![CDATA[NODE 1]]></name>
                <type>Group</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[['787b2b0facc511ea9c510050b686ec77', '787b2b10acc511ea8e860050b686ec77', '787b2b11acc511eab0b10050b686ec77', '787b2b12acc511eab3640050b686ec77', '787b2b13acc511eaa2d00050b686ec77', '787b2b14acc511ea8c310050b686ec77', '787b2b15acc511ea95be0050b686ec77', '787b2b16acc511ea9b4e0050b686ec77', '787b2b17acc511ea91c10050b686ec77', '787b2b18acc511eab8eb0050b686ec77', '787b2b19acc511eabe620050b686ec77', '787b2b1aacc511ea85260050b686ec77', '787b2b1bacc511ea8a590050b686ec77']]]></components_ids>
                <hierarchy_position>3</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

node = 'Grid.Node 1.']]></initialization_code>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>312</width>
                    <height>528</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>787b2b1cacc511eaa9230050b686ec77</id>
                <name><![CDATA[NODE 3]]></name>
                <type>Group</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[['787b2b1dacc511eabb020050b686ec77', '787b2b1eacc511eab6c80050b686ec77', '787b7900acc511ea89bc0050b686ec77', '787b7901acc511ea853c0050b686ec77', '787b7902acc511ea90320050b686ec77', '787b7903acc511ea91ed0050b686ec77', '787b7904acc511eaa8bc0050b686ec77', '787b7905acc511eaa9e10050b686ec77', '787b7906acc511eaa2480050b686ec77', '787b7907acc511ea80c60050b686ec77', '787b7908acc511eaad140050b686ec77', '787b7909acc511eaa0b30050b686ec77', '787b790aacc511ea9fa10050b686ec77']]]></components_ids>
                <hierarchy_position>3</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

node = 'Grid.Node 3.']]></initialization_code>
                <widget_settings>
                    <x>624.0</x>
                    <y>0.0</y>
                    <width>312</width>
                    <height>528</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>787add53acc511eaa9a00050b686ec77</id>
                <name><![CDATA[V1 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V1_rms')

]]></code>
                <signal_name><![CDATA[Node 1.V1_rms]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>144.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787add54acc511ea86200050b686ec77</id>
                <name><![CDATA[Active Power]]></name>
                <type>Gauge</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(node+'P')/1000

]]></code>
                <signal_name><![CDATA[Node 2.P]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>500</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>296</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>8000.0</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787add55acc511ea9b090050b686ec77</id>
                <name><![CDATA[V1 phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V1_phase')

]]></code>
                <signal_name><![CDATA[Node 1.V1_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>144.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787add56acc511ea89c80050b686ec77</id>
                <name><![CDATA[V2 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V2_rms')

]]></code>
                <signal_name><![CDATA[Node 1.V2_rms]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>200.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787add57acc511ea9b4b0050b686ec77</id>
                <name><![CDATA[V2 phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V2_phase')

]]></code>
                <signal_name><![CDATA[Node 1.V2_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>200.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787add58acc511ea82580050b686ec77</id>
                <name><![CDATA[V3 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V3_rms')

]]></code>
                <signal_name><![CDATA[Node 1.V3_rms]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>256.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787add59acc511ea89780050b686ec77</id>
                <name><![CDATA[V3 phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V3_phase')

]]></code>
                <signal_name><![CDATA[Node 1.V3_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>256.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787add5aacc511ea9e6c0050b686ec77</id>
                <name><![CDATA[I1 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I1_rms')

]]></code>
                <signal_name><![CDATA[Node 1.I1_rms]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>328.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787add5bacc511ea85f40050b686ec77</id>
                <name><![CDATA[I2I phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I2_phase')

]]></code>
                <signal_name><![CDATA[Node 1.I2_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>384.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787add5cacc511eaac0c0050b686ec77</id>
                <name><![CDATA[I2 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I2_rms')

]]></code>
                <signal_name><![CDATA[Node 1.I2_rms]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>384.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787add5dacc511ea9be30050b686ec77</id>
                <name><![CDATA[I3 phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I3_phase')


]]></code>
                <signal_name><![CDATA[Node 1.I3_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>440.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b0418acc511ea8a680050b686ec77</id>
                <name><![CDATA[I3 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I3_rms')

]]></code>
                <signal_name><![CDATA[Node 1.I3_rms]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>440.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b0419acc511ea88510050b686ec77</id>
                <name><![CDATA[I1 phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I1_phase')

]]></code>
                <signal_name><![CDATA[Node 1.I1_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>328.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b041bacc511eaa2a30050b686ec77</id>
                <name><![CDATA[V1 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V1_rms')

]]></code>
                <signal_name><![CDATA[Node 1.V1_rms]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>144.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b041cacc511ea832c0050b686ec77</id>
                <name><![CDATA[Active Power]]></name>
                <type>Gauge</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(node+'P')/1000

]]></code>
                <signal_name><![CDATA[Node 2.P]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>500</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>296</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>8000.0</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b041dacc511eabceb0050b686ec77</id>
                <name><![CDATA[V1 phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V1_phase')

]]></code>
                <signal_name><![CDATA[Node 1.V1_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>144.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b041eacc511ea88de0050b686ec77</id>
                <name><![CDATA[V2 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V2_rms')

]]></code>
                <signal_name><![CDATA[Node 1.V2_rms]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>200.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b041facc511ea876f0050b686ec77</id>
                <name><![CDATA[V2 phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V2_phase')

]]></code>
                <signal_name><![CDATA[Node 1.V2_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>200.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b0420acc511ea80050050b686ec77</id>
                <name><![CDATA[V3 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V3_rms')

]]></code>
                <signal_name><![CDATA[Node 1.V3_rms]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>256.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b0421acc511eabfaa0050b686ec77</id>
                <name><![CDATA[V3 phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V3_phase')

]]></code>
                <signal_name><![CDATA[Node 1.V3_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>256.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b0422acc511ea817a0050b686ec77</id>
                <name><![CDATA[I1 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I1_rms')

]]></code>
                <signal_name><![CDATA[Node 1.I1_rms]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>328.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b0423acc511eaa24a0050b686ec77</id>
                <name><![CDATA[I2I phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I2_phase')

]]></code>
                <signal_name><![CDATA[Node 1.I2_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>384.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b0424acc511eab0480050b686ec77</id>
                <name><![CDATA[I2 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I2_rms')

]]></code>
                <signal_name><![CDATA[Node 1.I2_rms]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>384.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b0425acc511eaafb50050b686ec77</id>
                <name><![CDATA[I3 phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I3_phase')


]]></code>
                <signal_name><![CDATA[Node 1.I3_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>440.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b2b0cacc511ea80ed0050b686ec77</id>
                <name><![CDATA[I3 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I3_rms')

]]></code>
                <signal_name><![CDATA[Node 1.I3_rms]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>440.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b2b0dacc511eab67d0050b686ec77</id>
                <name><![CDATA[I1 phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I1_phase')

]]></code>
                <signal_name><![CDATA[Node 1.I1_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>328.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b2b0facc511ea9c510050b686ec77</id>
                <name><![CDATA[V1 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V1_rms')

]]></code>
                <signal_name><![CDATA[Node 1.V1_rms]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>144.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b2b10acc511ea8e860050b686ec77</id>
                <name><![CDATA[Active Power]]></name>
                <type>Gauge</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(node+'P')/1000

]]></code>
                <signal_name><![CDATA[Node 2.P]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>500</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>296</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>8000.0</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b2b11acc511eab0b10050b686ec77</id>
                <name><![CDATA[V1 phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V1_phase')

]]></code>
                <signal_name><![CDATA[Node 1.V1_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>144.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b2b12acc511eab3640050b686ec77</id>
                <name><![CDATA[V2 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V2_rms')

]]></code>
                <signal_name><![CDATA[Node 1.V2_rms]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>200.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b2b13acc511eaa2d00050b686ec77</id>
                <name><![CDATA[V2 phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V2_phase')

]]></code>
                <signal_name><![CDATA[Node 1.V2_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>200.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b2b14acc511ea8c310050b686ec77</id>
                <name><![CDATA[V3 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V3_rms')

]]></code>
                <signal_name><![CDATA[Node 1.V3_rms]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>256.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b2b15acc511ea95be0050b686ec77</id>
                <name><![CDATA[V3 phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V3_phase')

]]></code>
                <signal_name><![CDATA[Node 1.V3_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>256.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b2b16acc511ea9b4e0050b686ec77</id>
                <name><![CDATA[I1 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I1_rms')

]]></code>
                <signal_name><![CDATA[Node 1.I1_rms]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>328.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b2b17acc511ea91c10050b686ec77</id>
                <name><![CDATA[I2I phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I2_phase')

]]></code>
                <signal_name><![CDATA[Node 1.I2_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>384.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b2b18acc511eab8eb0050b686ec77</id>
                <name><![CDATA[I2 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I2_rms')

]]></code>
                <signal_name><![CDATA[Node 1.I2_rms]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>384.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b2b19acc511eabe620050b686ec77</id>
                <name><![CDATA[I3 phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I3_phase')


]]></code>
                <signal_name><![CDATA[Node 1.I3_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>440.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b2b1aacc511ea85260050b686ec77</id>
                <name><![CDATA[I3 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I3_rms')

]]></code>
                <signal_name><![CDATA[Node 1.I3_rms]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>440.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b2b1bacc511ea8a590050b686ec77</id>
                <name><![CDATA[I1 phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I1_phase')

]]></code>
                <signal_name><![CDATA[Node 1.I1_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>328.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b2b1dacc511eabb020050b686ec77</id>
                <name><![CDATA[V1 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V1_rms')

]]></code>
                <signal_name><![CDATA[Node 1.V1_rms]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>144.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b2b1eacc511eab6c80050b686ec77</id>
                <name><![CDATA[Active Power]]></name>
                <type>Gauge</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(node+'P')/1000

]]></code>
                <signal_name><![CDATA[Node 2.P]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>500</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>296</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>8000.0</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b7900acc511ea89bc0050b686ec77</id>
                <name><![CDATA[V1 phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V1_phase')

]]></code>
                <signal_name><![CDATA[Node 1.V1_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>144.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b7901acc511ea853c0050b686ec77</id>
                <name><![CDATA[V2 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V2_rms')

]]></code>
                <signal_name><![CDATA[Node 1.V2_rms]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>200.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b7902acc511ea90320050b686ec77</id>
                <name><![CDATA[V2 phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V2_phase')

]]></code>
                <signal_name><![CDATA[Node 1.V2_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>200.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b7903acc511ea91ed0050b686ec77</id>
                <name><![CDATA[V3 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V3_rms')

]]></code>
                <signal_name><![CDATA[Node 1.V3_rms]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>256.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b7904acc511eaa8bc0050b686ec77</id>
                <name><![CDATA[V3 phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'V3_phase')

]]></code>
                <signal_name><![CDATA[Node 1.V3_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>256.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b7905acc511eaa9e10050b686ec77</id>
                <name><![CDATA[I1 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I1_rms')

]]></code>
                <signal_name><![CDATA[Node 1.I1_rms]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>328.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b7906acc511eaa2480050b686ec77</id>
                <name><![CDATA[I2I phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I2_phase')

]]></code>
                <signal_name><![CDATA[Node 1.I2_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>384.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b7907acc511ea80c60050b686ec77</id>
                <name><![CDATA[I2 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I2_rms')

]]></code>
                <signal_name><![CDATA[Node 1.I2_rms]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>384.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b7908acc511eaad140050b686ec77</id>
                <name><![CDATA[I3 phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I3_phase')


]]></code>
                <signal_name><![CDATA[Node 1.I3_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>440.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b7909acc511eaa0b30050b686ec77</id>
                <name><![CDATA[I3 RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I3_rms')

]]></code>
                <signal_name><![CDATA[Node 1.I3_rms]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>440.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>787b790aacc511ea9fa10050b686ec77</id>
                <name><![CDATA[I1 phase]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name=node+'I1_phase')

]]></code>
                <signal_name><![CDATA[Node 1.I1_phase]]></signal_name>
                <unit><![CDATA[deg]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>328.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d0ee77baab5711eaa3fe0050b686ec77</id>
                <name><![CDATA[]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).On]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
#x = hil.read_digital_signal(name = CB_name+'_fb')
x = hil.read_digital_signal(name='Charging Station.Battery inverter.S1_fb')

displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>728.0</x>
                    <y>256.0</y>
                    <width>32</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0edb4e6ab5711eaae650050b686ec77</id>
                <name><![CDATA[]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).On]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
#x = hil.read_digital_signal(name = CB_name+'_fb')
x = hil.read_digital_signal(name='Home.Natural Gas Genset.GCB_fb')
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>488.0</x>
                    <y>256.0</y>
                    <width>32</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee77b8ab5711eab2b00050b686ec77</id>
                <name><![CDATA[]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).On]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
#x = hil.read_digital_signal(name = CB_name+'_fb')
x = hil.read_digital_signal(name='Home.Lump1.calc_current.Active')
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>304.0</x>
                    <y>256.0</y>
                    <width>32</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee77bbab5711eaa52a0050b686ec77</id>
                <name><![CDATA[]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).On]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
#x = hil.read_digital_signal(name = CB_name+'_fb')
inv_root = 'Home.Battery inverter (Average)1'
x = hil.read_digital_signal(name=inv_root+'.calc_current.Active')
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>88.0</x>
                    <y>256.0</y>
                    <width>32</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d0ee77b9ab5711ea8da50050b686ec77</id>
                <name><![CDATA[]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).On]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='Home.S1_fb')
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>392.0</x>
                    <y>112.0</y>
                    <width>32</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f41643d8aec011eab14c0050b686ec77</id>
                <name><![CDATA[PV_inverter]]></name>
                <displayed_name><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:10pt;">PV_inverter</span></p></body></html>]]></displayed_name>
                <name_position><![CDATA[Top]]></name_position>
                <type>SubPanel</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['f41665faaec011ea98cc0050b686ec77', 'f41665fbaec011ea90f70050b686ec77', 'f4168ce0aec011ea8da60050b686ec77', 'f416b51baec011ea9e270050b686ec77', '91f47874b03f11eabbe50028f8dc6aad']]]></components_ids>
                <hierarchy_position>3</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <use_background_image>True</use_background_image>
                <image><![CDATA[img\pv_png.png]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.

##########################################################################################
####################################   PATHS   ###########################################
##########################################################################################
############## When defining paths, the last "." must always be included. ################
# Paths here are defined as the full qualified name (fqn) to the desired 
# composite component. For example a composite_component inside subsystem1 
# inside subsystem2 will have fqn="subsystem2.subsystem1.composite_component.".
# Note that the path ends with a ".", since it's related to a composite
# component. By following this approach it becomes easier to locate inner
# components of the composite component.

path_to_component = "Home.PV inverter (Average)."
path_to_inputs = "Home.PV_in."
path_to_outputs = "Home.PV_out."
PV_panel = "Home.Photovoltaic Panel1"

##########################################################################################
###############################   BASE VARIABLES   #######################################
##########################################################################################

Sb = 10e3  # VA
Vb = 208  # V
fb = 60.0  # Hz
Vdc = 450  # V]]></initialization_code>
                <widget_settings>
                    <x>944</x>
                    <y>0</y>
                    <width>248</width>
                    <height>448</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f41665faaec011ea98cc0050b686ec77</id>
                <name><![CDATA[Phasor graph]]></name>
                <type>PhasorGraphDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API

import numpy as np
# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ ['Phasor 1 name', Phasor 1 phase, Phasor 1 magnitude],
#                      ['Phasor X name', Phasor X phase, Phasor X magnitude] ]
P = hil.read_analog_signal(name = 'Grid.out.P')
Q = hil.read_analog_signal(name = 'Grid.out.Q')
S = hil.read_analog_signal(name = 'Grid.out.S')
displayValue = [ ["S", np.arctan2(Q,P)*180.0/np.pi,S/750000.0] ]
]]></code>
                <signals><![CDATA[]]></signals>
                <updateRate>500</updateRate>
                <background_color>#ffffff</background_color>
                <hierarchy_position>4</hierarchy_position>
                <phasors_data>
                    <phasor>
                        <display_name><![CDATA[Phasor [Double click to edit]]]></display_name>
                        <magnitude_signal><![CDATA[Alternator_i_als]]></magnitude_signal>
                        <phase_signal><![CDATA[Alternator_i_als]]></phase_signal>
                    </phasor>
                    </phasors_data>
                <widget_settings>
                    <x>480.0</x>
                    <y>448.0</y>
                    <width>360</width>
                    <height>280</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <range_max>20.0</range_max>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f41665fbaec011ea90f70050b686ec77</id>
                <name><![CDATA[DC Link]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['f41665fcaec011eab0390050b686ec77', 'f41665fdaec011ea9e290050b686ec77', 'f4168cdcaec011ea96ab0050b686ec77', 'f4168cddaec011ea834f0050b686ec77', 'f4168cdeaec011ea829b0050b686ec77', 'f4168cdfaec011ea85730050b686ec77']]]></components_ids>
                <hierarchy_position>4</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
]]></initialization_code>
                <widget_settings>
                    <x>8.0</x>
                    <y>16.0</y>
                    <width>528</width>
                    <height>432</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f41665fcaec011eab0390050b686ec77</id>
                <name><![CDATA[TOTAL voltage]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Grid.out.Vdc_total]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>160</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f41665fdaec011ea9e290050b686ec77</id>
                <name><![CDATA[HALF voltage]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Grid.out.Vdc_half]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>176.0</x>
                    <y>0.0</y>
                    <width>160</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f4168cdcaec011ea96ab0050b686ec77</id>
                <name><![CDATA[PV Monitor]]></name>
                <type>PVDisplay</type>
                <description><![CDATA[]]></description>
                <pv_panel_name><![CDATA[Grid.Photovoltaic Panel 1]]></pv_panel_name>
                <updateRate>1000</updateRate>
                <background_color>#ffffff</background_color>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>96.0</y>
                    <width>512</width>
                    <height>320</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f4168cddaec011ea834f0050b686ec77</id>
                <name><![CDATA[HALF voltage]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
vdc_total = hil.read_analog_signal(name = 'Grid.out.Vdc_total')
vdc_half = hil.read_analog_signal(name = 'Grid.out.Vdc_half')
if vdc_total == 0:
    displayValue = 0
else:
    displayValue = 100.0*vdc_half/vdc_total

]]></code>
                <signal_name><![CDATA[V_dc_1]]></signal_name>
                <unit><![CDATA[%]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>352.0</x>
                    <y>0.0</y>
                    <width>160</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f4168cdeaec011ea829b0050b686ec77</id>
                <name><![CDATA[Irradiance [W/m²]]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
hil.set_pv_amb_params('Grid.Photovoltaic Panel 1', illumination = inputValue)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 1000.0
hil.set_pv_amb_params('Grid.Photovoltaic Panel 1', illumination = widgetValue)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[1000.0]]></inputValue>
                <min>0.0</min>
                <max>1500.0</max>
                <step>1.0</step>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>8.0</x>
                    <y>64.0</y>
                    <width>240</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f4168cdfaec011ea85730050b686ec77</id>
                <name><![CDATA[Temperature [°C]]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
hil.set_pv_amb_params('Grid.Photovoltaic Panel 1', temperature = inputValue)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 20.0
hil.set_pv_amb_params('Grid.Photovoltaic Panel 1', temperature = widgetValue)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[20.0]]></inputValue>
                <min>-20.0</min>
                <max>40.0</max>
                <step>1.0</step>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>264.0</x>
                    <y>64.0</y>
                    <width>240</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f4168ce0aec011ea8da60050b686ec77</id>
                <name><![CDATA[Inverter Control]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['f4168ce1aec011ea89020050b686ec77', 'f4168ce2aec011ea86630050b686ec77', 'f416b512aec011ea8c9d0050b686ec77', 'f416b513aec011eabaa20050b686ec77', 'f416b514aec011eaa4c40050b686ec77', 'f416b515aec011ea8ece0050b686ec77', 'f416b516aec011eaacee0050b686ec77', 'f416b517aec011eab7360050b686ec77', 'f416b518aec011eabf400050b686ec77', 'f416b519aec011ea80a70050b686ec77', 'f416b51aaec011eabf2d0050b686ec77']]]></components_ids>
                <hierarchy_position>4</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
]]></initialization_code>
                <widget_settings>
                    <x>544.0</x>
                    <y>16.0</y>
                    <width>288</width>
                    <height>432</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f4168ce1aec011ea89020050b686ec77</id>
                <name><![CDATA[Inverter]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'On':
    # do something when 'Case 1' is selected
    hil.set_scada_input_value('Grid.in.NPC enable', 1.0)
    pass
elif inputValue == 'Off':
    # do something when 'Case 2' is selected
    hil.set_scada_input_value('Grid.in.NPC enable', 0.0)
    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 'On'
hil.set_scada_input_value('Grid.in.NPC enable', 1.0)

]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[On]]></inputValue>
                <availableValues><![CDATA[['On', 'Off']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>8.0</y>
                    <width>264</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f4168ce2aec011ea86630050b686ec77</id>
                <name><![CDATA[Contactor - Pre charge contactor]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[Grid.NPC PV inverter1.S2_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>8.0</x>
                    <y>48.0</y>
                    <width>264</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f416b512aec011ea8c9d0050b686ec77</id>
                <name><![CDATA[Operating]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[Grid.out.operating]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>8.0</x>
                    <y>112.0</y>
                    <width>264</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f416b513aec011eabaa20050b686ec77</id>
                <name><![CDATA[Contactor - Main contactor]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[Grid.NPC PV inverter1.S1_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>8.0</x>
                    <y>80.0</y>
                    <width>264</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f416b514aec011eaa4c40050b686ec77</id>
                <name><![CDATA[FRT - References Enable]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[Grid.NPC PV inverter1.Frequency ride-through.Enable ref]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>8.0</x>
                    <y>272.0</y>
                    <width>264</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f416b515aec011ea8ece0050b686ec77</id>
                <name><![CDATA[FRT - Inverter Enable]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[Grid.out.FRT_inv_enable]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>8.0</x>
                    <y>304.0</y>
                    <width>264</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f416b516aec011eaacee0050b686ec77</id>
                <name><![CDATA[VRT - Inverter Enable]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[Grid.out.VRT_inv_enable]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>8.0</x>
                    <y>368.0</y>
                    <width>264</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f416b517aec011eab7360050b686ec77</id>
                <name><![CDATA[VRT - References Enable]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[Grid.out.VRT_ref_enable]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>8.0</x>
                    <y>336.0</y>
                    <width>264</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f416b518aec011eabf400050b686ec77</id>
                <name><![CDATA[Power Factor (absolute)]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value('Grid.in.pf ref', inputValue)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 1.0
hil.set_scada_input_value('Grid.in.pf ref', widgetValue)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[1.0]]></inputValue>
                <min>0.5</min>
                <max>1.0</max>
                <step>0.05</step>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>8.0</x>
                    <y>144.0</y>
                    <width>264</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f416b519aec011ea80a70050b686ec77</id>
                <name><![CDATA[Saturation Priority]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
if inputValue == "Power Factor":
    hil.set_scada_input_value('Grid.in.Priority', 0)
if inputValue == "Active Power":
    hil.set_scada_input_value('Grid.in.Priority', 1)
if inputValue == "Reactive Power":
    hil.set_scada_input_value('Grid.in.Priority', 2)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue']]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Macro code]]></on_start_code_source>
                <inputValue><![CDATA[Active Power]]></inputValue>
                <availableValues><![CDATA[['Active Power', 'Reactive Power', 'Power Factor']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>232.0</y>
                    <width>280</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f416b51aaec011eabf2d0050b686ec77</id>
                <name><![CDATA[Q direction]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
if inputValue == "Inductive":
    hil.set_scada_input_value('Grid.in.Qsign', -1)
if inputValue == "Capacitive":
    hil.set_scada_input_value('Grid.in.Qsign', 1)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue']]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Macro code]]></on_start_code_source>
                <inputValue><![CDATA[Capacitive]]></inputValue>
                <availableValues><![CDATA[['Inductive', 'Capacitive']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>200.0</y>
                    <width>280</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f416b51baec011ea9e270050b686ec77</id>
                <name><![CDATA[PCC measurements]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['f416b51caec011ea9ed00050b686ec77', 'f416b51daec011eabd000050b686ec77', 'f416b51eaec011ea984e0050b686ec77', 'f416b51faec011ea8e2c0050b686ec77', 'f416b520aec011ea96110050b686ec77', 'f416b521aec011ea88e90050b686ec77', 'f416b522aec011eabc390050b686ec77', 'f416b523aec011eaa00e0050b686ec77', 'f416b524aec011eaa8840050b686ec77', 'f416dc00aec011ea837d0050b686ec77', 'f416dc01aec011ea81cc0050b686ec77', 'f416dc02aec011ea94b60050b686ec77', 'f416dc03aec011eab8710050b686ec77', 'f416dc04aec011eaa80a0050b686ec77', 'f416dc05aec011ea98dd0050b686ec77']]]></components_ids>
                <hierarchy_position>4</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
]]></initialization_code>
                <widget_settings>
                    <x>840.0</x>
                    <y>16.0</y>
                    <width>424</width>
                    <height>712</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f416b51caec011ea9ed00050b686ec77</id>
                <name><![CDATA[PCC voltage [V]]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ [sigVal1,sigVal2,sigVal3], ["Signal 1 name","Signal 2 name","Signal 3 name"] ]
Va = hil.read_analog_signal(name = "Grid.out.Va_rms")
Vb = hil.read_analog_signal(name = "Grid.out.Vb_rms")
Vc = hil.read_analog_signal(name = "Grid.out.Vc_rms")

displayValue = [[Va,Vb,Vc],["Va","Vb","Vc"]]

]]></code>
                <analog_signals><![CDATA[['Va', 'Vb', 'Vc']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>96.0</x>
                    <y>160.0</y>
                    <width>320</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>272.0</y_range_min>
                    <y_range_max>283.0</y_range_max>
                    <time_window>60</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f416b51daec011eabd000050b686ec77</id>
                <name><![CDATA[PCC current [A]]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ [sigVal1,sigVal2,sigVal3], ["Signal 1 name","Signal 2 name","Signal 3 name"] ]
Ia = hil.read_analog_signal(name = "Grid.out.Ia_rms")
Ib = hil.read_analog_signal(name = "Grid.out.Ib_rms")
Ic = hil.read_analog_signal(name = "Grid.out.Ic_rms")

displayValue = [[Ia,Ib,Ic],["Ia","Ib","Ic"]]

]]></code>
                <analog_signals><![CDATA[['Ia', 'Ib', 'Ic']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>96.0</x>
                    <y>312.0</y>
                    <width>320</width>
                    <height>184</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>272.0</y_range_min>
                    <y_range_max>283.0</y_range_max>
                    <time_window>60</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f416b51eaec011ea984e0050b686ec77</id>
                <name><![CDATA[PCC Va]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------
global V_ref
global Va_scale
# mandatory variable used for storing value
# that will be displayed
displayValue = V_ref*Va_scale

]]></code>
                <signal_name><![CDATA[Grid.out.Va_rms]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>176.0</y>
                    <width>96</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f416b51faec011ea8e2c0050b686ec77</id>
                <name><![CDATA[PCC Vb]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------
global V_ref
global Va_scale
# mandatory variable used for storing value
# that will be displayed
displayValue = V_ref*Va_scale

]]></code>
                <signal_name><![CDATA[Grid.out.Vb_rms]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>224.0</y>
                    <width>96</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f416b520aec011ea96110050b686ec77</id>
                <name><![CDATA[PCC Vc]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------
global V_ref
global Va_scale
# mandatory variable used for storing value
# that will be displayed
displayValue = V_ref*Va_scale

]]></code>
                <signal_name><![CDATA[Grid.out.Vc_rms]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>272.0</y>
                    <width>96</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f416b521aec011ea88e90050b686ec77</id>
                <name><![CDATA[PCC Ib]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------
global V_ref
global Va_scale
# mandatory variable used for storing value
# that will be displayed
displayValue = V_ref*Va_scale

]]></code>
                <signal_name><![CDATA[Grid.out.Ib_rms]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>384.0</y>
                    <width>96</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f416b522aec011eabc390050b686ec77</id>
                <name><![CDATA[PCC Ia]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------
global V_ref
global Va_scale
# mandatory variable used for storing value
# that will be displayed
displayValue = V_ref*Va_scale

]]></code>
                <signal_name><![CDATA[Grid.out.Ia_rms]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>336.0</y>
                    <width>96</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f416b523aec011eaa00e0050b686ec77</id>
                <name><![CDATA[PCC Ic]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------
global V_ref
global Va_scale
# mandatory variable used for storing value
# that will be displayed
displayValue = V_ref*Va_scale

]]></code>
                <signal_name><![CDATA[Grid.out.Ic_rms]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>432.0</y>
                    <width>96</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f416b524aec011eaa8840050b686ec77</id>
                <name><![CDATA[PCC frequency]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------
global V_ref
global Va_scale
# mandatory variable used for storing value
# that will be displayed
displayValue = V_ref*Va_scale

]]></code>
                <signal_name><![CDATA[Grid.out.f]]></signal_name>
                <unit><![CDATA[Hz]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>72.0</y>
                    <width>96</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f416dc00aec011ea837d0050b686ec77</id>
                <name><![CDATA[Frequency [Hz]]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <analog_signals><![CDATA[['Grid.out.f']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>104.0</x>
                    <y>0.0</y>
                    <width>304</width>
                    <height>184</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>50.0</y_range_min>
                    <y_range_max>70.0</y_range_max>
                    <time_window>60</time_window>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f416dc01aec011ea81cc0050b686ec77</id>
                <name><![CDATA[PCC P]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name = "Grid.out.P")
displayValue = P/1e3

]]></code>
                <signal_name><![CDATA[PCC_Measurements.P]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>488.0</y>
                    <width>96</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f416dc02aec011ea94b60050b686ec77</id>
                <name><![CDATA[PCC Q]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
Q = hil.read_analog_signal(name = "Grid.out.Q")
displayValue = Q/1e3

]]></code>
                <signal_name><![CDATA[PCC_Measurements.P]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>536.0</y>
                    <width>96</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f416dc03aec011eab8710050b686ec77</id>
                <name><![CDATA[PCC S]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
S = hil.read_analog_signal(name = "Grid.out.S")
displayValue = S/1e3

]]></code>
                <signal_name><![CDATA[PCC_Measurements.P]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>584.0</y>
                    <width>96</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f416dc04aec011eaa80a0050b686ec77</id>
                <name><![CDATA[PCC Power]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ [sigVal1,sigVal2,sigVal3], ["Signal 1 name","Signal 2 name","Signal 3 name"] ]
P = hil.read_analog_signal(name = "Grid.out.P")
Q = hil.read_analog_signal(name = "Grid.out.Q")

displayValue = [[P,Q],["P","Q"]]

]]></code>
                <analog_signals><![CDATA[['P', 'Q']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>96.0</x>
                    <y>472.0</y>
                    <width>320</width>
                    <height>184</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>272.0</y_range_min>
                    <y_range_max>283.0</y_range_max>
                    <time_window>60</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f416dc05aec011ea98dd0050b686ec77</id>
                <name><![CDATA[PCC pf]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name = "Grid.out.pf")

]]></code>
                <signal_name><![CDATA[PCC_Measurements.P]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>5</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>632.0</y>
                    <width>96</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>512587e6aec111ea891a0050b686ec77</id>
                <name><![CDATA[PV]]></name>
                <type>BarGraphDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
PkW = hil.read_analog_signal(name='Grid.out.P')/1e3
Vrms = hil.read_analog_signal(name='Grid.out.Va_rms')*np.sqrt(3.0)


# specify one bar data ('bar_name', 'value', 'minimum_value' and 'maximum_value' parts are mandatory)
PkW_barData = {
    # display name
    "bar_name": "P",
    # value to display
    "value": PkW,
    # value unit
    "unit": "kW",
    # minimum value
    "minimum_value": 0.0,
    # maximum value
    "maximum_value": 1000.0,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    }
Vrms_barData = {
    # display name
    "bar_name": "Vrms",
    # value to display
    "value": Vrms,
    # value unit
    "unit": "Vrms L-L",
    # minimum value
    "minimum_value": 0.0,
    # maximum value
    "maximum_value": 500.0,
    # show warning and critical values
    "use_warning_critical": False,
    # warning value
    "warning_value": 70.0,
    # critical value
    "critical_value": 90.0,
    }

# list of bars data: [barData1, barData2,...barData10]
displayValue = [PkW_barData, Vrms_barData]
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <bars_data>
                    </bars_data>
                <widget_settings>
                    <x>984.0</x>
                    <y>448.0</y>
                    <width>176</width>
                    <height>70</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>1991c5d8aecc11ea924b0050b686ec77</id>
                <name><![CDATA[Inject fault]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
hil.set_contactor('Grid.Grid Fault1.enable', swControl=True, swState=True)
hil.wait_msec(100)
hil.set_contactor('Grid.Grid Fault1.enable', swControl=True, swState=False)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

hil.set_contactor('Grid.Grid Fault1.enable', swControl=True, swState=False)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>1240.0</x>
                    <y>544.0</y>
                    <width>136</width>
                    <height>32</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>5d0254d8aecc11ea9c4a0050b686ec77</id>
                <name><![CDATA[Reset Relay]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
hil.set_scada_input_value('Grid.Protection.Reset Relay', 0.0)
hil.wait_msec(100)
hil.set_scada_input_value('Grid.Protection.Reset Relay', 1.0)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

hil.set_scada_input_value('Grid.Protection.Reset Relay', 1.0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>1240</x>
                    <y>576</y>
                    <width>136</width>
                    <height>32</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>91f47874b03f11eabbe50028f8dc6aad</id>
                <name><![CDATA[Load PV]]></name>
                <type>Macro</type>
                <description><![CDATA[]]></description>
                <on_click_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.
# HIL API is imported as 'hil'

]]></on_click_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

hil.set_pv_input_file('Grid.Photovoltaic Panel 1', file=r'C:\00 Typhoon SVN\t_misc\00 Project management\90 Demos\260 ITEC2020 Conference\00 Models\pv_730kW.ipvx', illumination=1000.0, temperature=25.0)
]]></on_start_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.
# HIL API is imported as 'hil'

]]></on_timer_code>
                <run_each>250</run_each>
                <on_stop_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <hierarchy_position>4</hierarchy_position>
                <widget_settings>
                    <x>192</x>
                    <y>488</y>
                    <width>128</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>4825f86cb04a11ea8cf50028f8dc6aad</id>
                <name><![CDATA[Set Grid]]></name>
                <type>Macro</type>
                <description><![CDATA[]]></description>
                <on_click_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.
# HIL API is imported as 'hil'

]]></on_click_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

hil.set_source_sine_waveform('Grid.Vgrid', rms=7620.0, frequency=60.0, phase=0.0, harmonics_pu=())
]]></on_start_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.
# HIL API is imported as 'hil'

]]></on_timer_code>
                <run_each>250</run_each>
                <on_stop_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>400</x>
                    <y>536</y>
                    <width>128</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        </components>
</ui_settings>