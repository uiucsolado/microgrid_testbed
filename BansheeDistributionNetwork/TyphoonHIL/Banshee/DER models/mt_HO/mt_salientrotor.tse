version = 4.2

//
// Saved by sw version: 2020.1 SP2
<<<<<<< Updated upstream
// Save timestamp: 11-Aug-2020 @ 02:53:28 PM
=======
// Save timestamp: 12-Aug-2020 @ 11:44:47 PM
>>>>>>> Stashed changes
//

model "mt_salientrotor" {
    configuration {
        hil_device = "HIL603"
        hil_configuration_id = 1
        simulation_method = exact
        simulation_time_step = 4e-6
        simulation_discret_scaling = 1.0
        dsp_timer_periods = 100e-6, 50e-3
        ss_calc_method = "systematic elimination"
        enb_pole_shift = True
        enb_gds_oversampling = True
        show_modes = False
        device_ao_limit_enable = True
        cpl_stb = False
        enb_dep_sw_detect = False
        code_section = "external memory"
        data_section = "internal memory"
        sys_sp_rate_1 = 0.0001
        sys_sp_rate_2 = 0.05
        sys_real_type_precision = "default"
        user_real_type_precision = "double precision"
        sys_cpu_optimization = "high"
        user_cpu_optimization = "medium"
    }

    component Subsystem Root {
        component "core/Signal Controlled Voltage Source" Va_G {
        }
        [
            position = 7816, 8064
            rotation = right
            size = 64, 32
        ]

        component "core/Signal Controlled Voltage Source" Vb_G {
        }
        [
            position = 7712, 8112
            rotation = right
            size = 64, 32
        ]

        component "core/Signal Controlled Voltage Source" Vc_G {
        }
        [
            position = 7608, 8160
            rotation = right
            size = 64, 32
        ]

        component "core/RL Section" RL {
            inductance_per_l_mile = "1.6e-3"
            length_mile = "2"
            resistance_per_l_mile = "0.57"
        }
        [
            position = 7400, 7976
            size = 256, 56
        ]

        component "core/Constant Impedance Load" "Constant Impedance Load1" {
            SAB = "1000.0/3"
            SAn = "1000.0/3"
            SBC = "1000.0/3"
            SBn = "1000.0/3"
            SCA = "1000.0/3"
            SCn = "1000.0/3"
            Sn_3ph = "1.0e3"
            VAB = "V_G"
            VAn = "V_G/(3**0.5)"
            VBC = "V_G"
            VBn = "V_G/(3**0.5)"
            VCA = "V_G"
            VCn = "V_G/(3**0.5)"
            Vn_3ph = "V_G"
            enable_neutral = "True"
            pfA = "0.85"
            pfB = "0.85"
            pfC = "0.85"
            pf_3ph = "0.85"
        }
        [
            position = 6832, 8176
            hide_name = True
            size = 104, 152
        ]

        component src_sine "Sinusoidal Source1" {
            execution_rate = "Ts"
            frequency = "60"
        }
        [
            position = 7344, 8064
            hide_name = True
        ]

        component src_sine "Sinusoidal Source2" {
            execution_rate = "Ts"
            frequency = "60"
            phase = "-120"
        }
        [
            position = 7344, 8112
            hide_name = True
        ]

        component src_sine "Sinusoidal Source3" {
            execution_rate = "Ts"
            frequency = "60"
            phase = "120"
        }
        [
            position = 7344, 8160
            hide_name = True
        ]

        component gen_gain Gain3 {
            gain = "V_G*np.sqrt(2)/np.sqrt(3)"
        }
        [
            position = 7432, 8064
            hide_name = True
        ]

        component gen_gain Gain4 {
            gain = "V_G*np.sqrt(2)/np.sqrt(3)"
        }
        [
            position = 7432, 8160
            hide_name = True
        ]

        component gen_gain Gain5 {
            gain = "V_G*np.sqrt(2)/np.sqrt(3)"
        }
        [
            position = 7432, 8112
            hide_name = True
        ]

        component src_ground gnd1 {
        }
        [
            position = 7816, 8352
        ]

        component "core/Current Measurement" Ia1 {
        }
        [
            position = 6800, 8048
            rotation = right
            size = 64, 32
        ]

        component "core/Voltage Measurement" Va1 {
        }
        [
            position = 7920, 8136
            rotation = right
            size = 64, 32
        ]

        component gen_terminator Termination1 {
        }
        [
            position = 6496, 8216
        ]

        component gen_logic_op "Logical operator1" {
            operator = "NOT"
        }
        [
            position = 6976, 7832
            rotation = right
            hide_name = True
        ]

        component gen_digital_probe "grid_connect OFF" {
        }
        [
            position = 7008, 7880
        ]

        component gen_digital_probe "grid_connect ON" {
        }
        [
            position = 7008, 7768
            rotation = down
            scale = -1, 1
        ]

        component src_scada_input grid_connect {
            execution_rate = "Ts"
            format = "int"
            max = "1"
            min = "0"
            signal_type = "int"
            unit = ""
        }
        [
            position = 6912, 7792
        ]

        component "core/Triple Pole Single Throw Contactor" S4 {
            ctrl_src = "Model"
        }
        [
            position = 7168, 7976
            hide_name = True
            size = 64, 256
        ]

        component Subsystem Microturbine {
            layout = dynamic
            component src_constant Constant1 {
                execution_rate = "Ts_sys"
            }
            [
                position = 6440, 8264
                hide_name = True
            ]

            component sys_signal_switch "Signal switch1" {
                criterion = "ctrl != threshold"
                threshold = "1"
            }
            [
                position = 6496, 8016
                hide_name = True
                scale = 1, -1
            ]

            component src_constant Constant2 {
                execution_rate = "Ts_sys"
            }
            [
                position = 6416, 8032
                hide_name = True
            ]

            component sys_signal_switch "Signal switch2" {
                criterion = "ctrl != threshold"
                threshold = "1"
            }
            [
                position = 6520, 8248
                hide_name = True
                scale = 1, -1
            ]

            component "core/Voltage Measurement" Va_G1 {
                execution_rate = "Ts_sys"
                sig_output = "True"
            }
            [
                position = 8440, 8232
                rotation = right
                scale = -1, 1
                size = 64, 32
            ]

            component "core/Voltage Measurement" Vb_G1 {
                execution_rate = "Ts_sys"
                sig_output = "True"
            }
            [
                position = 8376, 8328
                rotation = right
                scale = -1, 1
                size = 64, 32
            ]

            component "core/Voltage Measurement" Vc_G1 {
                execution_rate = "Ts_sys"
                sig_output = "True"
            }
            [
                position = 8312, 8440
                rotation = right
                scale = -1, 1
                size = 64, 32
            ]

            component src_scada_input "Connect MT" {
                def_value = "1"
                execution_rate = "Ts_sys"
                max = "1"
                min = "0"
                unit = ""
            }
            [
                position = 7848, 8072
            ]

            component src_scada_input "Connect MCB" {
                def_value = "1"
                execution_rate = "Ts_sys"
                max = "1"
                min = "0"
                unit = ""
            }
            [
                position = 7848, 8136
            ]

            component Subsystem CB_control {
                layout = dynamic
                component gen_logic_op "Logical operator1" {
                }
                [
                    position = 8176, 8256
                    hide_name = True
                ]

                component gen_logic_op "Logical operator2" {
                }
                [
                    position = 8088, 8232
                    hide_name = True
                ]

                component gen_logic_op "Logical operator3" {
                    operator = "NOT"
                }
                [
                    position = 8424, 8304
                    rotation = right
                    hide_name = True
                ]

                component gen_digital_probe "GCB OFF" {
                }
                [
                    position = 8464, 8352
                ]

                component gen_digital_probe "GCB ON" {
                }
                [
                    position = 8464, 8200
                    rotation = down
                    scale = -1, 1
                ]

                component gen_logic_op "Logical operator4" {
                    operator = "NOT"
                }
                [
                    position = 8088, 8384
                    rotation = right
                    hide_name = True
                ]

                component gen_digital_probe "MCB OFF" {
                }
                [
                    position = 8176, 8424
                ]

                component gen_digital_probe "MCB ON" {
                }
                [
                    position = 8176, 8320
                    rotation = down
                    scale = -1, 1
                ]

                component gen_logic_op "Logical operator5" {
                    operator = "NOT"
                }
                [
                    position = 7632, 8496
                    rotation = right
                    hide_name = True
                ]

                component gen_digital_probe "Grid_Islanded OFF" {
                }
                [
                    position = 7680, 8528
                ]

                component gen_digital_probe "Grid_Islanded ON" {
                }
                [
                    position = 7680, 8408
                    rotation = down
                    scale = -1, 1
                ]

                component src_scada_input Grid_Islanded {
                    def_value = "1"
                    execution_rate = "Ts_sys"
                    format = "int"
                    max = "1"
                    min = "0"
                    signal_type = "int"
                    unit = ""
                }
                [
                    position = 7352, 8432
                ]

                component gen_logic_op "Logical operator6" {
                    operator = "OR"
                }
                [
                    position = 8304, 8688
                    hide_name = True
                ]

                component gen_digital_probe "MT_sync OFF" {
                }
                [
                    position = 7600, 8672
                ]

                component gen_digital_probe "MT_sync ON" {
                }
                [
                    position = 7528, 8600
                    rotation = down
                    scale = -1, -1
                ]

                component gen_logic_op "Logical operator7" {
                }
                [
                    position = 7560, 8440
                    hide_name = True
                ]

                component gen_logic_op "Logical operator8" {
                    inputs = "3"
                }
                [
                    position = 8224, 8696
                    hide_name = True
                ]

                component src_constant Constant10 {
                    execution_rate = "Ts_sys"
                    value = "5e-2"
                }
                [
                    position = 8088, 8712
                    hide_name = True
                ]

                component gen_abs Abs6 {
                }
                [
                    position = 8088, 8680
                    hide_name = True
                ]

                component gen_rel_op "Relational operator5" {
                    relational_op = "<"
                }
                [
                    position = 8152, 8696
                    hide_name = True
                ]

                component gen_sum Sum9 {
                    signs = "-+"
                }
                [
                    position = 8016, 8688
                    hide_name = True
                    scale = 1, -1
                ]

                component src_constant Constant1 {
                    execution_rate = "Ts_sys"
                }
                [
                    position = 7944, 8664
                    hide_name = True
                ]

                component src_constant Constant11 {
                    execution_rate = "Ts_sys"
                    value = "1e-3"
                }
                [
                    position = 8088, 8616
                    hide_name = True
                ]

                component gen_abs Abs7 {
                }
                [
                    position = 8088, 8648
                    hide_name = True
                ]

                component gen_rel_op "Relational operator6" {
                    relational_op = ">"
                }
                [
                    position = 8152, 8632
                    hide_name = True
                ]

                component gen_sum Sum10 {
                    signs = "-+"
                }
                [
                    position = 8016, 8640
                    hide_name = True
                    scale = 1, -1
                ]

                component gen_gain Gain13 {
                    gain = "1/w_0"
                }
                [
                    position = 7944, 8616
                    hide_name = True
                ]

                component gen_logic_op "Logical operator9" {
                    operator = "NOT"
                }
                [
                    position = 7408, 8496
                    rotation = right
                    hide_name = True
                ]

                component gen_logic_op "Logical operator10" {
                    operator = "NOT"
                }
                [
                    position = 7520, 8496
                    rotation = right
                    hide_name = True
                ]

                component gen_logic_op "Logical operator11" {
                }
                [
                    position = 7464, 8568
                    rotation = right
                    hide_name = True
                ]

                component gen_logic_op "Logical operator12" {
                    operator = "NOT"
                }
                [
                    position = 7528, 8672
                    hide_name = True
                ]

                component gen_c_function "stay connected1" {
                    global_variables = "int var;"
                    in_terminal_dimensions = "inherit;inherit"
                    in_terminal_dimensions_str = "connect inherit;disconnect inherit"
                    in_terminal_labels = "[(\'connect\', True), (\'disconnect\', True)]"
                    in_terminal_properties = "inherit connect;inherit disconnect;"
                    init_fnc = "/*Begin code section*/
var = 0;
/*End code section*/"
                    no_feed_inputs = "[\'\']"
                    no_feed_outputs = "[\'\']"
                    out_terminal_dimensions = "inherit"
                    out_terminal_dimensions_str = "action inherit"
                    out_terminal_labels = "[(\'action\', True)]"
                    out_terminal_properties = "int action;"
                    output_fnc = "/*Begin code section*/
action = var;
/*End code section*/"
                    update_fnc = "/*Begin code section*/
if (connect==1)
{
    var = 1;
}
if(disconnect==0)
{
    var = 0;
}
/*End code section*/"
                }
                [
                    position = 8328, 8240
                    hide_name = True
                    scale = 1, -1
                    size = 112, 72
                ]

                component gen_c_function "Hold after connect2" {
                    global_variables = "real var;"
                    in_terminal_dimensions = "inherit;inherit"
                    in_terminal_dimensions_str = "in1 inherit;in2 inherit"
                    in_terminal_labels = "[(\'in1\', True), (\'in2\', True)]"
                    in_terminal_properties = "real in1;real in2;"
                    init_fnc = "/*Begin code section*/
var = 1;
/*End code section*/"
                    no_feed_inputs = "[\'\']"
                    no_feed_outputs = "[\'\']"
                    out_terminal_dimensions = "inherit"
                    out_terminal_dimensions_str = "out inherit"
                    out_terminal_labels = "[(\'out\', True)]"
                    out_terminal_properties = "int out;"
                    output_fnc = "/*Begin code section*/
out = var;
/*End code section*/"
                    update_fnc = "/*Begin code section*/
if ((in1<1.05)&&(in1>0.95)&&(in2<1.005)&&(in2>0.995))
    var = 0;
else
    var = 1;
/*End code section*/"
                }
                [
                    position = 7464, 8368
                    hide_name = True
                    size = 80, 56
                ]

                port CB_status {
                    label = "CB_status"
                    position = top:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8552, 8240
                ]

                port Close_GCB {
                    label = "Close_GCB"
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7880, 8152
                ]

                port Close_MCB {
                    label = "Close_MCB"
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7888, 8296
                ]

                port MCB_control {
                    label = "MCB_control"
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8176, 8352
                ]

                tag Connect5 {
                    value = "synced"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8224, 8648
                    hide_name = True
                ]

                tag Connect6 {
                    value = "Connect MT"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 8184, 8216
                    hide_name = True
                ]

                tag Connect1 {
                    value = "Connected"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 8560, 8296
                    hide_name = True
                ]

                tag Connect7 {
                    value = "Grid_Islanded"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 7680, 8440
                    hide_name = True
                    size = 75, 20
                ]

                tag Connect8 {
                    value = "Grid_Islanded"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8120, 8744
                    hide_name = True
                    size = 94, 20
                ]

                tag Connect9 {
                    value = "Connect"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 8392, 8688
                    hide_name = True
                    size = 75, 20
                ]

                tag Connect10 {
                    value = "Connect"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8088, 8280
                    hide_name = True
                ]

                tag Connect11 {
                    value = "MT_sync"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 7528, 8632
                    hide_name = True
                    size = 58, 20
                ]

                tag "|V|2" {
                    value = "|E|"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7928, 8712
                    hide_name = True
                    size = 29, 20
                ]

                tag w_e8 {
                    value = "w_e"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7864, 8664
                    hide_name = True
                ]

                tag From1 {
                    value = "|V| bus"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7352, 8352
                    hide_name = True
                ]

                tag w_bus3 {
                    value = "w_bus"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7352, 8384
                    hide_name = True
                ]

                junction Junction3 sp
                [
                    position = 8136, 8232
                ]

                junction Junction5 sp
                [
                    position = 8016, 8296
                ]

                junction Junction8 sp
                [
                    position = 8088, 8352
                ]

                junction Junction9 sp
                [
                    position = 8088, 8352
                ]

                junction Junction108 sp
                [
                    position = 7632, 8440
                ]

                junction Junction109 sp
                [
                    position = 7632, 8440
                ]

                junction Junction81 sp
                [
                    position = 7976, 8664
                ]

                junction Junction113 sp
                [
                    position = 7464, 8600
                ]

                junction Junction115 sp
                [
                    position = 7464, 8632
                ]

                junction Junction116 sp
                [
                    position = 8424, 8240
                ]

                junction Junction117 sp
                [
                    position = 8424, 8240
                ]

                junction Junction120 sp
                [
                    position = 8016, 8152
                ]

                junction Junction121 sp
                [
                    position = 7408, 8432
                ]

                junction Junction122 sp
                [
                    position = 7520, 8448
                ]

                junction Junction123 sp
                [
                    position = 8480, 8240
                ]

                connect "Logical operator2.out" Junction3 as Connection29
                connect Junction3 "Logical operator1.in" as Connection30
                connect Connect6 Junction3 as Connection31
                connect Close_MCB Junction5 as Connection37
                connect Junction5 "Logical operator2.in1" as Connection38
                [
                    breakpoints = 8016, 8296; 8016, 8240
                ]
                connect "GCB OFF.in" "Logical operator3.out" as Connection155
                connect "MCB OFF.in" "Logical operator4.out" as Connection162
                connect Junction8 Junction5 as Connection164
                connect "MCB ON.in" Junction8 as Connection165
                connect MCB_control Junction9 as Connection166
                connect Junction9 Junction8 as Connection167
                connect "Logical operator4.in" Junction9 as Connection168
                connect Connect5 "Logical operator6.in" as Connection959
                connect "Logical operator6.out" Connect9 as Connection961
                connect Connect10 "Logical operator1.in1" as Connection962
                connect "Logical operator7.out" Junction108 as Connection980
                connect Junction108 Connect7 as Connection981
                connect "Logical operator5.in" Junction109 as Connection983
                connect Junction109 Junction108 as Connection984
                connect Abs6.out "Relational operator5.in" as Connection628
                connect Constant10.out "Relational operator5.in1" as Connection631
                connect Abs6.in Sum9.out as Connection632
                [
                    breakpoints = 8056, 8688
                ]
                connect "|V|2" Sum9.in as Connection634
                connect "Relational operator5.out" "Logical operator8.in1" as Connection635
                connect Constant11.out "Relational operator6.in" as Connection636
                connect "Relational operator6.in1" Abs7.out as Connection637
                connect "Relational operator6.out" "Logical operator8.in" as Connection638
                connect Sum10.out Abs7.in as Connection639
                connect w_e8 Gain13.in as Connection640
                connect Gain13.out Sum10.in1 as Connection641
                connect Constant1.out Junction81 as Connection642
                connect "Logical operator11.in1" "Logical operator9.out" as Connection998
                connect Junction81 Sum9.in1 as Connection643
                connect "Logical operator11.in" "Logical operator10.out" as Connection999
                connect Sum10.in Junction81 as Connection644
                connect Connect8 "Logical operator8.in2" as Connection990
                connect "Logical operator8.out" "Logical operator6.in1" as Connection991
                connect "Grid_Islanded ON.in" Junction109 as Connection1003
                [
                    breakpoints = 7632, 8408
                ]
                connect Junction113 "Logical operator11.out" as Connection1005
                connect "MT_sync ON.in" Junction113 as Connection1006
                connect "Grid_Islanded OFF.in" "Logical operator5.out" as Connection1011
                connect Connect11 Junction115 as Connection1012
                connect Junction115 Junction113 as Connection1013
                connect "Logical operator12.in" Junction115 as Connection1014
                connect "Logical operator12.out" "MT_sync OFF.in" as Connection1015
                connect "stay connected1.action" Junction116 as Connection1018
                connect Junction116 "Logical operator3.in" as Connection1019
                connect Junction117 Junction116 as Connection1022
                connect "GCB ON.in" Junction117 as Connection1023
                connect "stay connected1.connect" "Logical operator1.out" as Connection1032
                connect "stay connected1.disconnect" Junction120 as Connection1040
                [
                    breakpoints = 8256, 8152; 8128, 8152
                ]
                connect Junction120 Close_GCB as Connection1041
                [
                    breakpoints = 8016, 8152
                ]
                connect "Logical operator2.in" Junction120 as Connection1042
                connect "Logical operator7.in" Junction121 as Connection1187
                connect Junction121 Grid_Islanded.out as Connection1188
                connect "Logical operator9.in" Junction121 as Connection1189
                connect "Hold after connect2.out" Junction122 as Connection1196
                connect Junction122 "Logical operator7.in1" as Connection1197
                connect "Logical operator10.in" Junction122 as Connection1198
                connect From1 "Hold after connect2.in1" as Connection1199
                connect w_bus3 "Hold after connect2.in2" as Connection1200
                connect Junction117 Junction123 as Connection1204
                [
                    breakpoints = 8424, 8240
                ]
                connect Junction123 CB_status as Connection1205
                [
                    breakpoints = 8480, 8240
                ]
                connect Connect1 Junction123 as Connection1206
            }
            [
                position = 8024, 8104
                size = 176, 96
            ]

            component "core/Triple Pole Single Throw Contactor" S4 {
                ctrl_src = "Model"
            }
            [
                position = 8224, 8280
                hide_name = True
                size = 64, 256
            ]

            component "core/Voltage Measurement" Ea1 {
                execution_rate = "Ts_sys"
                sig_output = "True"
            }
            [
                position = 7368, 8424
                rotation = right
                size = 64, 32
            ]

            component "core/Voltage Measurement" Eb1 {
                execution_rate = "Ts_sys"
                sig_output = "True"
            }
            [
                position = 7616, 8432
                rotation = right
                size = 64, 32
            ]

            component "core/Voltage Measurement" Ec1 {
                execution_rate = "Ts_sys"
                sig_output = "True"
            }
            [
                position = 7848, 8432
                rotation = right
                size = 64, 32
            ]

            component gen_probe "|V|" {
            }
            [
                position = 6744, 8408
            ]

            component gen_gain Gain1 {
                gain = "pms*(2*np.pi)/60"
            }
            [
                position = 7120, 8072
                hide_name = True
                scale = -1, 1
            ]

            component gen_probe w_M {
            }
            [
                position = 7216, 8072
            ]

            component gen_gain Gain18 {
                gain = "1/pms"
            }
            [
                position = 6624, 8096
                hide_name = True
            ]

            component Subsystem Engine {
                layout = dynamic
                component gen_integrator Integrator1 {
                }
                [
                    position = 8272, 8192
                    hide_name = True
                ]

                component gen_sum Sum1 {
                    signs = "-+"
                }
                [
                    position = 8112, 8192
                    hide_name = True
                ]

                component gen_gain Gain1 {
                    gain = "1/T_CH"
                }
                [
                    position = 8192, 8192
                    hide_name = True
                ]

                component gen_gain Gain2 {
                    gain = "TM_DQ"
                }
                [
                    position = 8352, 8192
                    hide_name = True
                ]

                port T_M2 {
                    label = "T_M"
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8416, 8192
                ]

                port P_SV {
                    label = "P_SV"
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8016, 8216
                ]

                tag T_M {
                    value = "T_M"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 8368, 8264
                ]

                tag T_M1 {
                    value = "T_M"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8016, 8152
                    hide_name = True
                ]

                junction Junction1 sp
                [
                    position = 8312, 8192
                ]

                connect Gain1.out Integrator1.in as Connection2
                connect Integrator1.out Junction1 as Connection6
                connect Sum1.out Gain1.in as Connection1
                connect Sum1.in1 P_SV as Connection5
                connect T_M Junction1 as Connection8
                connect T_M1 Sum1.in as Connection3
                connect Junction1 Gain2.in as Connection9
                connect Gain2.out T_M2 as Connection10
            }
            [
                position = 6912, 8048
                size = 80, 56
            ]

            component sys_signal_switch w {
                criterion = "ctrl > threshold"
                threshold = "0.5"
            }
            [
                position = 6624, 8000
                hide_name = True
            ]

            component src_scada_input wref {
                def_value = "1"
                execution_rate = "Ts"
                max = "1.3"
                min = "0.7"
                unit = "pu"
            }
            [
                position = 6560, 7976
            ]

            component "core/Signal Controlled Voltage Source" V_F {
            }
            [
                position = 6912, 8280
                rotation = right
                scale = -1, 1
                size = 64, 32
            ]

            component Subsystem Exciter {
                layout = dynamic
<<<<<<< Updated upstream
                component gen_integrator Integrator2 {
                    show_reset = "either"
                }
                [
                    position = 8368, 8104
                    hide_name = True
                ]

                component gen_gain Gain4 {
                    gain = "1/T_F"
=======
                component gen_sum Sum10 {
                    signs = "++"
>>>>>>> Stashed changes
                }
                [
                    position = 8296, 8096
                    hide_name = True
                ]

<<<<<<< Updated upstream
                component gen_gain Gain8 {
                    gain = "K_A"
                }
                [
                    position = 8136, 8336
                    hide_name = True
                ]

                component gen_gain Gain2 {
                    gain = "K_E+S_E"
                }
                [
                    position = 8136, 7904
                    hide_name = True
                ]

                component gen_gain Gain7 {
                    gain = "K_A"
=======
                component gen_gain Gain28 {
                    gain = "pms/w_0"
>>>>>>> Stashed changes
                }
                [
                    position = 8136, 8232
                    hide_name = True
                ]

<<<<<<< Updated upstream
                component gen_sum Sum3 {
                    signs = "-+-+"
=======
                component Subsystem "Exciter Activation" {
                    layout = dynamic
                    component gen_abs Abs1 {
                    }
                    [
                        position = 8192, 8208
                        hide_name = True
                    ]

                    component gen_comparator Comparator1 {
                    }
                    [
                        position = 8264, 8232
                        hide_name = True
                        scale = 1, -1
                    ]

                    component src_constant Constant1 {
                        execution_rate = "Ts_sys"
                        value = "4*maxw_slip"
                    }
                    [
                        position = 8192, 8256
                        hide_name = True
                    ]

                    component gen_probe "speed difference" {
                    }
                    [
                        position = 8096, 8144
                    ]

                    component gen_c_function "Activate Exciter" {
                        in_terminal_dimensions = "inherit"
                        in_terminal_dimensions_str = "boolean inherit"
                        in_terminal_labels = "[(\'boolean\', True)]"
                        in_terminal_properties = "inherit boolean;"
                        init_fnc = "/*Begin code section*/
Activate = 0;
/*End code section*/"
                        no_feed_inputs = "[\'\']"
                        no_feed_outputs = "[\'\']"
                        out_terminal_dimensions = "inherit"
                        out_terminal_dimensions_str = "Activate inherit"
                        out_terminal_labels = "[(\'Activate\', True)]"
                        out_terminal_properties = "int Activate;"
                        output_fnc = "/*Begin code section*/
if(boolean==1){
    Activate = 1;
}
/*End code section*/"
                    }
                    [
                        position = 8360, 8232
                        size = 112, 48
                    ]

                    component gen_sum Sum1 {
                        signs = "+-"
                    }
                    [
                        position = 8008, 8144
                        hide_name = True
                    ]

                    component src_constant Constant2 {
                        execution_rate = "Ts_sys"
                    }
                    [
                        position = 7936, 8120
                        hide_name = True
                    ]

                    port w_PU {
                        label = "w_PU"
                        position = left:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7936, 8168
                    ]

                    port "exciter state" {
                        position = auto:auto
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8480, 8232
                    ]

                    junction Junction14 sp
                    [
                        position = 8048, 8144
                    ]

                    connect Abs1.out Comparator1.in2 as Connection105
                    connect Constant1.out Comparator1.in1 as Connection18
                    connect w_PU Sum1.in1 as Connection199
                    connect "speed difference.in" Junction14 as Connection195
                    connect Junction14 Sum1.out as Connection196
                    connect Abs1.in Junction14 as Connection197
                    connect Constant2.out Sum1.in as Connection201
                    connect Comparator1.out "Activate Exciter.boolean" as Connection206
                    connect "Activate Exciter.Activate" "exciter state" as Connection207
>>>>>>> Stashed changes
                }
                [
                    position = 8240, 8264
                    hide_name = True
                ]

                component gen_gain Gain5 {
                    gain = "K_A*K_F/T_F"
                }
                [
                    position = 8136, 8296
                    hide_name = True
                ]

                component gen_gain Gain6 {
                    gain = "1/T_A"
                }
                [
                    position = 8296, 8264
                    hide_name = True
                ]

                component gen_gain Gain3 {
                    gain = "K_F/T_F"
                }
                [
                    position = 8136, 8128
                    hide_name = True
                ]

<<<<<<< Updated upstream
                component gen_gain Gain1 {
                    gain = "1/T_E"
                }
                [
                    position = 8296, 7936
                    hide_name = True
                ]

                component gen_sum Sum1 {
                    signs = "-+"
                }
                [
                    position = 8240, 7936
                    hide_name = True
                ]

                component gen_sum Sum2 {
                    signs = "-+"
                }
                [
                    position = 8240, 8096
                    hide_name = True
                ]

                component gen_integrator Integrator1 {
                    limit_lower = "-2"
                    limit_upper = "2"
                    show_reset = "either"
                }
                [
                    position = 8368, 7944
                    hide_name = True
                ]

                component gen_integrator Integrator3 {
                    limit_lower = "V_R_min"
                    limit_output = "True"
                    limit_upper = "V_R_max"
                    show_reset = "either"
                }
                [
                    position = 8368, 8272
                    hide_name = True
                ]

                component sys_signal_switch "|V|1" {
                    criterion = "ctrl != threshold"
                    threshold = "1"
                }
                [
                    position = 7976, 8360
                    hide_name = True
                ]

                component src_constant Constant1 {
                    execution_rate = "Ts"
                    value = "0"
                }
                [
                    position = 7872, 8344
                    hide_name = True
                ]

                component gen_probe V_R_M {
                }
                [
                    position = 8560, 8216
                ]

                component gen_rate_limiter "Rate Limit" {
                    falling_limit = "V_fall"
                    rising_limit = "V_rise"
                }
                [
                    position = 8024, 8360
                    hide_name = True
                ]

                component gen_probe E_t_M {
                }
                [
                    position = 8560, 8432
                ]

                component gen_integrator Integrator4 {
                    show_reset = "either"
                }
                [
                    position = 8368, 8496
                    hide_name = True
                ]

                component gen_sum Sum5 {
                    signs = "-+"
                }
                [
                    position = 8216, 8488
                    hide_name = True
                ]

                component gen_gain Gain9 {
                    gain = "1/(T_R)"
                }
                [
                    position = 8288, 8488
                    hide_name = True
                ]

                component gen_probe R_F_M {
                }
                [
                    position = 8560, 8048
                ]

                component gen_digital_probe "exciter ON" {
                }
                [
                    position = 7872, 8216
                ]

                component gen_logic_op "Logical operator1" {
                    operator = "NOT"
                }
                [
                    position = 7784, 8176
                    rotation = right
                    hide_name = True
                    scale = 1, -1
                ]

                component gen_digital_probe "exciter OFF" {
                }
                [
                    position = 7872, 8136
                ]

                component Subsystem PI {
                    layout = dynamic
                    component gen_integrator Integrator1 {
                        limit_lower = "[\'-inf\']"
                        limit_upper = "[\'inf\']"
                        show_reset = "either"
                    }
                    [
                        position = 8216, 8232
                        hide_name = True
                    ]

                    component gen_gain Kp {
                        gain = "exc_Kp"
                    }
                    [
                        position = 7992, 8152
                    ]

                    component gen_sum Sum7 {
                    }
                    [
                        position = 8088, 8224
                        hide_name = True
                    ]

                    component gen_gain Kb {
                    }
                    [
                        position = 8216, 8312
                        scale = -1, 1
                    ]

                    component gen_sum Sum6 {
                        signs = "-+"
                    }
                    [
                        position = 8320, 8312
                        hide_name = True
                        scale = -1, 1
                    ]

                    component gen_gain Ki {
                        gain = "exc_Ki"
                    }
                    [
                        position = 7992, 8216
                    ]

                    component gen_sum Sum5 {
                    }
                    [
                        position = 8320, 8224
                        hide_name = True
                    ]

                    component gen_limiter Limit1 {
                        lower_limit = "E_F_min"
                        upper_limit = "E_F_max"
                    }
                    [
                        position = 8408, 8224
                        hide_name = True
                    ]

                    port Out {
                        label = "Out"
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8472, 8224
                    ]

                    port Reset {
                        label = "Reset"
                        position = top:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8144, 8264
                    ]

                    port In {
                        label = "In"
                        position = left:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7824, 8184
                    ]

                    junction Junction2 sp
                    [
                        position = 8368, 8224
                    ]

                    junction Junction3 sp
                    [
                        position = 8440, 8224
                    ]

                    junction Junction4 sp
                    [
                        position = 7928, 8184
                    ]

                    connect Integrator1.reset Reset as Connection2
                    connect Junction2 Limit1.in as Connection45
                    connect Junction3 Out as Connection48
                    connect Junction4 In as Connection57
                    connect Kb.in Sum6.out as Connection50
                    connect Ki.in Junction4 as Connection56
                    connect Ki.out Sum7.in as Connection54
                    connect Kp.in Junction4 as Connection58
                    connect Kp.out Sum5.in as Connection59
                    connect Limit1.out Junction3 as Connection47
                    connect Sum5.in1 Integrator1.out as Connection5
                    connect Sum5.out Junction2 as Connection44
                    connect Sum6.in Junction2 as Connection46
                    connect Sum6.in1 Junction3 as Connection49
                    connect Sum7.out Integrator1.in as Connection52
                    connect Sum7.in1 Kb.out as Connection53
                }
                [
                    position = 8504, 7944
                    size = 64, 48
                ]

                component gen_sum Sum4 {
                    signs = "+-"
                }
                [
                    position = 7872, 8392
                    hide_name = True
                ]

                component gen_probe E_f_M {
                }
                [
                    position = 8448, 8032
                ]

                component gen_probe voltage_diff {
                }
                [
                    position = 8240, 8360
                ]

                component gen_gain Gain18 {
                    gain = "V_DQ"
                }
                [
                    position = 8584, 7944
                    hide_name = True
                ]

                port V_F {
                    label = "V_F"
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8664, 7944
=======
                component src_scada_input AGC {
                    execution_rate = "Ts_sys"
                    max = "S"
                    min = "-S"
                    unit = "W"
                }
                [
                    position = 7680, 8232
                ]

                component gen_probe P_sv {
                }
                [
                    position = 8648, 8312
                ]

                component gen_probe frequency_diff {
                }
                [
                    position = 8376, 8320
                ]

                component src_constant "AGC offset" {
                    execution_rate = "Ts_sys"
                    value = "18345.5+400.3"
                }
                [
                    position = 7688, 8168
                ]

                component gen_sum Sum11 {
                    signs = "++"
                }
                [
                    position = 7760, 8200
                    hide_name = True
                ]

                component gen_rate_limiter "Rate Limiter2" {
                    falling_limit = "inner_w_fall"
                    rising_limit = "inner_w_rise"
                }
                [
                    position = 8080, 8320
                    hide_name = True
                ]

                component gen_gain Gain37 {
                    gain = "1/S"
                }
                [
                    position = 7816, 8200
                    hide_name = True
                ]

                component gen_z_domain_transfer "Discrete Transfer Function1" {
                    a_coeff = "[T1*T2, T1, 1]"
                    b_coeff = "[T3, 1]"
                    domain = "S-domain"
                    method = "Bilinear"
                }
                [
                    position = 8256, 8248
                    hide_name = True
                ]

                component gen_gain Gain38 {
                    gain = "gov_Kp"
                }
                [
                    position = 8328, 8248
                    hide_name = True
                ]

                component gen_gain Gain39 {
                    gain = "K"
                }
                [
                    position = 8400, 8248
                    hide_name = True
                ]

                component gen_z_domain_transfer "Discrete Transfer Function2" {
                    a_coeff = "[T5*T6, (T5+T6), 1]"
                    b_coeff = "[T4, 1]"
                    domain = "S-domain"
                    method = "Bilinear"
                }
                [
                    position = 8472, 8248
                    hide_name = True
                ]

                component gen_integrator Integrator1 {
                }
                [
                    position = 8544, 8248
                    hide_name = True
>>>>>>> Stashed changes
                ]

                port "|E|" {
                    label = "|E|"
                    position = left:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8080, 8520
                    rotation = down
                    scale = -1, 1
                ]

                port E_ref {
                    label = "E_ref"
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7776, 8368
                ]

                port exc_state {
                    label = "ON/OFF"
                    position = top:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
<<<<<<< Updated upstream
                    position = 7704, 8216
=======
                    position = 8688, 8248
>>>>>>> Stashed changes
                ]

                tag R_F2 {
                    value = "R_F"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8040, 8232
                    hide_name = True
                ]

<<<<<<< Updated upstream
                tag E_F1 {
                    value = "E_F"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8040, 7904
                    hide_name = True
                ]

                tag V_R {
                    value = "V_R"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 8560, 8272
                    hide_name = True
                ]

                tag E_F3 {
                    value = "E_F"
=======
                tag From1 {
                    value = "P_SV"
>>>>>>> Stashed changes
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8040, 8296
                    hide_name = True
                ]

<<<<<<< Updated upstream
                tag V_t {
                    value = "E_t"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 8560, 8496
                    hide_name = True
                ]

                tag E_F {
                    value = "E_F"
=======
                tag Goto1 {
                    value = "P_SV"
>>>>>>> Stashed changes
                    scope = local
                    kind = sp
                    direction = in
                }
                [
<<<<<<< Updated upstream
                    position = 8504, 8000
                    hide_name = True
                ]

                tag V_R1 {
                    value = "V_R"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8136, 7960
                    hide_name = True
                ]

                tag R_F {
                    value = "R_F"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 8560, 8104
                    hide_name = True
                ]

                tag V_R2 {
                    value = "V_R"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8136, 8200
                    hide_name = True
                ]

                tag E_F2 {
                    value = "E_F"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8040, 8128
                    hide_name = True
                ]

                tag R_F1 {
                    value = "R_F"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8136, 8072
                    hide_name = True
                ]

                tag V_t1 {
                    value = "E_t"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8080, 8456
                    hide_name = True
                ]

                tag V_t2 {
                    value = "E_t"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7776, 8416
                    hide_name = True
                ]

                tag V_t5 {
                    value = "exc_state"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8240, 8320
                    hide_name = True
                ]

                tag V_t6 {
                    value = "exc_state"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8216, 8536
                    hide_name = True
                ]

                tag V_t7 {
                    value = "exc_state"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8240, 8144
                    hide_name = True
                ]

                tag V_t8 {
                    value = "exc_state"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8240, 7984
                    hide_name = True
                ]

                tag V_t9 {
                    value = "exc_state"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8440, 7880
                    hide_name = True
                ]

                tag V_t11 {
                    value = "exc_state"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7872, 8312
                    hide_name = True
                ]

                tag w_e1 {
                    value = "exc_state"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 7872, 8272
                    rotation = down
                    hide_name = True
                    scale = -1, 1
                ]

                junction Junction4 sp
                [
                    position = 8512, 8272
                ]

                junction Junction10 sp
                [
                    position = 8512, 8496
                ]

                junction Junction12 sp
                [
                    position = 8504, 8104
                ]

                junction Junction18 sp
                [
                    position = 8416, 7944
                ]

                junction Junction26 sp
                [
                    position = 8416, 8000
                ]

                junction Junction27 sp
                [
                    position = 8104, 8360
                ]

                junction Junction28 sp
=======
                    position = 8688, 8184
                    hide_name = True
                ]

                junction Junction3 sp
                [
                    position = 7832, 8376
                ]

                junction Junction10 sp
                [
                    position = 8120, 8320
                ]

                junction Junction11 sp
                [
                    position = 8616, 8248
                ]

                junction Junction12 sp
                [
                    position = 8616, 8248
                ]

                connect Gain28.in w_m3 as Connection7
                connect Sum2.out Gain29.in as Connection207
>>>>>>> Stashed changes
                [
                    position = 7784, 8216
                ]
<<<<<<< Updated upstream

                junction Junction29 sp
                [
                    position = 7784, 8216
                ]

                connect Constant1.out "|V|1.in" as Connection42
                connect E_F1 Gain2.in as Connection4
                connect E_F2 Gain3.in as Connection7
                connect E_F3 Gain5.in as Connection12
                connect Gain1.out Integrator1.in as Connection1
                connect Gain1.in Sum1.out as Connection2
                connect Gain2.out Sum1.in as Connection3
                connect Gain3.out Sum2.in1 as Connection8
                connect Gain4.out Integrator2.in as Connection9
                connect Gain5.out Sum3.in2 as Connection21
=======
                connect Gain28.out Junction3 as Connection799
                connect Junction3 Sum7.in1 as Connection800
>>>>>>> Stashed changes
                [
                    breakpoints = 8192, 8288; 8192, 8272
                ]
<<<<<<< Updated upstream
                connect Gain6.out Integrator3.in as Connection16
                connect Gain7.out Sum3.in1 as Connection20
                [
                    breakpoints = 8192, 8232; 8192, 8256
                ]
                connect Gain8.out Sum3.in3 as Connection22
                connect Integrator1.out Junction18 as Connection165
                connect Integrator4.in Gain9.out as Connection60
                connect Junction10 Integrator4.out as Connection123
                connect Junction12 Integrator2.out as Connection138
                connect Junction18 PI.In as Connection166
                connect Junction4 Integrator3.out as Connection93
                connect R_F Junction12 as Connection137
                connect R_F1 Sum2.in as Connection6
                connect R_F2 Gain7.in as Connection19
                connect R_F_M.in Junction12 as Connection139
                connect Sum2.out Gain4.in as Connection10
                connect Sum3.out Gain6.in as Connection14
                connect Sum5.out Gain9.in as Connection26
                connect V_R Junction4 as Connection92
                connect V_R1 Sum1.in1 as Connection5
                connect V_R2 Sum3.in as Connection18
                connect V_R_M.in Junction4 as Connection94
                connect V_t Junction10 as Connection122
                connect V_t1 Sum5.in as Connection25
                connect E_t_M.in Junction10 as Connection124
                connect "exciter OFF.in" "Logical operator1.out" as Connection155
                connect V_t2 Sum4.in1 as Connection75
                connect V_t5 Integrator3.reset as Connection200
                connect V_t6 Integrator4.reset as Connection201
                connect V_t7 Integrator2.reset as Connection202
                connect V_t8 Integrator1.reset as Connection203
                connect V_t9 PI.Reset as Connection204
                connect V_t11 "|V|1.in2" as Connection213
                connect Sum4.out "|V|1.in1" as Connection816
                connect "|V|1.out" "Rate Limit.in" as Connection817
                [
                    breakpoints = 8008, 8360
                ]
                connect E_F Junction26 as Connection818
                connect Junction26 Junction18 as Connection819
                connect E_f_M.in Junction26 as Connection820
                connect Sum4.in E_ref as Connection1243
                [
                    breakpoints = 7832, 8368
                ]
                connect "|E|" Sum5.in1 as Connection1244
                connect "Rate Limit.out" Junction27 as Connection1246
                connect Junction27 Gain8.in as Connection1247
                connect voltage_diff.in Junction27 as Connection1248
                connect PI.Out Gain18.in as Connection1249
                connect Gain18.out V_F as Connection1250
                connect exc_state Junction28 as Connection1252
                connect Junction28 "exciter ON.in" as Connection1253
                connect "Logical operator1.in" Junction29 as Connection1255
                connect Junction29 Junction28 as Connection1256
                connect w_e1 Junction29 as Connection1257
=======
                connect "Exciter Activation.w_PU" Junction3 as Connection801
                connect "AGC offset.out" Sum11.in as Connection846
                connect From1 Sum2.in1 as Connection849
                connect w_ref Sum7.in as Connection853
                connect Gain29.out Sum10.in as Connection857
                connect AGC.out Sum11.in1 as Connection858
                connect Sum11.out Gain37.in as Connection859
                connect Gain37.out Sum2.in as Connection860
                connect "Exciter Activation.exciter state" "exciter state" as Connection861
                connect Sum10.in1 Junction10 as Connection867
                connect Junction10 frequency_diff.in as Connection868
                [
                    breakpoints = 8120, 8320
                ]
                connect "Rate Limiter2.out" Junction10 as Connection869
                connect Gain39.in Gain38.out as Connection872
                connect "Discrete Transfer Function1.out" Gain38.in as Connection873
                connect "Discrete Transfer Function2.in" Gain39.out as Connection874
                connect Integrator1.in "Discrete Transfer Function2.out" as Connection875
                connect Sum10.out "Discrete Transfer Function1.in" as Connection876
                connect Integrator1.out Junction11 as Connection878
                connect Junction11 P_SV as Connection879
                connect P_sv.in Junction12 as Connection881
                connect Junction12 Junction11 as Connection882
                connect Goto1 Junction12 as Connection883
                connect "Rate Limiter2.in" Sum7.out as Connection884

                Ts = "Ts_sys"
>>>>>>> Stashed changes

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\"\">IEEE DC1A exciter</span></p></body></html>"

                    Ts {
                        label = "Execution rate"
                        widget = edit
                        type = generic
                        default_value = "0"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE

                    CODE define_icon
                        mdl.disp_component_icon_text(item_handle, "IEEE DC1A")
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
<<<<<<< Updated upstream
                position = 6744, 8280
                size = 128, 144
=======
                position = 6752, 8048
                size = 144, 136
>>>>>>> Stashed changes
            ]

            component sys_signal_switch "|V|3" {
                criterion = "ctrl > threshold"
                threshold = "0.5"
            }
            [
                position = 6624, 8232
                hide_name = True
            ]

            component src_scada_input Vref {
                def_value = "1"
<<<<<<< Updated upstream
                execution_rate = "Ts"
                max = "2"
                min = "0.8"
                unit = "pu"
            }
            [
                position = 6560, 8216
=======
                execution_rate = "Ts_sys"
                max = "1.3"
                min = "0.7"
                unit = "pu"
            }
            [
                position = 6560, 7984
>>>>>>> Stashed changes
                rotation = down
                scale = -1, 1
            ]

            component gen_gain Gain17 {
                gain = "V_ABC*np.sqrt(3)/1000"
            }
            [
                position = 6656, 8376
                rotation = right
                hide_name = True
                scale = -1, 1
            ]

            component Subsystem "Synchronous Machine" {
                layout = dynamic
                component gen_gain Gain1 {
                    gain = "pms"
                }
                [
                    position = 7040, 9008
                    hide_name = True
                ]

                component gen_probe E_qp_M {
                }
                [
                    position = 7336, 8552
                ]

                component gen_probe Phi_1d_a_M {
                }
                [
                    position = 7352, 8720
                ]

                component gen_probe Phi_2q_a_M {
                }
                [
                    position = 7312, 8864
                    scale = -1, 1
                ]

                component gen_probe Phi_d_a_M {
                }
                [
                    position = 7808, 8592
                ]

                component gen_probe Phi_q_a_M {
                }
                [
                    position = 7456, 8704
                    scale = -1, 1
                ]

                component Subsystem Phi_1d_a {
                    layout = dynamic
                    component src_constant Constant1 {
                        execution_rate = "Ts"
                        value = "X_dp-X_ls"
                    }
                    [
                        position = 8024, 8224
                        hide_name = True
                    ]

                    component gen_gain Gain1 {
                        gain = "1/T_dopp"
                    }
                    [
                        position = 8288, 8152
                        hide_name = True
                    ]

                    component gen_product Product1 {
                    }
                    [
                        position = 8096, 8232
                        hide_name = True
                    ]

                    component gen_integrator Integrator1 {
                    }
                    [
                        position = 8352, 8152
                        hide_name = True
                    ]

                    component gen_sum Sum1 {
                        signs = "-+-"
                    }
                    [
                        position = 8208, 8152
                        hide_name = True
                    ]

                    port Phi_1d_a {
                        label = "Phi_1d_a"
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8424, 8152
                    ]

<<<<<<< Updated upstream
                    port E_qp {
                        label = "E_qp"
                        position = left:2
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
=======
                component sys_signal_switch "|V|1" {
                    criterion = "ctrl != threshold"
                    threshold = "1"
                }
                [
                    position = 7976, 8360
                    hide_name = True
                ]

                component src_constant Constant1 {
                    execution_rate = "Ts_sys"
                    value = "0"
                }
                [
                    position = 7872, 8344
                    hide_name = True
                ]

                component gen_probe V_R_M {
                }
                [
                    position = 8560, 8216
                ]

                component gen_rate_limiter "Rate Limit" {
                    falling_limit = "V_fall"
                    rising_limit = "V_rise"
                }
                [
                    position = 8024, 8360
                    hide_name = True
                ]

                component gen_probe E_t_M {
                }
                [
                    position = 8560, 8432
                ]

                component gen_integrator Integrator4 {
                    show_reset = "either"
                }
                [
                    position = 8368, 8496
                    hide_name = True
                ]

                component gen_sum Sum5 {
                    signs = "-+"
                }
                [
                    position = 8216, 8488
                    hide_name = True
                ]

                component gen_gain Gain9 {
                    gain = "1/(T_R)"
                }
                [
                    position = 8288, 8488
                    hide_name = True
                ]

                component gen_probe R_F_M {
                }
                [
                    position = 8560, 8048
                ]

                component gen_digital_probe "exciter ON" {
                }
                [
                    position = 7872, 8216
                ]

                component gen_logic_op "Logical operator1" {
                    operator = "NOT"
                }
                [
                    position = 7784, 8176
                    rotation = right
                    hide_name = True
                    scale = 1, -1
                ]

                component gen_digital_probe "exciter OFF" {
                }
                [
                    position = 7872, 8136
                ]

                component Subsystem PI {
                    layout = dynamic
                    component gen_integrator Integrator1 {
                        limit_lower = "[\'-inf\']"
                        limit_upper = "[\'inf\']"
                        show_reset = "either"
>>>>>>> Stashed changes
                    }
                    [
                        position = 8136, 8152
                    ]

                    port I_d_a {
                        label = "I_d_a"
                        position = left:3
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8024, 8264
                    ]

                    junction Junction1 sp
                    [
                        position = 8392, 8152
                    ]

                    connect Constant1.out Product1.in as Connection26
                    connect Integrator1.in Gain1.out as Connection24
                    connect Integrator1.out Junction1 as Connection31
                    connect Junction1 Phi_1d_a as Connection32
                    connect Product1.in1 I_d_a as Connection29
                    connect Product1.out Sum1.in2 as Connection27
                    connect Sum1.in1 E_qp as Connection30
                    connect Sum1.out Gain1.in as Connection25
                    connect Sum1.in Junction1 as Connection33
                    [
                        breakpoints = 8168, 8096; 8392, 8096
                    ]
                }
                [
                    position = 7216, 8768
                    size = 96, 64
                ]

                component Subsystem Phi_2q_a {
                    layout = dynamic
                    component gen_gain Gain1 {
                        gain = "1/T_qopp"
                    }
                    [
                        position = 8288, 8152
                        hide_name = True
                    ]

                    component gen_integrator Integrator1 {
                    }
                    [
                        position = 8352, 8152
                        hide_name = True
                    ]

                    component gen_sum Sum1 {
                        signs = "--"
                    }
                    [
                        position = 8208, 8152
                        hide_name = True
                    ]

                    component gen_product Product1 {
                    }
                    [
                        position = 8096, 8232
                        hide_name = True
                    ]

                    component src_constant Constant1 {
                        execution_rate = "Ts"
                        value = "X_qp-X_ls"
                    }
                    [
                        position = 8024, 8224
                        hide_name = True
                    ]

                    port Phi_2q_a {
                        label = "Phi_2q_a"
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8424, 8152
                    ]

                    port I_q_a {
                        label = "I_q_a"
                        position = left:3
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8024, 8264
                    ]

                    junction Junction1 sp
                    [
                        position = 8392, 8152
                    ]

                    connect Constant1.out Product1.in as Connection26
                    connect Integrator1.in Gain1.out as Connection24
                    connect Integrator1.out Junction1 as Connection31
                    connect Junction1 Phi_2q_a as Connection32
                    connect Product1.in1 I_q_a as Connection29
                    connect Sum1.out Gain1.in as Connection25
                    connect Sum1.in Junction1 as Connection33
                    [
                        breakpoints = 8168, 8096; 8392, 8096
                    ]
                    connect Product1.out Sum1.in1 as Connection34
                }
                [
                    position = 7448, 8912
                    scale = -1, 1
                    size = 96, 64
                ]

                component Subsystem w_m {
                    layout = dynamic
                    component gen_product Product3 {
                    }
                    [
                        position = 8032, 8096
                        hide_name = True
                    ]

                    component gen_integrator Integrator1 {
                    }
                    [
                        position = 8376, 8144
                        hide_name = True
                    ]

                    component gen_product Product1 {
                    }
                    [
                        position = 8112, 8264
                        hide_name = True
                    ]

                    component gen_gain Gain2 {
                        gain = "w_0/(2*H)"
                    }
                    [
                        position = 8312, 8144
                        hide_name = True
                    ]

                    component gen_sum Sum1 {
                        signs = "+-"
                    }
                    [
                        position = 8112, 8144
                        hide_name = True
                    ]

                    component gen_gain Gain1 {
                        gain = "pms/w_0"
                    }
                    [
                        position = 8032, 8248
                        hide_name = True
                    ]

                    component gen_sum Sum2 {
                        signs = "+--"
                    }
                    [
                        position = 8248, 8144
                        hide_name = True
                    ]

                    component src_constant Constant1 {
                        execution_rate = "Ts"
                        value = "D_FW"
                    }
                    [
                        position = 7968, 8248
                        hide_name = True
                    ]

                    component gen_product Product2 {
                    }
                    [
                        position = 8032, 8184
                        hide_name = True
                    ]

                    component gen_gain Gain16 {
                        gain = "1/TM_DQ"
                    }
                    [
                        position = 8176, 8056
                        hide_name = True
                    ]

                    port w_m2 {
                        label = "w_m"
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8448, 8144
                    ]

                    port T_M {
                        label = "T_M"
                        position = left:2
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8112, 8056
                    ]

                    port Phi_d_a {
                        label = "Phi_d_a"
                        position = left:3
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
<<<<<<< Updated upstream
                    [
                        position = 7960, 8040
                    ]
=======
                }
                [
                    position = 7600, 8216
                ]
>>>>>>> Stashed changes

                    port I_q_a {
                        label = "I_q_a"
                        position = left:3
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7960, 8096
                    ]

                    port Phi_q_a {
                        label = "Phi_q_a"
                        position = left:5
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7960, 8144
                    ]

                    port I_d_a {
                        label = "I_d_a"
                        position = left:4
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7960, 8192
                    ]

                    tag w_m1 {
                        value = "w_m"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7968, 8280
                        hide_name = True
                    ]

                    tag w_m {
                        value = "w_m"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8456, 8240
                        hide_name = True
                    ]

                    junction Junction1 sp
                    [
                        position = 8416, 8144
                    ]

                    connect Constant1.out Gain1.in as Connection1
                    connect Gain1.out Product1.in as Connection2
                    connect Gain2.out Integrator1.in as Connection8
                    connect Integrator1.out Junction1 as Connection16
                    connect Junction1 w_m2 as Connection17
                    connect Product1.out Sum2.in2 as Connection6
                    connect Product2.in1 I_d_a as Connection10
                    connect Product2.in Phi_q_a as Connection13
                    connect Product2.out Sum1.in1 as Connection3
                    connect Product3.in1 I_q_a as Connection14
                    connect Product3.in Phi_d_a as Connection11
                    connect Product3.out Sum1.in as Connection4
                    connect Sum2.out Gain2.in as Connection7
                    connect w_m Junction1 as Connection18
                    connect w_m1 Product1.in1 as Connection9
                    connect Gain16.in T_M as Connection26
                    connect Sum1.out Sum2.in1 as Connection27
                    [
                        breakpoints = 8144, 8144
                    ]
                    connect Gain16.out Sum2.in as Connection28
                    [
                        breakpoints = 8208, 8056; 8208, 8056; 8208, 8056; 8208, 8112; 8208, 8112; 8208, 8128
                    ]
                }
                [
                    position = 6896, 8928
                    size = 160, 96
                ]

                component Subsystem E_qp {
                    layout = dynamic
                    component gen_product Product3 {
                    }
                    [
                        position = 8016, 8272
                        hide_name = True
                    ]

                    component src_constant Constant1 {
                        execution_rate = "Ts"
                        value = "X_d-X_dp"
                    }
                    [
                        position = 8272, 8088
                        hide_name = True
                    ]

                    component gen_product Product2 {
                    }
                    [
                        position = 8192, 8224
                        hide_name = True
                    ]

                    component gen_sum Sum3 {
                        signs = "++-"
                    }
                    [
                        position = 8096, 8272
                        hide_name = True
                    ]

                    component src_constant Constant2 {
                        execution_rate = "Ts"
                        value = "(X_dp-X_dpp)/(X_dp-X_ls)**2"
                    }
                    [
                        position = 8096, 8200
                        hide_name = True
                    ]

                    component src_constant Constant3 {
                        execution_rate = "Ts"
                        value = "X_dp-X_ls"
                    }
                    [
                        position = 7936, 8248
                        hide_name = True
                    ]

                    component gen_sum Sum1 {
                        signs = "--+"
                    }
                    [
                        position = 8448, 8112
                        hide_name = True
                    ]

                    component gen_sum Sum2 {
                        signs = "+-"
                    }
                    [
                        position = 8272, 8160
                        hide_name = True
                    ]

                    component gen_product Product1 {
                    }
                    [
                        position = 8352, 8112
                        hide_name = True
                    ]

                    component gen_integrator Integrator1 {
                    }
                    [
                        position = 8568, 8112
                        hide_name = True
                    ]

                    component gen_gain Gain1 {
                        gain = "1/T_dop"
                    }
                    [
                        position = 8512, 8112
                        hide_name = True
                    ]

                    component gen_gain Gain2 {
                        gain = "1/V_DQ"
                    }
                    [
                        position = 8392, 8168
                        rotation = left
                        hide_name = True
                    ]

                    port E_qp3 {
                        label = "E_qp"
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8632, 8112
                        hide_name = True
                    ]

                    port E_F {
                        label = "E_F"
                        position = left:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8352, 8216
                    ]

                    port I_d_a {
                        label = "I_d_a"
                        position = left:2
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7816, 8152
                    ]

                    port Phi_1d_a {
                        label = "Phi_1d_a"
                        position = left:3
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8024, 8208
                    ]

                    tag E_qp1 {
                        value = "E_qp"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8352, 8056
                        hide_name = True
                    ]

                    tag E_qp2 {
                        value = "E_qp"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8016, 8328
                        hide_name = True
                        size = 60, 20
                    ]

                    tag E_qp {
                        value = "E_qp"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8656, 8192
                        hide_name = True
                    ]

                    junction Junction2 sp
                    [
                        position = 7856, 8152
                    ]

                    junction Junction3 sp
                    [
                        position = 8600, 8112
                    ]

                    connect Constant1.out Product1.in as Connection3
                    connect Constant2.out Product2.in as Connection6
                    connect Constant3.out Product3.in as Connection19
                    connect E_qp Junction3 as Connection29
                    connect E_qp1 Sum1.in as Connection1
                    connect E_qp2 Sum3.in2 as Connection9
                    connect Gain1.in Sum1.out as Connection26
                    [
                        breakpoints = 8480, 8112
                    ]
                    connect Integrator1.in Gain1.out as Connection24
                    connect Integrator1.out Junction3 as Connection27
                    connect Junction2 I_d_a as Connection21
                    connect Junction3 E_qp3 as Connection28
                    connect Product1.out Sum1.in1 as Connection2
                    connect Product2.out Sum2.in1 as Connection5
                    connect Product3.in1 Junction2 as Connection22
                    connect Product3.out Sum3.in1 as Connection8
                    connect Sum2.in Junction2 as Connection20
                    connect Sum2.out Product1.in1 as Connection4
                    connect Sum3.in Phi_1d_a as Connection15
                    connect Sum3.out Product2.in1 as Connection7
                    connect Sum1.in2 Gain2.out as Connection30
                    connect Gain2.in E_F as Connection31
                }
                [
                    position = 7216, 8632
                    size = 96, 88
                ]
<<<<<<< Updated upstream

                component Subsystem "Phi_q_a 2" {
=======
                connect "|E|" Sum5.in1 as Connection1244
                connect "Rate Limit.out" Junction27 as Connection1246
                connect Junction27 Gain8.in as Connection1247
                connect voltage_diff.in Junction27 as Connection1248
                connect PI.Out Gain18.in as Connection1249
                connect Gain18.out V_F as Connection1250
                connect "exciter ON.in" Junction28 as Connection1252
                connect Junction28 exc_state as Connection1253
                connect "Logical operator1.in" Junction29 as Connection1255
                connect Junction29 Junction28 as Connection1256
                connect w_e1 Junction29 as Connection1257

                Ts = "Ts_sys"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">IEEE DC1A exciter</p></body></html>"

                    Ts {
                        label = "Execution rate"
                        widget = edit
                        type = generic
                        default_value = "0"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE

                    CODE define_icon
                        mdl.disp_component_icon_text(item_handle, "IEEE DC1A")
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 6744, 8280
                size = 128, 144
            ]

            component sys_signal_switch "|V|3" {
                criterion = "ctrl > threshold"
                threshold = "0.5"
            }
            [
                position = 6624, 8232
                hide_name = True
            ]

            component src_scada_input Vref {
                def_value = "1"
                execution_rate = "Ts_sys"
                max = "2"
                min = "0.8"
                unit = "pu"
            }
            [
                position = 6560, 8216
                rotation = down
                scale = -1, 1
            ]

            component gen_gain Gain17 {
                gain = "V_ABC*np.sqrt(3)/1000"
            }
            [
                position = 6656, 8376
                rotation = right
                hide_name = True
                scale = -1, 1
            ]

            component Subsystem "Synchonous Machine" {
                layout = dynamic
                component gen_gain Gain1 {
                    gain = "pms"
                }
                [
                    position = 7040, 9008
                    hide_name = True
                ]

                component gen_probe E_qp_M {
                }
                [
                    position = 7336, 8552
                ]

                component gen_probe Phi_1d_a_M {
                }
                [
                    position = 7352, 8720
                ]

                component gen_probe Phi_2q_a_M {
                }
                [
                    position = 7312, 8864
                    scale = -1, 1
                ]

                component gen_probe Phi_d_a_M {
                }
                [
                    position = 7808, 8592
                ]

                component gen_probe Phi_q_a_M {
                }
                [
                    position = 7456, 8704
                    scale = -1, 1
                ]

                component Subsystem Phi_1d_a {
>>>>>>> Stashed changes
                    layout = dynamic
                    component gen_product Product2 {
                    }
                    [
                        position = 8144, 8208
                        hide_name = True
                    ]

                    component gen_sum Sum1 {
                        signs = "-+"
                    }
                    [
                        position = 8256, 8168
                        hide_name = True
                    ]

                    component src_constant Constant2 {
                        execution_rate = "Ts"
                        value = "(X_qp-X_qpp)/(X_qp-X_ls)"
                    }
                    [
                        position = 8040, 8184
                        hide_name = True
                    ]

                    component gen_gain Gain1 {
                        gain = "X_qpp"
                    }
                    [
                        position = 8136, 8128
                        hide_name = True
                    ]

                    port Phi_2q_a {
                        label = "Phi_2q_a"
                        position = left:2
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8040, 8232
                    ]

                    port Phi_q_a {
                        label = "Phi_q_a"
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8336, 8168
                    ]

                    port I_q_a {
                        position = left:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8040, 8128
                    ]

                    connect Constant2.out Product2.in as Connection5
                    connect Phi_q_a Sum1.out as Connection13
                    connect Product2.in1 Phi_2q_a as Connection9
                    connect I_q_a Gain1.in as Connection16
                    connect Gain1.out Sum1.in as Connection17
                    connect Product2.out Sum1.in1 as Connection18
                }
                [
                    position = 7624, 8744
                    scale = -1, 1
                    size = 128, 64
                ]

                component Subsystem "Phi_d_a 2" {
                    layout = dynamic
                    component src_constant Constant2 {
                        execution_rate = "Ts"
                        value = "(X_dp-X_dpp)/(X_dp-X_ls)"
                    }
                    [
                        position = 8040, 8184
                        hide_name = True
                    ]

                    component src_constant Constant1 {
                        execution_rate = "Ts"
                        value = "(X_dpp-X_ls)/(X_dp-X_ls)"
                    }
                    [
                        position = 8040, 8288
                        hide_name = True
                    ]

                    component gen_product Product1 {
                    }
                    [
                        position = 8144, 8312
                        hide_name = True
                    ]

                    component gen_sum Sum1 {
                        signs = "-++"
                    }
                    [
                        position = 8256, 8208
                        hide_name = True
                    ]

                    component gen_product Product2 {
                    }
                    [
                        position = 8144, 8208
                        hide_name = True
                    ]

                    component gen_gain Gain1 {
                        gain = "X_dpp"
                    }
                    [
                        position = 8144, 8120
                        hide_name = True
                    ]

                    port E_qp {
                        label = "E_qp"
                        position = left:3
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8040, 8328
                    ]

                    port Phi_1d_a {
                        label = "Phi_1d_a"
                        position = left:2
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8040, 8232
                    ]

                    port Phi_d_a {
                        label = "Phi_d_a"
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8360, 8208
                    ]

                    port I_d_a {
                        position = left:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8040, 8120
                    ]

                    connect Constant1.out Product1.in as Connection4
                    connect Constant2.out Product2.in as Connection5
                    connect E_qp Product1.in1 as Connection10
                    connect Phi_d_a Sum1.out as Connection13
                    connect Product2.in1 Phi_1d_a as Connection9
                    connect Product2.out Sum1.in1 as Connection14
                    connect Product1.out Sum1.in2 as Connection15
                    connect I_d_a Gain1.in as Connection16
                    connect Gain1.out Sum1.in as Connection17
                }
                [
                    position = 7624, 8632
                    size = 128, 64
                ]

                component Subsystem V_qG2 {
                    layout = dynamic
                    component gen_product Product3 {
                        signs = "*/"
                    }
                    [
                        position = 8184, 8176
                        hide_name = True
                    ]

                    component gen_product Product2 {
                    }
                    [
                        position = 8280, 8224
                        hide_name = True
                    ]

                    component gen_sum Sum2 {
                    }
                    [
                        position = 8384, 8264
                        hide_name = True
                    ]

                    component src_constant Constant2 {
                        execution_rate = "Ts"
                        value = "w_0"
                    }
                    [
                        position = 8112, 8208
                        hide_name = True
                    ]

                    component gen_gain Gain1 {
                        gain = "1/w_0"
                    }
                    [
                        position = 8256, 8304
                        hide_name = True
                    ]

                    component gen_terminator Termination1 {
                    }
                    [
                        position = 8384, 8328
                    ]

                    component src_constant Constant3 {
                        execution_rate = "Ts"
                        value = "0"
                    }
                    [
                        position = 8280, 8272
                        hide_name = True
                    ]

                    component gen_differentiator Differentiator1 {
                    }
                    [
                        position = 8496, 8328
                        hide_name = True
                    ]

                    component gen_z_domain_transfer "Discrete Transfer Function1" {
                        a_coeff = "[EM_delay,1]"
                        b_coeff = "[1,0 ]"
                        domain = "S-domain"
                    }
                    [
                        position = 8312, 8304
                        hide_name = True
                    ]

                    port w_e {
                        label = "w_e"
                        position = left:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8112, 8144
                    ]

                    port Phi_d_a {
                        label = "Phi_d_a"
                        position = left:2
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8208, 8232
                    ]

                    port Phi_q_a {
                        label = "Phi_q_a"
                        position = left:4
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8208, 8304
                    ]

                    port V_qG {
                        label = "V_qG"
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8488, 8264
                    ]

                    connect Constant2.out Product3.in1 as Connection5
                    connect Gain1.in Phi_q_a as Connection17
                    connect Product2.in1 Phi_d_a as Connection13
                    connect Product2.out Sum2.in as Connection22
                    connect Product3.out Product2.in as Connection4
                    connect Product3.in w_e as Connection11
                    connect V_qG Sum2.out as Connection32
                    connect Constant3.out Termination1.in as Connection38
                    [
                        breakpoints = 8336, 8272
                    ]
                    connect "Discrete Transfer Function1.in" Gain1.out as Connection39
                    connect "Discrete Transfer Function1.out" Sum2.in1 as Connection40
                }
                [
                    position = 7224, 9024
                    size = 80, 80
                ]

                component Subsystem V_dG2 {
                    layout = dynamic
                    component gen_product Product3 {
                        signs = "*/"
                    }
                    [
                        position = 8032, 8216
                        hide_name = True
                    ]

                    component gen_product Product2 {
                    }
                    [
                        position = 8128, 8264
                        hide_name = True
                    ]

                    component gen_sum Sum2 {
                        signs = "-+"
                    }
                    [
                        position = 8304, 8288
                        hide_name = True
                    ]

                    component src_constant Constant2 {
                        execution_rate = "Ts"
                        value = "w_0"
                    }
                    [
                        position = 7960, 8248
                        hide_name = True
                    ]

                    component gen_gain Gain1 {
                        gain = "1/w_0"
                    }
                    [
                        position = 8176, 8336
                        hide_name = True
                    ]

                    component gen_terminator Termination1 {
                    }
                    [
                        position = 8312, 8344
                        hide_name = True
                    ]

                    component src_constant Constant3 {
                        execution_rate = "Ts"
                        value = "0"
                    }
                    [
                        position = 8128, 8304
                        hide_name = True
                    ]

                    component gen_z_domain_transfer "Discrete Transfer Function1" {
                        a_coeff = "[EM_delay,1]"
                        b_coeff = "[1,0 ]"
                        domain = "S-domain"
                    }
                    [
                        position = 8224, 8336
                        hide_name = True
                    ]

                    component gen_differentiator Differentiator1 {
                    }
                    [
                        position = 8408, 8352
                        hide_name = True
                    ]

                    port w_e {
                        label = "w_e"
                        position = left:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7960, 8184
                    ]

                    port Phi_q_a {
                        label = "Phi_q_a"
                        position = left:2
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8056, 8272
                    ]

                    port Phi_d_a {
                        label = "Phi_d_a"
                        position = left:4
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8128, 8336
                    ]

                    port V_d_a {
                        label = "V_d_a"
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8408, 8288
                    ]

                    connect Constant2.out Product3.in1 as Connection5
                    connect Gain1.in Phi_d_a as Connection16
                    connect Product2.in1 Phi_q_a as Connection13
                    connect Product2.out Sum2.in as Connection14
                    connect Product3.out Product2.in as Connection4
                    connect Product3.in w_e as Connection11
                    connect Sum2.out V_d_a as Connection24
                    connect Termination1.in Constant3.out as Connection34
                    [
                        breakpoints = 8280, 8344; 8280, 8320; 8232, 8304
                    ]
                    connect "Discrete Transfer Function1.out" Sum2.in1 as Connection35
                    connect "Discrete Transfer Function1.in" Gain1.out as Connection36
                }
                [
                    position = 7224, 9136
                    size = 80, 80
                ]

                component gen_gain Gain8 {
                    gain = "V_DQ"
                }
                [
                    position = 7360, 9024
                    hide_name = True
                ]

                component gen_gain Gain9 {
                    gain = "V_DQ"
                }
                [
                    position = 7360, 9072
                    hide_name = True
                ]

                component gen_gain Gain10 {
                    gain = "1/I_DQ"
                }
                [
                    position = 7744, 9160
                    hide_name = True
                ]

                component gen_gain Gain11 {
                    gain = "1/I_DQ"
                }
                [
                    position = 7744, 9256
                    hide_name = True
                ]

                component gen_probe I_q_a1 {
                }
                [
                    position = 7896, 9112
                ]

                component gen_probe I_d_a1 {
                }
                [
                    position = 7896, 9256
                ]

                component gen_probe Ed_phi {
                }
                [
                    position = 7320, 9136
                    rotation = down
                    scale = -1, 1
                ]

                component gen_probe Eq_phi {
                }
                [
                    position = 7320, 8984
                ]

                component Subsystem "abc to qd" {
                    layout = dynamic
                    component gen_trigonometric "Trigonometric function3" {
                        trigonometric_fn = "cos"
                    }
                    [
                        position = 8128, 7936
                        hide_name = True
                    ]

                    component gen_product Product1 {
                    }
                    [
                        position = 8224, 7912
                        hide_name = True
                    ]

                    component gen_sum Sum3 {
                        signs = "3"
                    }
                    [
                        position = 8304, 8024
                        hide_name = True
                    ]

                    component gen_product Product2 {
                    }
                    [
                        position = 8216, 8024
                        hide_name = True
                    ]

                    component gen_product Product3 {
                    }
                    [
                        position = 8216, 8136
                        hide_name = True
                    ]

                    component gen_trigonometric "Trigonometric function2" {
                        trigonometric_fn = "cos"
                    }
                    [
                        position = 8128, 8048
                        hide_name = True
                    ]

                    component gen_trigonometric "Trigonometric function4" {
                        trigonometric_fn = "cos"
                    }
                    [
                        position = 8128, 8160
                        hide_name = True
                    ]

                    component gen_sum Sum4 {
                    }
                    [
                        position = 7736, 8160
                        hide_name = True
                    ]

                    component src_constant Constant3 {
                        execution_rate = "Ts"
                        value = "2*np.pi/3"
                    }
                    [
                        position = 7648, 8168
                        hide_name = True
                    ]

                    component gen_sum Sum2 {
                        signs = "+-"
                    }
                    [
                        position = 7736, 8048
                        hide_name = True
                    ]

                    component src_constant Constant2 {
                        execution_rate = "Ts"
                        value = "2*np.pi/3"
                    }
                    [
                        position = 7648, 8056
                        hide_name = True
                    ]

                    component gen_trigonometric "Trigonometric function5" {
                    }
                    [
                        position = 8120, 8256
                        hide_name = True
                    ]

                    component gen_product Product4 {
                    }
                    [
                        position = 8216, 8224
                        hide_name = True
                    ]

                    component gen_sum Sum5 {
                        signs = "3"
                    }
                    [
                        position = 8304, 8336
                        hide_name = True
                    ]

                    component gen_product Product5 {
                    }
                    [
                        position = 8200, 8336
                        hide_name = True
                    ]

                    component gen_product Product6 {
                    }
                    [
                        position = 8200, 8448
                        hide_name = True
                    ]

                    component gen_trigonometric "Trigonometric function6" {
                    }
                    [
                        position = 8120, 8368
                        hide_name = True
                    ]

                    component gen_trigonometric "Trigonometric function7" {
                    }
                    [
                        position = 8120, 8480
                        hide_name = True
                    ]

                    component gen_c_function "confine phase" {
                        global_variables = "real x;real floor_in;"
                        in_terminal_dimensions = "inherit"
                        in_terminal_dimensions_str = "in inherit"
                        in_terminal_labels = "[(\'in\', True)]"
                        init_fnc = "/*Begin code section*/
floor_in = 0;
/*End code section*/"
                        no_feed_inputs = "[\'\']"
                        no_feed_outputs = "[\'\']"
                        out_terminal_dimensions = "inherit"
                        out_terminal_dimensions_str = "out inherit"
                        out_terminal_labels = "[(\'out\', True)]"
                        output_fnc = "/*Begin code section*/
x = in/6.283185307179586;
floor_in = floor(x);
out = in - (6.283185307179586*floor_in);
/*End code section*/"
                    }
                    [
                        position = 7592, 7936
                        size = 56, 48
                    ]

                    component gen_gain Gain1 {
                        gain = "2/3"
                    }
                    [
                        position = 8376, 8024
                        hide_name = True
                    ]

                    component gen_gain Gain2 {
                        gain = "2/3"
                    }
                    [
                        position = 8376, 8336
                        hide_name = True
                    ]

                    port q {
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8448, 8024
                    ]

                    port d {
                        position = right:2
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8448, 8336
                    ]

                    port theta {
                        position = left:4
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7512, 7936
                    ]

                    port a {
                        position = left:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7648, 7904
                        rotation = down
                        scale = -1, 1
                    ]

                    port b {
                        position = left:2
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7648, 8016
                        rotation = down
                        scale = -1, 1
                    ]

                    port c {
                        position = left:3
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7648, 8128
                        rotation = down
                        scale = -1, 1
                    ]

                    junction Junction3 sp
                    [
                        position = 8056, 7904
                    ]

                    junction Junction4 sp
                    [
                        position = 7688, 8040
                    ]

                    junction Junction5 sp
                    [
                        position = 7688, 7936
                    ]

                    junction Junction6 sp
                    [
                        position = 8032, 7936
                    ]

                    junction Junction7 sp
                    [
                        position = 7960, 8016
                    ]

                    junction Junction8 sp
                    [
                        position = 7936, 8048
                    ]

                    junction Junction9 sp
                    [
                        position = 7864, 8128
                    ]

                    junction Junction10 sp
                    [
                        position = 7840, 8160
                    ]

                    comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">q = (2/3)*( a*cos(wt) + b*cos(wt-(2*pi/3)) + c*cos(wt+(2*pi/3)) );</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">d = (2/3)*( a*sin(wt) + b*sin(wt-(2*pi/3)) + c*sin(wt+(2*pi/3)) );</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">zero = (1/3)*( a + b + c );</p></body></html> ENDCOMMENT 
                    [
                        position = 8512, 7952
                    ]

                    connect "Trigonometric function3.out" Product1.in1 as Connection1151
                    connect Product1.out Sum3.in as Connection1153
                    connect Product2.out Sum3.in1 as Connection1154
                    connect "Trigonometric function2.out" Product2.in1 as Connection1155
                    connect "Trigonometric function4.out" Product3.in1 as Connection1164
                    connect Constant2.out Sum2.in1 as Connection1148
                    connect Product3.out Sum3.in2 as Connection1171
                    connect "Trigonometric function5.out" Product4.in1 as Connection1173
                    connect Product4.out Sum5.in as Connection1174
                    connect Product5.out Sum5.in1 as Connection1175
                    connect "Trigonometric function6.out" Product5.in1 as Connection1176
                    connect "Trigonometric function7.out" Product6.in1 as Connection1179
                    connect Junction5 "confine phase.out" as Connection1230
                    connect "confine phase.in" theta as Connection1231
                    connect Product6.out Sum5.in2 as Connection1183
                    connect Sum3.out Gain1.in as Connection1186
                    connect Gain1.out q as Connection1187
                    connect Sum5.out Gain2.in as Connection1188
                    connect Gain2.out d as Connection1189
                    connect a Junction3 as Connection1190
                    connect Junction3 Product1.in as Connection1191
                    connect Product4.in Junction3 as Connection1192
                    connect Sum2.in Junction4 as Connection1204
                    connect Sum4.in Junction4 as Connection1206
                    connect Junction4 Junction5 as Connection1207
                    connect "Trigonometric function3.in" Junction6 as Connection1210
                    connect Junction6 Junction5 as Connection1211
                    connect "Trigonometric function5.in" Junction6 as Connection1212
                    connect b Junction7 as Connection1213
                    connect Junction7 Product2.in as Connection1214
                    connect Product5.in Junction7 as Connection1215
                    connect Sum2.out Junction8 as Connection1216
                    connect Junction8 "Trigonometric function2.in" as Connection1217
                    connect "Trigonometric function6.in" Junction8 as Connection1218
                    connect Constant3.out Sum4.in1 as Connection1219
                    connect c Junction9 as Connection1220
                    connect Junction9 Product3.in as Connection1221
                    connect Product6.in Junction9 as Connection1222
                    connect Sum4.out Junction10 as Connection1227
                    connect Junction10 "Trigonometric function4.in" as Connection1228
                    [
                        breakpoints = 7840, 8160
                    ]
                    connect "Trigonometric function7.in" Junction10 as Connection1229
                }
                [
                    position = 7656, 9208
                    size = 80, 136
                ]

                component Subsystem "qd to abc" {
                    layout = dynamic
                    component gen_trigonometric "Trigonometric function3" {
                        trigonometric_fn = "cos"
                    }
                    [
                        position = 8128, 7936
                        hide_name = True
                    ]

                    component gen_product Product1 {
                    }
                    [
                        position = 8224, 7912
                        hide_name = True
                    ]

                    component gen_sum Sum3 {
                    }
                    [
                        position = 8304, 8024
                        hide_name = True
                    ]

                    component gen_product Product2 {
                    }
                    [
                        position = 8216, 8032
                        hide_name = True
                    ]

                    component gen_trigonometric "Trigonometric function2" {
                    }
                    [
                        position = 8128, 8056
                        hide_name = True
                    ]

                    component gen_sum Sum4 {
                    }
                    [
                        position = 7888, 8432
                        hide_name = True
                    ]

                    component src_constant Constant3 {
                        execution_rate = "Ts"
                        value = "2*np.pi/3"
                    }
                    [
                        position = 7800, 8440
                        hide_name = True
                    ]

                    component gen_sum Sum2 {
                        signs = "+-"
                    }
                    [
                        position = 7960, 8184
                        hide_name = True
                    ]

                    component src_constant Constant2 {
                        execution_rate = "Ts"
                        value = "2*np.pi/3"
                    }
                    [
                        position = 7880, 8192
                        hide_name = True
                    ]

                    component gen_c_function "confine phase" {
                        global_variables = "real x;real floor_in;"
                        in_terminal_dimensions = "inherit"
                        in_terminal_dimensions_str = "in inherit"
                        in_terminal_labels = "[(\'in\', True)]"
                        init_fnc = "/*Begin code section*/
floor_in = 0;
/*End code section*/"
                        no_feed_inputs = "[\'\']"
                        no_feed_outputs = "[\'\']"
                        out_terminal_dimensions = "inherit"
                        out_terminal_dimensions_str = "out inherit"
                        out_terminal_labels = "[(\'out\', True)]"
                        output_fnc = "/*Begin code section*/
x = in/6.283185307179586;
floor_in = floor(x);
out = in - (6.283185307179586*floor_in);
/*End code section*/"
                    }
                    [
                        position = 7584, 7936
                        size = 56, 48
                    ]

                    component gen_trigonometric "Trigonometric function4" {
                        trigonometric_fn = "cos"
                    }
                    [
                        position = 8120, 8184
                        hide_name = True
                    ]

                    component gen_product Product3 {
                    }
                    [
                        position = 8216, 8160
                        hide_name = True
                    ]

                    component gen_sum Sum5 {
                    }
                    [
                        position = 8296, 8272
                        hide_name = True
                    ]

                    component gen_product Product4 {
                    }
                    [
                        position = 8208, 8280
                        hide_name = True
                    ]

                    component gen_trigonometric "Trigonometric function5" {
                    }
                    [
                        position = 8120, 8304
                        hide_name = True
                    ]

                    component gen_trigonometric "Trigonometric function6" {
                        trigonometric_fn = "cos"
                    }
                    [
                        position = 8120, 8432
                        hide_name = True
                    ]

                    component gen_product Product5 {
                    }
                    [
                        position = 8216, 8408
                        hide_name = True
                    ]

                    component gen_sum Sum6 {
                    }
                    [
                        position = 8296, 8520
                        hide_name = True
                    ]

                    component gen_product Product6 {
                    }
                    [
                        position = 8208, 8528
                        hide_name = True
                    ]

                    component gen_trigonometric "Trigonometric function7" {
                    }
                    [
                        position = 8120, 8552
                        hide_name = True
                    ]

                    port a {
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8448, 8024
                    ]

                    port b {
                        position = right:2
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8448, 8272
                    ]

                    port theta {
                        position = left:4
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7504, 7936
                    ]

                    port q {
                        position = left:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7648, 7904
                        rotation = down
                        scale = -1, 1
                    ]

                    port d {
                        position = left:2
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7648, 8024
                        rotation = down
                        scale = -1, 1
                    ]

                    port c {
                        position = right:2
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8448, 8520
                    ]

                    junction Junction1 sp
                    [
                        position = 8072, 7936
                    ]

                    junction Junction3 sp
                    [
                        position = 8016, 8024
                    ]

                    junction Junction4 sp
                    [
                        position = 8024, 7904
                    ]

                    junction Junction5 sp
                    [
                        position = 7912, 7936
                    ]

                    junction Junction6 sp
                    [
                        position = 8000, 8184
                    ]

                    junction Junction7 sp
                    [
                        position = 7816, 7904
                    ]

                    junction Junction8 sp
                    [
                        position = 7840, 7936
                    ]

                    junction Junction9 sp
                    [
                        position = 7744, 8024
                    ]

                    junction Junction10 sp
                    [
                        position = 8032, 8432
                    ]

                    comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">a = (q*cos(wt)) + (d*sin(wt));</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">b = (q*cos(wt-(2*pi/3))) + (d*sin(wt-(2*pi/3)));</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">c = (q*cos(wt+(2*pi/3))) + (d*sin(wt+(2*pi/3)));</p></body></html> ENDCOMMENT 
                    [
                        position = 7192, 8280
                    ]

                    connect "Trigonometric function3.out" Product1.in1 as Connection1151
                    connect Product1.out Sum3.in as Connection1153
                    connect Product2.out Sum3.in1 as Connection1154
                    connect "Trigonometric function2.out" Product2.in1 as Connection1155
                    connect Constant2.out Sum2.in1 as Connection1148
                    connect "confine phase.in" theta as Connection1231
                    connect Junction1 "Trigonometric function3.in" as Connection1243
                    connect "Trigonometric function2.in" Junction1 as Connection1244
                    connect Sum3.out a as Connection1245
                    connect "Trigonometric function4.out" Product3.in1 as Connection1246
                    connect Product3.out Sum5.in as Connection1247
                    connect Product4.out Sum5.in1 as Connection1248
                    connect "Trigonometric function5.out" Product4.in1 as Connection1249
                    connect Sum5.out b as Connection1250
                    connect Junction3 Product2.in as Connection1255
                    connect Product4.in Junction3 as Connection1256
                    connect Junction4 Product1.in as Connection1259
                    connect Product3.in Junction4 as Connection1260
                    connect Constant3.out Sum4.in1 as Connection1219
                    connect Junction1 Junction5 as Connection1265
                    [
                        breakpoints = 8072, 7936; 8032, 7936
                    ]
                    connect Sum2.in Junction5 as Connection1267
                    connect Sum2.out Junction6 as Connection1269
                    connect Junction6 "Trigonometric function4.in" as Connection1270
                    connect "Trigonometric function5.in" Junction6 as Connection1271
                    connect "Trigonometric function6.out" Product5.in1 as Connection1272
                    connect Product5.out Sum6.in as Connection1273
                    connect Product6.out Sum6.in1 as Connection1274
                    connect "Trigonometric function7.out" Product6.in1 as Connection1275
                    connect q Junction7 as Connection1276
                    connect Junction7 Junction4 as Connection1277
                    connect Product5.in Junction7 as Connection1278
                    connect Junction5 Junction8 as Connection1280
                    [
                        breakpoints = 7840, 7936
                    ]
                    connect Junction8 "confine phase.out" as Connection1281
                    [
                        breakpoints = 7688, 7936
                    ]
                    connect Sum4.in Junction8 as Connection1282
                    [
                        breakpoints = 7840, 8424; 7840, 8216
                    ]
                    connect d Junction9 as Connection1283
                    connect Junction9 Junction3 as Connection1284
                    [
                        breakpoints = 7960, 8024
                    ]
                    connect Product6.in Junction9 as Connection1285
                    connect Sum4.out Junction10 as Connection1286
                    connect Junction10 "Trigonometric function6.in" as Connection1287
                    connect "Trigonometric function7.in" Junction10 as Connection1288
                    connect Sum6.out c as Connection1289
                }
                [
                    position = 7448, 9072
                    size = 80, 136
                ]

                component gen_c_function "C function1" {
                    global_variables = "real var;"
                    in_terminal_dimensions = "inherit"
                    in_terminal_dimensions_str = "in inherit"
                    in_terminal_labels = "[(\'in\', True)]"
                    init_fnc = "/*Begin code section*/
var = 0;
/*End code section*/"
                    no_feed_inputs = "[\'\']"
                    no_feed_outputs = "[\'\']"
                    out_terminal_dimensions = "inherit"
                    out_terminal_dimensions_str = "out inherit"
                    out_terminal_labels = "[(\'out\', True)]"
                    output_fnc = "/*Begin code section*/
out = var;
/*End code section*/"
                    parameters = "real Ts;"
                    update_fnc = "/*Begin code section*/
var += (Ts*in);
/*End code section*/"
                }
                [
                    position = 7224, 9256
                    hide_name = True
                    size = 80, 48
                ]

                component "core/Voltage Measurement" E_F {
                    execution_rate = "Ts"
                    sig_output = "True"
                }
                [
                    position = 6760, 8600
                    rotation = right
                    size = 64, 32
                ]

                component "core/Signal Controlled Voltage Source" Ea1 {
                }
                [
                    position = 7912, 8880
                    rotation = right
                    scale = -1, 1
                    size = 64, 32
                ]

                component "core/Signal Controlled Voltage Source" Eb1 {
                }
                [
                    position = 8048, 8952
                    rotation = right
                    scale = -1, 1
                    size = 64, 32
                ]

                component "core/Signal Controlled Voltage Source" Ec1 {
                }
                [
                    position = 8184, 9008
                    rotation = right
                    scale = -1, 1
                    size = 64, 32
                ]

                component pas_resistor Ra {
                    resistance = "Rs"
                }
                [
                    position = 7960, 8768
                ]

                component pas_resistor Rb {
                    resistance = "Rs"
                }
                [
                    position = 8112, 8864
                ]

                component pas_resistor Rc {
                    resistance = "Rs"
                }
                [
                    position = 8240, 8960
                ]

                component "core/Current Measurement" Ia1 {
                    execution_rate = "Ts"
                    sig_output = "True"
                }
                [
                    position = 8056, 8768
                    size = 64, 32
                ]

                component "core/Current Measurement" Ib1 {
                    execution_rate = "Ts"
                    sig_output = "True"
                }
                [
                    position = 8208, 8864
                    size = 64, 32
                ]

                component "core/Current Measurement" Ic1 {
                    execution_rate = "Ts"
                    sig_output = "True"
                }
                [
                    position = 8336, 8960
                    size = 64, 32
                ]

                component "core/Four Phase Core Coupling" "Core Coupling MT_out" {
                }
                [
                    position = 8448, 8912
                    size = 12, 352
                ]

                component "core/Single Phase Core Coupling" "Core Coupling MT_in" {
                }
                [
                    position = 6696, 8600
                    size = 12, 256
                ]

                component gen_gain Gain17 {
                    gain = "60/(2*np.pi)"
                }
                [
                    position = 7048, 8928
                    hide_name = True
                ]

                port ground {
                    position = bottom:5
                    kind = pe
                }
                [
                    position = 8504, 9056
                    rotation = down
                ]

                port "+ E_F" {
                    position = left:1
                    kind = pe
                }
                [
                    position = 6640, 8504
                ]

                port Ec {
                    position = right:4
                    kind = pe
                }
                [
                    position = 8504, 8960
                    rotation = down
                ]

                port Ea {
                    position = right:1
                    kind = pe
                }
                [
                    position = 8504, 8768
                    rotation = down
                ]

                port Eb {
                    position = right:2
                    kind = pe
                }
                [
                    position = 8504, 8864
                    rotation = down
                ]

                port "- E_F" {
                    position = left:4
                    kind = pe
                }
                [
                    position = 6640, 8696
                ]

                port Torque {
                    position = top:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 6640, 8880
                ]

                port "Speed (rpm)" {
                    position = top:auto
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 7120, 8928
                ]

                tag Phi_d_a4 {
                    value = "Phi_d_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
<<<<<<< Updated upstream
                    position = 6744, 8904
                    hide_name = True
=======
                    position = 7440, 9072
                    size = 80, 136
>>>>>>> Stashed changes
                ]

                tag I_q_a6 {
                    value = "I_q_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7592, 8912
                    hide_name = True
                    scale = -1, 1
                ]

                tag E_qp1 {
                    value = "E_qp"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 7336, 8632
                    hide_name = True
                ]

<<<<<<< Updated upstream
                tag I_q_a {
                    value = "I_q_a"
                    scope = local
                    kind = sp
                    direction = in
=======
                component "core/Signal Controlled Voltage Source" Ea1 {
                    execution_rate = "Ts"
>>>>>>> Stashed changes
                }
                [
                    position = 7896, 9160
                    hide_name = True
                ]

<<<<<<< Updated upstream
                tag E_qp3 {
                    value = "E_qp"
                    scope = local
                    kind = sp
                    direction = out
=======
                component "core/Signal Controlled Voltage Source" Eb1 {
                    execution_rate = "Ts"
>>>>>>> Stashed changes
                }
                [
                    position = 7112, 8752
                    hide_name = True
                ]

<<<<<<< Updated upstream
                tag Phi_q_a4 {
                    value = "Phi_q_a"
                    scope = local
                    kind = sp
                    direction = out
=======
                component "core/Signal Controlled Voltage Source" Ec1 {
                    execution_rate = "Ts"
>>>>>>> Stashed changes
                }
                [
                    position = 6744, 8976
                    hide_name = True
                ]

                tag I_d_a5 {
                    value = "I_d_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 6744, 8952
                    hide_name = True
                ]

                tag Phi_2q_a1 {
                    value = "Phi_2q_a"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 7312, 8912
                    hide_name = True
                    scale = -1, 1
                ]

                tag I_d_a3 {
                    value = "I_d_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7096, 8632
                    hide_name = True
                ]

                tag Phi_1d_a3 {
                    value = "Phi_1d_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7096, 8664
                    hide_name = True
                ]

                tag I_d_a2 {
                    value = "I_d_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7112, 8784
                    hide_name = True
                ]

                tag I_q_a4 {
                    value = "I_q_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 6744, 8928
                    hide_name = True
                ]

                tag Phi_1d_a1 {
                    value = "Phi_1d_a"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 7352, 8768
                    hide_name = True
                ]

                tag I_d_a {
                    value = "I_d_a"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 7896, 9304
                    hide_name = True
                ]

<<<<<<< Updated upstream
=======
                component gen_gain Gain17 {
                    gain = "60/(2*np.pi)"
                }
                [
                    position = 7048, 8928
                    hide_name = True
                ]

                component "core/Rate Transition" "Rate Transition1" {
                    execution_rate = "Ts"
                }
                [
                    position = 6656, 8880
                    hide_name = True
                    size = 32, 32
                ]

                component "core/Rate Transition" "Rate Transition2" {
                    execution_rate = "Ts_sys"
                }
                [
                    position = 7120, 8928
                    hide_name = True
                    size = 32, 32
                ]

                port ground {
                    position = bottom:5
                    kind = pe
                }
                [
                    position = 8504, 9056
                    rotation = down
                ]

                port "+ E_F" {
                    position = left:1
                    kind = pe
                }
                [
                    position = 6640, 8504
                ]

                port Ec {
                    position = right:4
                    kind = pe
                }
                [
                    position = 8504, 8960
                    rotation = down
                ]

                port Ea {
                    position = right:1
                    kind = pe
                }
                [
                    position = 8504, 8768
                    rotation = down
                ]

                port Eb {
                    position = right:2
                    kind = pe
                }
                [
                    position = 8504, 8864
                    rotation = down
                ]

                port "- E_F" {
                    position = left:4
                    kind = pe
                }
                [
                    position = 6640, 8696
                ]

                port Torque {
                    position = top:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 6592, 8880
                ]

                port "Speed (rpm)" {
                    position = top:auto
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 7224, 8928
                ]

                tag Phi_d_a4 {
                    value = "Phi_d_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 6744, 8904
                    hide_name = True
                ]

                tag I_q_a6 {
                    value = "I_q_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7592, 8912
                    hide_name = True
                    scale = -1, 1
                ]

                tag E_qp1 {
                    value = "E_qp"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 7336, 8632
                    hide_name = True
                ]

                tag I_q_a {
                    value = "I_q_a"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 7896, 9160
                    hide_name = True
                ]

                tag E_qp3 {
                    value = "E_qp"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7112, 8752
                    hide_name = True
                ]

                tag Phi_q_a4 {
                    value = "Phi_q_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 6744, 8976
                    hide_name = True
                ]

                tag I_d_a5 {
                    value = "I_d_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 6744, 8952
                    hide_name = True
                ]

                tag Phi_2q_a1 {
                    value = "Phi_2q_a"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 7312, 8912
                    hide_name = True
                    scale = -1, 1
                ]

                tag I_d_a3 {
                    value = "I_d_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7096, 8632
                    hide_name = True
                ]

                tag Phi_1d_a3 {
                    value = "Phi_1d_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7096, 8664
                    hide_name = True
                ]

                tag I_d_a2 {
                    value = "I_d_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7112, 8784
                    hide_name = True
                ]

                tag I_q_a4 {
                    value = "I_q_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 6744, 8928
                    hide_name = True
                ]

                tag Phi_1d_a1 {
                    value = "Phi_1d_a"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 7352, 8768
                    hide_name = True
                ]

                tag I_d_a {
                    value = "I_d_a"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 7896, 9304
                    hide_name = True
                ]

>>>>>>> Stashed changes
                tag Phi_d_a1 {
                    value = "Phi_d_a"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 7808, 8656
                    hide_name = True
                ]

                tag Phi_q_a1 {
                    value = "Phi_q_a"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 7456, 8768
                    hide_name = True
                    scale = -1, 1
                ]

                tag Phi_2q_a4 {
                    value = "Phi_2q_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7768, 8760
                    hide_name = True
                    scale = -1, 1
                ]

                tag E_qp4 {
                    value = "E_qp"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7456, 8664
                    hide_name = True
                ]

                tag Phi_1d_a4 {
                    value = "Phi_1d_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7456, 8632
                    hide_name = True
                ]

                tag I_q_a7 {
                    value = "I_q_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7768, 8728
                    hide_name = True
                    scale = -1, 1
                ]

                tag I_d_a7 {
                    value = "I_d_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7456, 8600
                    hide_name = True
                ]

                tag Phi_q_a6 {
                    value = "Phi_q_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7120, 9048
                    hide_name = True
                ]

                tag Phi_d_a6 {
                    value = "Phi_d_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7120, 9024
                    hide_name = True
                ]

                tag Phi_q_a5 {
                    value = "Phi_q_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7120, 9136
                    hide_name = True
                ]

                tag Phi_d_a5 {
                    value = "Phi_d_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7120, 9160
                    hide_name = True
                ]

                tag V_a {
                    value = "E_a"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 7552, 9024
                    hide_name = True
                ]

                tag V_b {
                    value = "E_b"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 7552, 9072
                    hide_name = True
                ]

                tag V_c {
                    value = "E_c"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 7552, 9120
                    hide_name = True
                ]

                tag I_a1 {
                    value = "I_a"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7552, 9160
                    hide_name = True
                ]

                tag I_b1 {
                    value = "I_b"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7552, 9192
                    hide_name = True
                ]

                tag I_c1 {
                    value = "I_c"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7552, 9224
                    hide_name = True
                ]

                tag V_a1 {
                    value = "E_a"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7832, 8880
                    hide_name = True
                ]

                tag V_b1 {
                    value = "E_b"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7968, 8952
                    hide_name = True
                ]

                tag V_c1 {
                    value = "E_c"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8104, 9008
                    hide_name = True
                ]

                tag I_a {
                    value = "I_a"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 8112, 8728
                    hide_name = True
                ]

                tag I_b {
                    value = "I_b"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 8264, 8824
                    hide_name = True
                ]

                tag I_c {
                    value = "I_c"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 8392, 8920
                    hide_name = True
                ]

                junction Junction7 sp
                [
                    position = 7288, 8632
                ]

                junction Junction10 sp
                [
                    position = 7296, 8768
                ]

                junction Junction11 sp
                [
                    position = 7368, 8912
                ]

                junction Junction20 sp
                [
                    position = 7008, 8928
                ]

                junction Junction26 sp
                [
                    position = 7760, 8632
                ]

                junction Junction27 sp
                [
                    position = 7504, 8744
                ]

                junction Junction74 sp
                [
                    position = 7288, 9024
                ]

                junction Junction85 sp
                [
                    position = 7288, 9136
                ]

                junction Junction88 sp
                [
                    position = 7824, 9256
                ]

                junction Junction89 sp
                [
                    position = 7392, 9256
                ]

                junction Junction91 sp
                [
                    position = 7072, 9008
                ]

                junction Junction92 sp
                [
                    position = 7072, 9120
                ]

                junction Junction93 sp
                [
                    position = 7824, 9160
                ]

                junction Junction94 pe
                [
                    position = 8184, 9056
                ]

                junction Junction95 pe
                [
                    position = 8048, 9056
                ]

                connect "Core Coupling MT_out.b_out" Eb as Connection1429
                connect "Core Coupling MT_out.c_out" Ec as Connection1427
                connect "Core Coupling MT_out.d_out" ground as Connection1425
                connect "Core Coupling MT_out.a_out" Ea as Connection1428
                connect "Core Coupling MT_in.b_in" "- E_F" as Connection1430
                connect "Core Coupling MT_in.a_in" "+ E_F" as Connection1426
                connect E_qp.E_qp3 Junction7 as Connection128
                connect E_qp3 Phi_1d_a.E_qp as Connection34
                connect E_qp_M.in Junction7 as Connection130
                connect Junction10 Phi_1d_a1 as Connection138
                connect Junction11 Phi_2q_a.Phi_2q_a as Connection141
                connect Junction20 Gain1.in as Connection180
                connect Junction7 E_qp1 as Connection129
                connect Phi_1d_a.Phi_1d_a Junction10 as Connection137
                connect Phi_1d_a3 E_qp.Phi_1d_a as Connection36
                connect Phi_1d_a_M.in Junction10 as Connection139
                connect Phi_2q_a1 Junction11 as Connection140
                connect Phi_2q_a_M.in Junction11 as Connection142
                connect Phi_d_a4 w_m.Phi_d_a as Connection30
                connect Phi_q_a4 w_m.Phi_q_a as Connection25
                connect w_m.w_m2 Junction20 as Connection179
                connect E_qp4 "Phi_d_a 2.E_qp" as Connection97
                connect Phi_1d_a4 "Phi_d_a 2.Phi_1d_a" as Connection96
                connect Phi_2q_a4 "Phi_q_a 2.Phi_2q_a" as Connection88
                connect "Phi_d_a 2.Phi_d_a" Junction26 as Connection198
                connect Junction26 Phi_d_a_M.in as Connection199
                [
                    breakpoints = 7760, 8632; 7760, 8592
                ]
                connect Phi_d_a1 Junction26 as Connection200
                connect "Phi_q_a 2.Phi_q_a" Junction27 as Connection202
                connect Junction27 Phi_q_a1 as Connection203
                connect Phi_q_a_M.in Junction27 as Connection204
                connect Phi_d_a6 V_qG2.Phi_d_a as Connection110
                connect Phi_q_a6 V_qG2.Phi_q_a as Connection109
                connect Phi_d_a5 V_dG2.Phi_d_a as Connection106
                connect Phi_q_a5 V_dG2.Phi_q_a as Connection107
                connect I_d_a3 E_qp.I_d_a as Connection731
                connect I_d_a2 Phi_1d_a.I_d_a as Connection732
                connect I_q_a7 "Phi_q_a 2.I_q_a" as Connection734
                connect I_q_a4 w_m.I_q_a as Connection735
                connect I_d_a5 w_m.I_d_a as Connection736
                connect Phi_2q_a.I_q_a I_q_a6 as Connection737
                connect I_d_a7 "Phi_d_a 2.I_d_a" as Connection738
                connect V_qG2.V_qG Junction74 as Connection770
                connect Junction74 Gain8.in as Connection771
                connect Eq_phi.in Junction74 as Connection772
                connect Gain9.in Junction85 as Connection1274
                connect Junction85 V_dG2.V_d_a as Connection1275
                connect Ed_phi.in Junction85 as Connection1276
                connect I_a1 "abc to qd.a" as Connection1293
                connect I_b1 "abc to qd.b" as Connection1294
                connect I_c1 "abc to qd.c" as Connection1295
                connect "abc to qd.q" Gain10.in as Connection1296
                connect "abc to qd.d" Gain11.in as Connection1297
                connect Gain8.out "qd to abc.q" as Connection1306
                connect "qd to abc.a" V_a as Connection1307
                connect "qd to abc.b" V_b as Connection1308
                connect "qd to abc.c" V_c as Connection1309
                connect "qd to abc.d" Gain9.out as Connection1310
                connect I_d_a1.in Junction88 as Connection1317
                connect Junction88 Gain11.out as Connection1318
                connect I_d_a Junction88 as Connection1319
                connect "C function1.out" Junction89 as Connection1323
                connect Junction89 "qd to abc.theta" as Connection1324
                connect "abc to qd.theta" Junction89 as Connection1325
                connect E_F.out E_qp.E_F as Connection1436
                connect V_qG2.w_e Junction91 as Connection1443
                connect Junction91 Gain1.out as Connection1444
                connect V_dG2.w_e Junction92 as Connection1446
                connect Junction92 Junction91 as Connection1447
                connect "C function1.in" Junction92 as Connection1448
                connect Gain10.out Junction93 as Connection1450
                connect Junction93 I_q_a as Connection1451
                connect I_q_a1.in Junction93 as Connection1452
                connect Ia1.p_node Ra.n_node as Connection237
                connect Rb.n_node Ib1.p_node as Connection238
                connect Rc.n_node Ic1.p_node as Connection240
                connect V_b1 Eb1.in as Connection391
                connect V_c1 Ec1.in as Connection392
                connect I_a Ia1.out as Connection1201
                connect I_b Ib1.out as Connection1202
                connect I_c Ic1.out as Connection1203
                connect Ec1.p_node Rc.p_node as Connection1513
                [
                    breakpoints = 8184, 8960
                ]
                connect Ra.p_node Ea1.p_node as Connection1514
                [
                    breakpoints = 7912, 8768
                ]
                connect Rb.p_node Eb1.p_node as Connection1515
                [
                    breakpoints = 8048, 8864
                ]
                connect "Core Coupling MT_in.b_out" E_F.n_node as Connection1422
                connect Ic1.n_node "Core Coupling MT_out.c_in" as Connection1550
                connect "Core Coupling MT_in.a_out" E_F.p_node as Connection1424
                connect Ec1.n_node Junction94 as Connection1552
                connect Junction94 "Core Coupling MT_out.d_in" as Connection1553
                [
                    breakpoints = 8184, 9056; 8304, 9056; 8304, 9056; 8424, 9056
                ]
                connect Ib1.n_node "Core Coupling MT_out.b_in" as Connection1555
                connect Eb1.n_node Junction95 as Connection1556
                connect Junction95 Junction94 as Connection1557
                connect Ea1.n_node Junction95 as Connection1558
                connect Ia1.n_node "Core Coupling MT_out.a_in" as Connection1559
                connect V_a1 Ea1.in as Connection1560
                connect Gain17.in Junction20 as Connection1563
                [
                    breakpoints = 7008, 8928; 7008, 8928
                ]
                connect Torque "Rate Transition1.in" as Connection1564
                connect "Rate Transition1.out" w_m.T_M as Connection1565
                connect "Speed (rpm)" "Rate Transition2.out" as Connection1566
                connect "Rate Transition2.in" Gain17.out as Connection1567
            }
            [
                position = 7104, 8272
                size = 208, 216
            ]

            component Subsystem "BE1-25A Synchronizer" {
                layout = dynamic
                component gen_trigonometric "Trigonometric function2" {
                    trigonometric_fn = "atan2"
                }
                [
                    position = 7456, 8088
                    hide_name = True
                ]

                component gen_limiter Limit2 {
                    lower_limit = "1e-12"
                }
                [
                    position = 7384, 8104
                    hide_name = True
                ]

                component src_constant Constant9 {
                    execution_rate = "Ts_sys"
                    value = "5e-2"
                }
                [
                    position = 8456, 8224
                    hide_name = True
                ]

                component gen_c_function "BE1-25A Synchronizer1" {
                    in_terminal_dimensions = "inherit"
                    in_terminal_dimensions_str = "dV inherit"
                    in_terminal_labels = "[(\'dV\', True)]"
                    in_terminal_properties = "real dV;"
                    no_feed_inputs = "[\'\']"
                    no_feed_outputs = "[\'\']"
                    out_terminal_dimensions = "inherit"
                    out_terminal_dimensions_str = "del_V inherit"
                    out_terminal_labels = "[(\'del_V\', True)]"
                    out_terminal_properties = "real del_V;"
                    output_fnc = "/*Begin code section*/
if (dV>maxV_slip)
{
    del_V = maxV_pds;
}
else if ((dV<=maxV_slip) && (dV>0))
{
    del_V = maxV_pds*dV/maxV_slip;
}
else if ((dV<=0) && (dV>-1*(maxV_slip-minV_slip)))
{
    del_V = 0;
    //del_V = maxV_pds*dV/min_slip;
}
else if ((dV <= (-1*(maxV_slip-minV_slip)))&&(dV > (-1*maxV_slip)))
{
    del_V= maxV_pds*(dV+(maxV_slip-minV_slip))/minV_slip;
}
else if (dV <= (-1*maxV_slip))
{
    del_V = -1*maxV_pds;
}
/*End code section*/"
                    parameters = "real maxV_slip;real minV_slip;real maxV_pds;"
                }
                [
                    position = 8352, 8616
                    hide_name = True
                    size = 96, 96
                ]

                component gen_abs Abs2 {
                }
                [
                    position = 8456, 8192
                    hide_name = True
                ]

                component gen_gain Gain4 {
                    gain = "1/w_0"
                }
                [
                    position = 7832, 8368
                    hide_name = True
                ]

                component gen_trigonometric "Trigonometric function1" {
                    trigonometric_fn = "atan2"
                }
                [
                    position = 7456, 8000
                    hide_name = True
                ]

                component gen_c_function "Hold after connect" {
                    global_variables = "real var;"
                    in_terminal_dimensions = "inherit;inherit;inherit"
                    in_terminal_dimensions_str = "in inherit;connect inherit;MT_sync inherit"
                    in_terminal_labels = "[(\'in\', True), (\'connect\', True), (\'MT_sync\', True)]"
                    in_terminal_properties = "real in;int connect;inherit MT_sync;"
                    init_fnc = "/*Begin code section*/
var = 0;
/*End code section*/"
                    no_feed_inputs = "[\'\']"
                    no_feed_outputs = "[\'\']"
                    out_terminal_dimensions = "inherit"
                    out_terminal_dimensions_str = "out inherit"
                    out_terminal_labels = "[(\'out\', True)]"
                    output_fnc = "/*Begin code section*/
out = var;
/*End code section*/"
                    update_fnc = "/*Begin code section*/
if ((connect==0)&&(MT_sync==1))
    var = in;
else if (MT_sync==0)
    var =0;
/*End code section*/"
                }
                [
                    position = 8352, 8416
                    hide_name = True
                    size = 96, 96
                ]

                component gen_c_function "Hold after connect1" {
                    global_variables = "real var;"
                    in_terminal_dimensions = "inherit;inherit;inherit;inherit"
                    in_terminal_dimensions_str = "in inherit;connect inherit;MT_sync inherit;exc_state inherit"
                    in_terminal_labels = "[(\'in\', True), (\'connect\', True), (\'MT_sync\', True), (\'exc_state\', True)]"
                    in_terminal_properties = "real in;int connect;inherit MT_sync;inherit exc_state;"
                    init_fnc = "/*Begin code section*/
var = 0;
/*End code section*/"
                    no_feed_inputs = "[\'\']"
                    no_feed_outputs = "[\'\']"
                    out_terminal_dimensions = "inherit"
                    out_terminal_dimensions_str = "out inherit"
                    out_terminal_labels = "[(\'out\', True)]"
                    output_fnc = "/*Begin code section*/
out = var;
/*End code section*/"
                    update_fnc = "/*Begin code section*/
if ((connect==0)&&(exc_state==1)&&(MT_sync==1))
    var = in;
else if (MT_sync==0)
    var =0;
/*End code section*/"
                }
                [
                    position = 8576, 8664
                    hide_name = True
                    size = 96, 136
                ]

                component gen_c_function "confine phase" {
                    in_terminal_dimensions = "inherit"
                    in_terminal_dimensions_str = "in inherit"
                    in_terminal_labels = "[(\'in\', True)]"
                    no_feed_inputs = "[\'\']"
                    no_feed_outputs = "[\'\']"
                    out_terminal_dimensions = "inherit"
                    out_terminal_dimensions_str = "out inherit"
                    out_terminal_labels = "[(\'out\', True)]"
                    output_fnc = "/*Begin code section*/
if (in > 0)
{
    if (in > (6.283185307179586/2))
        out = in - 6.283185307179586;
    else
        out = in;
}
if (in < 0)
{
    if (in < (-6.283185307179586/2))
        out = in + 6.283185307179586;
    else
        out = in;
}
/*End code section*/"
                }
                [
                    position = 7824, 8048
                    size = 56, 48
                ]

                component gen_sum Sum5 {
                }
                [
                    position = 7344, 8352
                    hide_name = True
                ]

                component gen_probe frequency_diff3 {
                }
                [
                    position = 7920, 8128
                    scale = -1, 1
                ]

                component gen_product Product4 {
                }
                [
                    position = 7264, 8384
                    hide_name = True
                ]

                component gen_digital_probe "Digital Probe3" {
                    override_signal_name = "True"
                    signal_name = "ang_sync3"
                }
                [
                    position = 8616, 8040
                    hide_name = True
                ]

                component src_constant Constant7 {
                    execution_rate = "Ts_sys"
                    value = "1e-3"
                }
                [
                    position = 8088, 8112
                    hide_name = True
                ]

                component gen_sum Sum1 {
                    signs = "-+"
                }
                [
                    position = 7736, 8048
                    hide_name = True
                ]

                component gen_product Product3 {
                }
                [
                    position = 7264, 8320
                    hide_name = True
                ]

                component tm_delay "Unit Delay2" {
                }
                [
                    position = 7616, 8648
                    rotation = right
                    hide_name = True
                ]

                component gen_sum Sum2 {
                    signs = "-+"
                }
                [
                    position = 7920, 8392
                    hide_name = True
                ]

                component gen_rel_op "Relational operator1" {
                    relational_op = ">"
                }
                [
                    position = 8160, 8040
                    hide_name = True
                ]

                component gen_rel_op "Relational operator4" {
                    relational_op = "<"
                }
                [
                    position = 8520, 8208
                    hide_name = True
                ]

                component gen_abs Abs4 {
                }
                [
                    position = 7920, 8048
                    hide_name = True
                ]

                component gen_probe volt_diff3 {
                }
                [
                    position = 8352, 8512
                ]

                component src_constant Constant6 {
                    execution_rate = "Ts_sys"
                    value = "5e-3"
                }
                [
                    position = 8056, 8024
                    hide_name = True
                ]

                component gen_digital_probe "Digital Probe1" {
                    override_signal_name = "True"
                    signal_name = "gridconnect2"
                }
                [
                    position = 9104, 8208
                    hide_name = True
                ]

                component gen_logic_op "Logical operator2" {
                    inputs = "4"
                    operator = "NOT"
                }
                [
                    position = 9040, 8248
                    rotation = right
                    hide_name = True
                ]

                component gen_gain Gain6 {
                    gain = "-1/V_DQ"
                }
                [
                    position = 7376, 8592
                    hide_name = True
                ]

                component gen_digital_probe "Digital Probe4" {
                    override_signal_name = "True"
                    signal_name = "freq_sync3"
                }
                [
                    position = 8616, 8008
                    hide_name = True
                ]

                component gen_digital_probe "Digital Probe5" {
                    override_signal_name = "True"
                    signal_name = "volt_sync3"
                }
                [
                    position = 8616, 8072
                    hide_name = True
                ]

                component gen_logic_op "Logical operator1" {
                    inputs = "3"
                }
                [
                    position = 8616, 8120
                    hide_name = True
                ]

                component gen_abs Abs5 {
                }
                [
                    position = 8056, 8128
                    hide_name = True
                ]

                component gen_probe angle_diff3 {
                }
                [
                    position = 8056, 7952
                ]

                component gen_sum Sum3 {
                    signs = "-+"
                }
                [
                    position = 8392, 8192
                    hide_name = True
                    scale = 1, -1
                ]

                component gen_gain Gain5 {
                    gain = "1/V_DQ"
                }
                [
                    position = 7336, 8544
                    hide_name = True
                ]

                component gen_rel_op "Relational operator2" {
                    relational_op = ">"
                }
                [
                    position = 8160, 8120
                    hide_name = True
                ]

                component Subsystem PLL {
                    layout = dynamic
                    component gen_pid_controller "PID controller1" {
                        controller_type = "PI"
                        enb_anti_windup_out = "True"
                        enb_output_limit_out = "True"
                        int_init_value = "w_0"
                        ki = "Ki_PLL"
                        kp = "Kp_PLL"
                        lower_sat_lim = "PLL_min"
                        upper_sat_lim = "PLL_max"
                    }
                    [
                        position = 8128, 8152
                        hide_name = True
                    ]

                    component gen_c_function "C function1" {
                        global_variables = "real var;"
                        in_terminal_dimensions = "inherit"
                        in_terminal_dimensions_str = "in inherit"
                        in_terminal_labels = "[(\'in\', True)]"
                        init_fnc = "/*Begin code section*/
var = 0;
/*End code section*/"
                        no_feed_inputs = "[\'\']"
                        no_feed_outputs = "[\'\']"
                        out_terminal_dimensions = "inherit"
                        out_terminal_dimensions_str = "out inherit"
                        out_terminal_labels = "[(\'out\', True)]"
                        output_fnc = "/*Begin code section*/
out = var;
/*End code section*/"
                        parameters = "real Ts_sys;"
                        update_fnc = "/*Begin code section*/
var += (Ts_sys*in);
/*End code section*/"
                    }
                    [
                        position = 8304, 8152
                        hide_name = True
                        size = 80, 48
                    ]

                    component gen_c_function "confine phase" {
                        global_variables = "real x;real floor_in;"
                        in_terminal_dimensions = "inherit"
                        in_terminal_dimensions_str = "in inherit"
                        in_terminal_labels = "[(\'in\', True)]"
                        init_fnc = "/*Begin code section*/
floor_in = 0;
/*End code section*/"
                        no_feed_inputs = "[\'\']"
                        no_feed_outputs = "[\'\']"
                        out_terminal_dimensions = "inherit"
                        out_terminal_dimensions_str = "out inherit"
                        out_terminal_labels = "[(\'out\', True)]"
                        output_fnc = "/*Begin code section*/
x = in/6.283185307179586;
floor_in = floor(x);
out = in - (6.283185307179586*floor_in);
/*End code section*/"
                    }
                    [
                        position = 8408, 8152
                        size = 56, 48
                    ]

                    port wt {
                        label = "wt"
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8496, 8152
                    ]

                    port w {
                        label = "w"
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8304, 8208
                    ]

                    port d {
                        label = "-d"
                        position = left:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8064, 8152
                    ]

                    junction Junction1 sp
                    [
                        position = 8240, 8152
                    ]

                    connect wt "confine phase.out" as Connection14
                    connect "confine phase.in" "C function1.out" as Connection16
                    connect d "PID controller1.in" as Connection20
                    connect w Junction1 as Connection24
                    connect Junction1 "C function1.in" as Connection25
                    [
                        breakpoints = 8240, 8152
                    ]
                    connect "PID controller1.out" Junction1 as Connection26
                }
                [
                    position = 7544, 8592
                    scale = 1, -1
                    size = 96, 56
                ]

                component gen_limiter Limit1 {
                    lower_limit = "1e-12"
                }
                [
                    position = 7384, 8016
                    hide_name = True
                ]

                component gen_digital_probe "Digital Probe6" {
                    override_signal_name = "True"
                    signal_name = "griddisconnect2"
                }
                [
                    position = 9104, 8280
                    hide_name = True
                ]

                component gen_math_fnc "Mathematical function2" {
                    mathematical_fn = "sqrt"
                }
                [
                    position = 7416, 8352
                    hide_name = True
                ]

                component gen_probe Vd_G {
                }
                [
                    position = 7328, 8480
                    scale = -1, 1
                ]

                component gen_probe Vq_G {
                }
                [
                    position = 7432, 8472
                    scale = -1, 1
                ]

                component gen_probe del_w {
                }
                [
                    position = 8496, 8352
                ]

                component gen_probe del_V {
                }
                [
                    position = 8744, 8600
                ]

                component gen_c_function "stay connected1" {
                    global_variables = "real connect;"
                    in_terminal_dimensions = "inherit;inherit;inherit"
                    in_terminal_dimensions_str = "ready inherit;connectMT inherit;MTsync inherit"
                    in_terminal_labels = "[(\'ready\', True), (\'connectMT\', True), (\'MTsync\', True)]"
                    in_terminal_properties = "inherit ready;inherit connectMT;inherit MTsync;"
                    init_fnc = "/*Begin code section*/
connect = 0;
/*End code section*/"
                    no_feed_inputs = "[\'\']"
                    no_feed_outputs = "[\'\']"
                    out_terminal_dimensions = "inherit"
                    out_terminal_dimensions_str = "out inherit"
                    out_terminal_labels = "[(\'out\', True)]"
                    out_terminal_properties = "int out;"
                    output_fnc = "/*Begin code section*/
out = connect;
/*End code section*/"
                    parameters = "real Ts;"
                    update_fnc = "/*Begin code section*/
if ((ready==1)&&(connectMT==1)&&(MTsync==1)){
    connect = 1;
}
else if((connectMT==0)||(MTsync==0)){
    connect = 0;
}
/*End code section*/"
                }
                [
                    position = 8760, 8176
                    hide_name = True
                    size = 160, 104
                ]

                component gen_probe "|V|" {
                }
                [
                    position = 7512, 8304
                ]

                component gen_probe w_G {
                }
                [
                    position = 7920, 8352
                    rotation = down
                    scale = -1, 1
                ]

                component gen_probe w_bus {
                }
                [
                    position = 7920, 8432
                ]

                component gen_probe E_d {
                }
                [
                    position = 7496, 8720
                ]

                component gen_probe E_q {
                }
                [
                    position = 7496, 8848
                    rotation = down
                    scale = -1, 1
                ]

                component gen_gain Gain7 {
                    gain = "1/V_DQ"
                }
                [
                    position = 7336, 8736
                    hide_name = True
                ]

                component gen_gain Gain12 {
                    gain = "-1/V_DQ"
                }
                [
                    position = 7336, 8832
                    hide_name = True
                ]

                component tm_delay "Unit Delay5" {
                }
                [
                    position = 9000, 8176
                    hide_name = True
                ]

                component gen_c_function "BE1-25A Synchronizer2" {
                    in_terminal_dimensions = "inherit"
                    in_terminal_dimensions_str = "df inherit"
                    in_terminal_labels = "[(\'df\', True)]"
                    in_terminal_properties = "real df;"
                    no_feed_inputs = "[\'\']"
                    no_feed_outputs = "[\'\']"
                    out_terminal_dimensions = "inherit"
                    out_terminal_dimensions_str = "del_w inherit"
                    out_terminal_labels = "[(\'del_w\', True)]"
                    out_terminal_properties = "real del_w;"
                    output_fnc = "/*Begin code section*/
if (df>maxw_slip)
{
    del_w = 1.125*maxw_pds;
}
else if ((df<=maxw_slip) && (df>0))
{
    del_w = maxw_pds*df/maxw_slip + (0.125*maxw_pds);
    //del_w = maxw_pds*(df+1e-4)/max_slip + (angle_slip);
}
else if ((df<=0) && (df > (-minw_slip)))
{
    del_w = (0.125*maxw_pds)*(df)/minw_slip + (0.125*maxw_pds);
    //del_w = maxw_pds*((-1*df)+1e-4)/min_slip  + (angle_slip);
}
else if ((df <= (-1*minw_slip))&&(df > (-1*maxw_slip)))
{
    del_w = 0;
    //del_w = maxw_pds*((min_slip)+1e-4)/min_slip  + (angle_slip);
}
else if (df <= (-1*maxw_slip))
{
    del_w = (maxw_slip+df)*maxw_pds/maxw_slip;
}
/*End code section*/"
                    parameters = "real maxw_pds;real maxw_slip;real minw_slip;"
                }
                [
                    position = 8112, 8392
                    hide_name = True
                    scale = 1, -1
                    size = 128, 112
                ]

                component gen_c_function "BE1-25A Synchronizer (modified)" {
                    in_terminal_dimensions = "inherit"
                    in_terminal_dimensions_str = "df inherit"
                    in_terminal_labels = "[(\'df\', True)]"
                    in_terminal_properties = "real df;"
                    no_feed_inputs = "[\'\']"
                    no_feed_outputs = "[\'\']"
                    out_terminal_dimensions = "inherit"
                    out_terminal_dimensions_str = "del_w inherit"
                    out_terminal_labels = "[(\'del_w\', True)]"
                    out_terminal_properties = "real del_w;"
                    output_fnc = "/*Begin code section*/
if (df>maxw_slip)
{
    del_w = (df-maxw_slip)*maxw_pds/maxw_slip;
}
else if ((df <= maxw_slip)&&(df > minw_slip))
{
    del_w = 0;
}
else if ((df<=minw_slip) && (df > 0))
{
    del_w = (0.125*maxw_pds)*(df)/minw_slip - (0.125*maxw_pds);
}
else if ((df<=0) && (df>(-1*maxw_slip)))
{
    del_w = maxw_pds*df/maxw_slip - (0.125*maxw_pds);
}
else if (df <= (-1*maxw_slip))
{
    del_w = -1.125*maxw_pds;
}
/*End code section*/"
                    parameters = "real Ts;real maxw_pds;real maxw_slip;real minw_slip;"
                }
                [
                    position = 9112, 8016
                    scale = 1, -1
                    size = 128, 112
                ]

                component gen_probe thetaPLL {
                }
                [
                    position = 7672, 8704
                ]

                component gen_probe omegaPLL {
                }
                [
                    position = 7680, 8616
                ]

                component gen_probe theta_E {
                }
                [
                    position = 7632, 7960
                ]

                component gen_probe theta_V {
                }
                [
                    position = 7632, 8048
                ]

                component gen_c_function "Hold after connect2" {
                    global_variables = "real var;"
                    in_terminal_dimensions = "inherit;inherit"
                    in_terminal_dimensions_str = "in inherit;connect inherit"
                    in_terminal_labels = "[(\'in\', True), (\'connect\', True)]"
                    in_terminal_properties = "real in;int connect;"
                    init_fnc = "/*Begin code section*/
var = 0;
/*End code section*/"
                    no_feed_inputs = "[\'\']"
                    no_feed_outputs = "[\'\']"
                    out_terminal_dimensions = "inherit"
                    out_terminal_dimensions_str = "out inherit"
                    out_terminal_labels = "[(\'out\', True)]"
                    output_fnc = "/*Begin code section*/
out = var;
/*End code section*/"
                    update_fnc = "/*Begin code section*/
if (connect==0)
    var = in;
/*End code section*/"
                }
                [
                    position = 8688, 8432
                    hide_name = True
                    size = 80, 88
                ]

                component gen_sum Sum9 {
                }
                [
                    position = 8584, 8408
                    hide_name = True
                ]

                component gen_c_function "Hold after connect3" {
                    global_variables = "real var;"
                    in_terminal_dimensions = "inherit;inherit"
                    in_terminal_dimensions_str = "in inherit;connect inherit"
                    in_terminal_labels = "[(\'in\', True), (\'connect\', True)]"
                    in_terminal_properties = "real in;int connect;"
                    init_fnc = "/*Begin code section*/
var = 0;
/*End code section*/"
                    no_feed_inputs = "[\'\']"
                    no_feed_outputs = "[\'\']"
                    out_terminal_dimensions = "inherit"
                    out_terminal_dimensions_str = "out inherit"
                    out_terminal_labels = "[(\'out\', True)]"
                    output_fnc = "/*Begin code section*/
out = var;
/*End code section*/"
                    update_fnc = "/*Begin code section*/
if (connect==0)
    var = in;
/*End code section*/"
                }
                [
                    position = 8936, 8680
                    hide_name = True
                    size = 80, 88
                ]

                component gen_sum Sum10 {
                }
                [
                    position = 8832, 8656
                    hide_name = True
                ]

                component gen_gain Gain13 {
                    gain = "1/w_0"
                }
                [
                    position = 7672, 8584
                    hide_name = True
                ]

                component Subsystem "abc to qd" {
                    layout = dynamic
                    component gen_trigonometric "Trigonometric function3" {
                        trigonometric_fn = "cos"
                    }
                    [
                        position = 8128, 7936
                        hide_name = True
                    ]

                    component gen_product Product1 {
                    }
                    [
                        position = 8224, 7912
                        hide_name = True
                    ]

                    component gen_sum Sum3 {
                        signs = "3"
                    }
                    [
                        position = 8304, 8024
                        hide_name = True
                    ]

                    component gen_product Product2 {
                    }
                    [
                        position = 8216, 8024
                        hide_name = True
                    ]

                    component gen_product Product3 {
                    }
                    [
                        position = 8216, 8136
                        hide_name = True
                    ]

                    component gen_trigonometric "Trigonometric function2" {
                        trigonometric_fn = "cos"
                    }
                    [
                        position = 8128, 8048
                        hide_name = True
                    ]

                    component gen_trigonometric "Trigonometric function4" {
                        trigonometric_fn = "cos"
                    }
                    [
                        position = 8128, 8160
                        hide_name = True
                    ]

                    component gen_sum Sum4 {
                    }
                    [
                        position = 7736, 8160
                        hide_name = True
                    ]

                    component src_constant Constant3 {
                        execution_rate = "Ts_sys"
                        value = "2*np.pi/3"
                    }
                    [
                        position = 7648, 8168
                        hide_name = True
                    ]

                    component gen_sum Sum2 {
                        signs = "+-"
                    }
                    [
                        position = 7736, 8048
                        hide_name = True
                    ]

                    component src_constant Constant2 {
                        execution_rate = "Ts_sys"
                        value = "2*np.pi/3"
                    }
                    [
                        position = 7648, 8056
                        hide_name = True
                    ]

                    component gen_trigonometric "Trigonometric function5" {
                    }
                    [
                        position = 8120, 8256
                        hide_name = True
                    ]

                    component gen_product Product4 {
                    }
                    [
                        position = 8216, 8224
                        hide_name = True
                    ]

                    component gen_sum Sum5 {
                        signs = "3"
                    }
                    [
                        position = 8304, 8336
                        hide_name = True
                    ]

                    component gen_product Product5 {
                    }
                    [
                        position = 8200, 8336
                        hide_name = True
                    ]

                    component gen_product Product6 {
                    }
                    [
                        position = 8200, 8448
                        hide_name = True
                    ]

                    component gen_trigonometric "Trigonometric function6" {
                    }
                    [
                        position = 8120, 8368
                        hide_name = True
                    ]

                    component gen_trigonometric "Trigonometric function7" {
                    }
                    [
                        position = 8120, 8480
                        hide_name = True
                    ]

                    component gen_gain Gain1 {
                        gain = "2/3"
                    }
                    [
                        position = 8376, 8024
                        hide_name = True
                    ]

                    component gen_gain Gain2 {
                        gain = "2/3"
                    }
                    [
                        position = 8376, 8336
                        hide_name = True
                    ]

                    port q {
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8448, 8024
                    ]

                    port d {
                        position = right:2
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8448, 8336
                    ]

                    port theta {
                        position = left:4
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7512, 7936
                    ]

                    port a {
                        position = left:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7648, 7904
                        rotation = down
                        scale = -1, 1
                    ]

                    port b {
                        position = left:2
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7648, 8016
                        rotation = down
                        scale = -1, 1
                    ]

                    port c {
                        position = left:3
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7648, 8128
                        rotation = down
                        scale = -1, 1
                    ]

                    junction Junction11 sp
                    [
                        position = 7688, 7936
                    ]

                    junction Junction12 sp
                    [
                        position = 7688, 8040
                    ]

                    junction Junction3 sp
                    [
                        position = 8056, 7904
                    ]

                    junction Junction13 sp
                    [
                        position = 8032, 7936
                    ]

                    junction Junction7 sp
                    [
                        position = 7960, 8016
                    ]

                    junction Junction8 sp
                    [
                        position = 7936, 8048
                    ]

                    junction Junction9 sp
                    [
                        position = 7864, 8128
                    ]

                    junction Junction10 sp
                    [
                        position = 7840, 8160
                    ]

                    comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">q = (2/3)*( a*cos(wt) + b*cos(wt-(2*pi/3)) + c*cos(wt+(2*pi/3)) );</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">d = (2/3)*( a*sin(wt) + b*sin(wt-(2*pi/3)) + c*sin(wt+(2*pi/3)) );</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">zero = (1/3)*( a + b + c );</p></body></html> ENDCOMMENT 
                    [
                        position = 8512, 7952
                    ]

                    connect "Trigonometric function3.out" Product1.in1 as Connection1151
                    connect Product1.out Sum3.in as Connection1153
                    connect Product2.out Sum3.in1 as Connection1154
                    connect "Trigonometric function2.out" Product2.in1 as Connection1155
                    connect "Trigonometric function4.out" Product3.in1 as Connection1164
                    connect Constant2.out Sum2.in1 as Connection1148
                    connect Product3.out Sum3.in2 as Connection1171
                    connect "Trigonometric function5.out" Product4.in1 as Connection1173
                    connect Product4.out Sum5.in as Connection1174
                    connect Product5.out Sum5.in1 as Connection1175
                    connect "Trigonometric function6.out" Product5.in1 as Connection1176
                    connect "Trigonometric function7.out" Product6.in1 as Connection1179
                    connect Product6.out Sum5.in2 as Connection1183
                    connect Sum3.out Gain1.in as Connection1186
                    connect Junction11 theta as Connection1232
                    connect Gain1.out q as Connection1187
                    connect Sum5.out Gain2.in as Connection1188
                    connect Sum2.in Junction12 as Connection1234
                    connect Gain2.out d as Connection1189
                    connect Junction12 Junction11 as Connection1235
                    connect Sum4.in Junction12 as Connection1236
                    connect a Junction3 as Connection1190
                    connect Junction3 Product1.in as Connection1191
                    connect "Trigonometric function3.in" Junction13 as Connection1237
                    connect Product4.in Junction3 as Connection1192
                    connect Junction13 Junction11 as Connection1238
                    connect "Trigonometric function5.in" Junction13 as Connection1239
                    connect b Junction7 as Connection1213
                    connect Junction7 Product2.in as Connection1214
                    connect Product5.in Junction7 as Connection1215
                    connect Sum2.out Junction8 as Connection1216
                    connect Junction8 "Trigonometric function2.in" as Connection1217
                    connect "Trigonometric function6.in" Junction8 as Connection1218
                    connect Constant3.out Sum4.in1 as Connection1219
                    connect c Junction9 as Connection1220
                    connect Junction9 Product3.in as Connection1221
                    connect Product6.in Junction9 as Connection1222
                    connect Sum4.out Junction10 as Connection1227
                    connect Junction10 "Trigonometric function4.in" as Connection1228
                    [
                        breakpoints = 7840, 8160
                    ]
                    connect "Trigonometric function7.in" Junction10 as Connection1229
                }
                [
                    position = 7256, 8592
                    size = 80, 136
                ]

                component Subsystem "abc to qd1" {
                    layout = dynamic
                    component gen_trigonometric "Trigonometric function3" {
                        trigonometric_fn = "cos"
                    }
                    [
                        position = 8128, 7936
                        hide_name = True
                    ]

                    component gen_product Product1 {
                    }
                    [
                        position = 8224, 7912
                        hide_name = True
                    ]

                    component gen_sum Sum3 {
                        signs = "3"
                    }
                    [
                        position = 8304, 8024
                        hide_name = True
                    ]

                    component gen_product Product2 {
                    }
                    [
                        position = 8216, 8024
                        hide_name = True
                    ]

                    component gen_product Product3 {
                    }
                    [
                        position = 8216, 8136
                        hide_name = True
                    ]

                    component gen_trigonometric "Trigonometric function2" {
                        trigonometric_fn = "cos"
                    }
                    [
                        position = 8128, 8048
                        hide_name = True
                    ]

                    component gen_trigonometric "Trigonometric function4" {
                        trigonometric_fn = "cos"
                    }
                    [
                        position = 8128, 8160
                        hide_name = True
                    ]

                    component gen_sum Sum4 {
                    }
                    [
                        position = 7736, 8160
                        hide_name = True
                    ]

                    component src_constant Constant3 {
                        execution_rate = "Ts_sys"
                        value = "2*np.pi/3"
                    }
                    [
                        position = 7648, 8168
                        hide_name = True
                    ]

                    component gen_sum Sum2 {
                        signs = "+-"
                    }
                    [
                        position = 7736, 8048
                        hide_name = True
                    ]

                    component src_constant Constant2 {
                        execution_rate = "Ts_sys"
                        value = "2*np.pi/3"
                    }
                    [
                        position = 7648, 8056
                        hide_name = True
                    ]

                    component gen_trigonometric "Trigonometric function5" {
                    }
                    [
                        position = 8120, 8256
                        hide_name = True
                    ]

                    component gen_product Product4 {
                    }
                    [
                        position = 8216, 8224
                        hide_name = True
                    ]

                    component gen_sum Sum5 {
                        signs = "3"
                    }
                    [
                        position = 8304, 8336
                        hide_name = True
                    ]

                    component gen_product Product5 {
                    }
                    [
                        position = 8200, 8336
                        hide_name = True
                    ]

                    component gen_product Product6 {
                    }
                    [
                        position = 8200, 8448
                        hide_name = True
                    ]

                    component gen_trigonometric "Trigonometric function6" {
                    }
                    [
                        position = 8120, 8368
                        hide_name = True
                    ]

                    component gen_trigonometric "Trigonometric function7" {
                    }
                    [
                        position = 8120, 8480
                        hide_name = True
                    ]

                    component gen_c_function "confine phase" {
                        global_variables = "real x;real floor_in;"
                        in_terminal_dimensions = "inherit"
                        in_terminal_dimensions_str = "in inherit"
                        in_terminal_labels = "[(\'in\', True)]"
                        init_fnc = "/*Begin code section*/
floor_in = 0;
/*End code section*/"
                        no_feed_inputs = "[\'\']"
                        no_feed_outputs = "[\'\']"
                        out_terminal_dimensions = "inherit"
                        out_terminal_dimensions_str = "out inherit"
                        out_terminal_labels = "[(\'out\', True)]"
                        output_fnc = "/*Begin code section*/
x = in/6.283185307179586;
floor_in = floor(x);
out = in - (6.283185307179586*floor_in);
/*End code section*/"
                    }
                    [
                        position = 7592, 7936
                        size = 56, 48
                    ]

                    component gen_gain Gain1 {
                        gain = "2/3"
                    }
                    [
                        position = 8376, 8024
                        hide_name = True
                    ]

                    component gen_gain Gain2 {
                        gain = "2/3"
                    }
                    [
                        position = 8376, 8336
                        hide_name = True
                    ]

                    port q {
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8448, 8024
                    ]

                    port d {
                        position = right:2
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8448, 8336
                    ]

                    port theta {
                        position = left:4
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7512, 7936
                    ]

                    port a {
                        position = left:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7648, 7904
                        rotation = down
                        scale = -1, 1
                    ]

                    port b {
                        position = left:2
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7648, 8016
                        rotation = down
                        scale = -1, 1
                    ]

                    port c {
                        position = left:3
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7648, 8128
                        rotation = down
                        scale = -1, 1
                    ]

                    junction Junction3 sp
                    [
                        position = 8056, 7904
                    ]

                    junction Junction4 sp
                    [
                        position = 7688, 8040
                    ]

                    junction Junction5 sp
                    [
                        position = 7688, 7936
                    ]

                    junction Junction6 sp
                    [
                        position = 8032, 7936
                    ]

                    junction Junction7 sp
                    [
                        position = 7960, 8016
                    ]

                    junction Junction8 sp
                    [
                        position = 7936, 8048
                    ]

                    junction Junction9 sp
                    [
                        position = 7864, 8128
                    ]

                    junction Junction10 sp
                    [
                        position = 7840, 8160
                    ]

                    comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">q = (2/3)*( a*cos(wt) + b*cos(wt-(2*pi/3)) + c*cos(wt+(2*pi/3)) );</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">d = (2/3)*( a*sin(wt) + b*sin(wt-(2*pi/3)) + c*sin(wt+(2*pi/3)) );</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">zero = (1/3)*( a + b + c );</p></body></html> ENDCOMMENT 
                    [
                        position = 8512, 7952
                    ]

                    connect "Trigonometric function3.out" Product1.in1 as Connection1151
                    connect Product1.out Sum3.in as Connection1153
                    connect Product2.out Sum3.in1 as Connection1154
                    connect "Trigonometric function2.out" Product2.in1 as Connection1155
                    connect "Trigonometric function4.out" Product3.in1 as Connection1164
                    connect Constant2.out Sum2.in1 as Connection1148
                    connect Product3.out Sum3.in2 as Connection1171
                    connect "Trigonometric function5.out" Product4.in1 as Connection1173
                    connect Product4.out Sum5.in as Connection1174
                    connect Product5.out Sum5.in1 as Connection1175
                    connect "Trigonometric function6.out" Product5.in1 as Connection1176
                    connect "Trigonometric function7.out" Product6.in1 as Connection1179
                    connect Junction5 "confine phase.out" as Connection1230
                    connect "confine phase.in" theta as Connection1231
                    connect Product6.out Sum5.in2 as Connection1183
                    connect Sum3.out Gain1.in as Connection1186
                    connect Gain1.out q as Connection1187
                    connect Sum5.out Gain2.in as Connection1188
                    connect Gain2.out d as Connection1189
                    connect a Junction3 as Connection1190
                    connect Junction3 Product1.in as Connection1191
                    connect Product4.in Junction3 as Connection1192
                    connect Sum2.in Junction4 as Connection1204
                    connect Sum4.in Junction4 as Connection1206
                    connect Junction4 Junction5 as Connection1207
                    connect "Trigonometric function3.in" Junction6 as Connection1210
                    connect Junction6 Junction5 as Connection1211
                    connect "Trigonometric function5.in" Junction6 as Connection1212
                    connect b Junction7 as Connection1213
                    connect Junction7 Product2.in as Connection1214
                    connect Product5.in Junction7 as Connection1215
                    connect Sum2.out Junction8 as Connection1216
                    connect Junction8 "Trigonometric function2.in" as Connection1217
                    connect "Trigonometric function6.in" Junction8 as Connection1218
                    connect Constant3.out Sum4.in1 as Connection1219
                    connect c Junction9 as Connection1220
                    connect Junction9 Product3.in as Connection1221
                    connect Product6.in Junction9 as Connection1222
                    connect Sum4.out Junction10 as Connection1227
                    connect Junction10 "Trigonometric function4.in" as Connection1228
                    [
                        breakpoints = 7840, 8160
                    ]
                    connect "Trigonometric function7.in" Junction10 as Connection1229
                }
                [
                    position = 7256, 8784
                    size = 80, 136
                ]

                component gen_gain Gain16 {
                    gain = "180/np.pi"
                }
                [
                    position = 7560, 8048
                    hide_name = True
                ]

                component gen_probe "|E|" {
                }
                [
                    position = 8120, 8592
                ]

                component Subsystem magnitude {
                    layout = dynamic
                    component gen_math_fnc "Mathematical function1" {
                        mathematical_fn = "sqrt"
                    }
                    [
                        position = 8272, 8192
                        hide_name = True
                    ]

                    component gen_product Product5 {
                    }
                    [
                        position = 8112, 8128
                        hide_name = True
                    ]

                    component gen_product Product6 {
                    }
                    [
                        position = 8112, 8256
                        hide_name = True
                    ]

                    component gen_sum Sum3 {
                    }
                    [
                        position = 8192, 8192
                        hide_name = True
                    ]

                    port q {
                        label = "q"
                        position = left:2
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8032, 8120
                    ]

                    port d {
                        label = "d"
                        position = left:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8032, 8248
                    ]

                    port magnitude {
                        label = "magnitude"
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8344, 8192
                    ]

                    junction Junction1 sp
                    [
                        position = 8064, 8248
                    ]

                    junction Junction2 sp
                    [
                        position = 8064, 8120
                    ]

                    connect Junction1 Product6.in as Connection149
                    connect Junction2 q as Connection152
                    connect "Mathematical function1.out" magnitude as Connection146
                    connect Product5.in Junction2 as Connection151
                    connect Product5.in1 Junction2 as Connection153
                    connect Product5.out Sum3.in as Connection56
                    connect Product6.in1 Junction1 as Connection150
                    connect Product6.out Sum3.in1 as Connection143
                    connect Sum3.out "Mathematical function1.in" as Connection58
                    connect d Junction1 as Connection148
                }
                [
                    position = 7984, 8648
                    hide_name = True
                    size = 80, 48
                ]

                component gen_gain Gain17 {
                    gain = "180/np.pi"
                }
                [
                    position = 7568, 7960
                    hide_name = True
                ]

                tag From43 {
                    value = "Vd_G"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7176, 8312
                    hide_name = True
                ]

                tag w_bus1 {
                    value = "w_bus"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 7752, 8584
                    hide_name = True
                ]

                tag Vb_G1 {
                    value = "VbG"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7136, 8576
                    hide_name = True
                ]

                tag "|V|1" {
                    value = "|V| bus"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 7512, 8352
                    hide_name = True
                ]

                tag theta_bus {
                    value = "theta_bus"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 7136, 8640
                    hide_name = True
                    scale = -1, 1
                ]

                tag theta_bus5 {
                    value = "dV"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8232, 8616
                    hide_name = True
                ]

                tag From42 {
                    value = "Vq_G"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7176, 8392
                    hide_name = True
                ]

                tag Goto32 {
                    value = "Vq_G"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 7544, 8536
                    hide_name = True
                    size = 60, 20
                ]

                tag Connect2 {
                    value = "Connected"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8232, 8416
                    hide_name = True
                    size = 58, 20
                ]

                tag From44 {
                    value = "Vd_G"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7320, 8104
                    hide_name = True
                ]

                tag From45 {
                    value = "Vq_G"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7320, 8072
                    hide_name = True
                ]

                tag Goto30 {
                    value = "dV"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 8504, 8160
                    hide_name = True
                ]

                tag Goto33 {
                    value = "Vd_G"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 7440, 8544
                    hide_name = True
                    size = 60, 20
                ]

                tag Vc_G1 {
                    value = "VcG"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7136, 8608
                    hide_name = True
                ]

                tag From41 {
                    value = "E_d"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7320, 8016
                    hide_name = True
                ]

                tag Va_G1 {
                    value = "VaG"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7136, 8544
                    hide_name = True
                ]

                tag w_bus3 {
                    value = "w_bus"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7736, 8416
                    hide_name = True
                ]

                tag Connect1 {
                    value = "synced"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 9104, 8176
                    hide_name = True
                ]

                tag From1 {
                    value = "|V| bus"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8304, 8176
                    hide_name = True
                ]

                tag From40 {
                    value = "E_q"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7320, 7984
                    hide_name = True
                ]

                tag V_t9 {
                    value = "exc_state"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8456, 8712
                    hide_name = True
                ]

                tag MT_ON2 {
                    value = "MT_sync"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8232, 8440
                    hide_name = True
                ]

                tag MT_ON3 {
                    value = "MT_sync"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8456, 8680
                    hide_name = True
                ]

                tag MT_ON4 {
                    value = "MT_sync"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8688, 8208
                    hide_name = True
                ]

                tag w_e7 {
                    value = "w_e"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7736, 8368
                    hide_name = True
                ]

                tag Goto28 {
                    value = "E_q"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 7432, 8832
                    hide_name = True
                    size = 60, 20
                ]

                tag Goto29 {
                    value = "E_d"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 7432, 8736
                    hide_name = True
                    size = 60, 20
                ]

                tag From34 {
                    value = "Ec1"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7160, 8800
                    hide_name = True
                    size = 60, 20
                ]

                tag From33 {
                    value = "Ea1"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7160, 8736
                    hide_name = True
                    size = 60, 20
                ]

                tag From35 {
                    value = "Eb1"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7160, 8768
                    hide_name = True
                    size = 60, 20
                ]

                tag theta_bus1 {
                    value = "theta_bus"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7160, 8832
                    hide_name = True
                ]

                tag Connect5 {
                    value = "Connect MT"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8688, 8176
                    hide_name = True
                ]

                tag Connect6 {
                    value = "Connected"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8456, 8648
                    hide_name = True
                    size = 58, 20
                ]

                tag w_bus2 {
                    value = "w_bus"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8496, 8400
                    hide_name = True
                    scale = 1, -1
                ]

                tag Connect3 {
                    value = "Connected"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8584, 8456
                    hide_name = True
                    size = 58, 20
                ]

                tag Goto34 {
                    value = "w_sync"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 8792, 8432
                    hide_name = True
                ]

                tag From47 {
                    value = "|V| bus"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8744, 8648
                    hide_name = True
                ]

                tag Connect7 {
                    value = "Connected"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8832, 8704
                    hide_name = True
                    size = 58, 20
                ]

                tag Goto35 {
                    value = "|V|_sync"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 9040, 8680
                    hide_name = True
                ]

                tag "|V|5" {
                    value = "|E|"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 8120, 8648
                    hide_name = True
                ]

                tag From52 {
                    value = "E_d"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7840, 8624
                    hide_name = True
                ]

                tag From53 {
                    value = "E_q"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7840, 8672
                    hide_name = True
                ]

                tag From54 {
                    value = "|E|"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8304, 8208
                    hide_name = True
                ]

                junction Junction41 sp
                [
                    position = 7480, 8592
                ]

                junction Junction38 sp
                [
                    position = 8304, 8120
                ]

                junction Junction42 sp
                [
                    position = 7216, 8392
                ]

                junction Junction43 sp
                [
                    position = 7216, 8312
                ]

                junction Junction49 sp
                [
                    position = 7872, 8048
                ]

                junction Junction35 sp
                [
                    position = 8424, 8192
                ]

                junction Junction56 sp
                [
                    position = 8280, 8616
                ]

                junction Junction57 sp
                [
                    position = 7480, 8536
                ]

                junction Junction58 sp
                [
                    position = 7368, 8544
                ]

                junction Junction63 sp
                [
                    position = 9040, 8176
                ]

                junction Junction66 sp
                [
                    position = 8552, 8136
                ]

                junction Junction67 sp
                [
                    position = 8576, 8040
                ]

                junction Junction69 sp
                [
                    position = 7456, 8352
                ]

                junction Junction71 sp
                [
                    position = 7880, 8368
                ]

                junction Junction73 sp
                [
                    position = 7992, 8128
                ]

                junction Junction78 sp
                [
                    position = 9040, 8208
                ]

                junction Junction61 sp
                [
                    position = 7376, 8736
                ]

                junction Junction81 sp
                [
                    position = 7992, 8392
                ]

                junction Junction85 sp
                [
                    position = 7640, 8584
                ]

                junction Junction86 sp
                [
                    position = 7520, 8088
                ]

                junction Junction87 sp
                [
                    position = 7520, 8000
                ]

                junction Junction88 sp
                [
                    position = 8432, 8416
                ]

                junction Junction89 sp
                [
                    position = 8672, 8664
                ]

                junction Junction90 sp
                [
                    position = 7880, 8416
                ]

                junction Junction99 sp
                [
                    position = 7200, 8640
                ]

                junction Junction100 sp
                [
                    position = 7616, 8680
                ]

                junction Junction101 sp
                [
                    position = 7376, 8832
                ]

                junction Junction46 sp
                [
                    position = 8072, 8648
                ]

                connect "Digital Probe4.in" Junction38 as Connection366
                connect From41 Limit1.in as Connection285
                connect Sum3.in1 From1 as Connection81
                connect angle_diff3.in Junction49 as Connection430
                connect Abs2.out "Relational operator4.in" as Connection84
                connect Connect2 "Hold after connect.connect" as Connection156
                connect Goto30 Junction35 as Connection308
                connect From45 "Trigonometric function2.in" as Connection401
                connect Constant7.out "Relational operator2.in" as Connection70
                connect Junction49 Abs4.in as Connection429
                connect Abs2.in Junction35 as Connection306
                connect From44 Limit2.in as Connection402
                connect "Digital Probe6.in" "Logical operator2.out" as Connection454
                connect Limit2.out "Trigonometric function2.in1" as Connection398
                connect Product3.out Sum5.in as Connection390
                connect Junction38 "Relational operator2.out" as Connection365
                [
                    breakpoints = 8288, 8120; 8288, 8120
                ]
                connect Product3.in Junction43 as Connection386
                connect Limit1.out "Trigonometric function1.in1" as Connection286
                connect From40 "Trigonometric function1.in" as Connection284
                connect "Relational operator2.in1" Abs5.out as Connection357
                connect From42 Junction42 as Connection384
                connect Junction43 From43 as Connection389
                connect Sum5.out "Mathematical function2.in" as Connection387
                connect Product3.in1 Junction43 as Connection391
                connect Gain6.out Junction41 as Connection381
                connect Junction35 Sum3.out as Connection307
                connect Product4.out Sum5.in1 as Connection388
                connect Constant9.out "Relational operator4.in1" as Connection85
                connect Product4.in Junction42 as Connection385
                connect "confine phase.out" Junction49 as Connection428
                connect Junction41 PLL.d as Connection382
                connect Constant6.out "Relational operator1.in" as Connection69
                connect Junction42 Product4.in1 as Connection392
                connect "Logical operator1.in1" Junction38 as Connection364
                [
                    breakpoints = 8576, 8120
                ]
                connect theta_bus5 Junction56 as Connection464
                connect Junction56 "BE1-25A Synchronizer1.dV" as Connection465
                connect volt_diff3.in Junction56 as Connection466
                connect Goto32 Junction57 as Connection468
                connect Junction57 Junction41 as Connection469
                connect Vq_G.in Junction57 as Connection470
                connect Goto33 Junction58 as Connection471
                connect Junction58 Gain5.out as Connection472
                connect Vd_G.in Junction58 as Connection473
                connect PLL.wt "Unit Delay2.in" as Connection474
                connect MT_ON2 "Hold after connect.MT_sync" as Connection492
                connect V_t9 "Hold after connect1.exc_state" as Connection493
                connect MT_ON3 "Hold after connect1.MT_sync" as Connection494
                connect "Hold after connect1.in" "BE1-25A Synchronizer1.del_V" as Connection495
                connect Connect1 Junction63 as Connection508
                connect MT_ON4 "stay connected1.MTsync" as Connection512
                connect w_e7 Gain4.in as Connection513
                connect "Logical operator1.in2" Junction66 as Connection530
                connect Junction66 "Relational operator4.out" as Connection531
                connect "Digital Probe5.in" Junction66 as Connection532
                connect "Relational operator1.out" Junction67 as Connection534
                connect Junction67 "Logical operator1.in" as Connection535
                connect "Digital Probe3.in" Junction67 as Connection536
                connect "Logical operator1.out" "stay connected1.ready" as Connection537
                connect "Mathematical function2.out" Junction69 as Connection544
                connect Junction69 "|V|1" as Connection545
                [
                    breakpoints = 7456, 8352
                ]
                connect "|V|.in" Junction69 as Connection546
                connect Gain4.out Junction71 as Connection550
                connect Junction71 Sum2.in as Connection551
                connect w_G.in Junction71 as Connection552
                connect Abs5.in Junction73 as Connection557
                connect frequency_diff3.in Junction73 as Connection559
                connect Junction63 Junction78 as Connection609
                [
                    breakpoints = 9040, 8176
                ]
                connect Junction78 "Logical operator2.in" as Connection610
                [
                    breakpoints = 9040, 8208
                ]
                connect "Digital Probe1.in" Junction78 as Connection611
                connect Goto29 Junction61 as Connection444
                connect Junction61 Gain7.out as Connection445
                connect E_d.in Junction61 as Connection618
                [
                    breakpoints = 7472, 8720; 7376, 8720; 7376, 8736
                ]
                connect Junction63 "Unit Delay5.out" as Connection623
                connect "Unit Delay5.in" "stay connected1.out" as Connection624
                connect Connect5 "stay connected1.connectMT" as Connection625
                connect Connect6 "Hold after connect1.connect" as Connection626
                connect Abs4.out "Relational operator1.in1" as Connection627
                [
                    breakpoints = 8024, 8048; 8128, 8048
                ]
                connect "BE1-25A Synchronizer2.del_w" "Hold after connect.in" as Connection633
                connect Sum2.out Junction81 as Connection634
                [
                    breakpoints = 7968, 8392
                ]
                connect Junction81 Junction73 as Connection635
                [
                    breakpoints = 7992, 8200; 7992, 8128
                ]
                connect "BE1-25A Synchronizer2.df" Junction81 as Connection636
                connect PLL.w Junction85 as Connection649
                connect omegaPLL.in Junction85 as Connection651
                connect "Trigonometric function2.out" Junction86 as Connection654
                connect Junction86 Sum1.in1 as Connection655
                connect "Trigonometric function1.out" Junction87 as Connection657
                connect Connect3 "Hold after connect2.connect" as Connection1234
                connect w_bus2 Sum9.in as Connection1235
                connect Sum9.out "Hold after connect2.in" as Connection1237
                connect del_w.in Junction88 as Connection1239
                connect Junction88 "Hold after connect.out" as Connection1240
                [
                    breakpoints = 8432, 8416
                ]
                connect Sum9.in1 Junction88 as Connection1241
                connect "Hold after connect2.out" Goto34 as Connection1242
                connect Connect7 "Hold after connect3.connect" as Connection1243
                connect Sum10.out "Hold after connect3.in" as Connection1244
                connect From47 Sum10.in as Connection1246
                connect del_V.in Junction89 as Connection1247
                connect Junction89 "Hold after connect1.out" as Connection1248
                [
                    breakpoints = 8672, 8664
                ]
                connect Sum10.in1 Junction89 as Connection1249
                connect Goto35 "Hold after connect3.out" as Connection1250
                connect Gain13.out w_bus1 as Connection1252
                connect w_bus3 Junction90 as Connection1254
                connect Junction90 Sum2.in1 as Connection1255
                connect w_bus.in Junction90 as Connection1256
                connect Gain13.in Junction85 as Connection1340
                [
                    breakpoints = 7640, 8584
                ]
                connect From33 "abc to qd1.a" as Connection1356
                connect "abc to qd1.b" From35 as Connection1357
                connect From34 "abc to qd1.c" as Connection1358
                connect "abc to qd1.theta" theta_bus1 as Connection1359
                connect "abc to qd1.q" Gain7.in as Connection1360
                connect Gain12.in "abc to qd1.d" as Connection1361
                connect Gain6.in "abc to qd.d" as Connection1362
                connect Gain5.in "abc to qd.q" as Connection1363
                connect "abc to qd.c" Vc_G1 as Connection1364
                connect Vb_G1 "abc to qd.b" as Connection1365
                connect "abc to qd.a" Va_G1 as Connection1366
                connect "abc to qd.theta" Junction99 as Connection1375
                connect theta_bus Junction99 as Connection1377
                connect Junction99 Junction100 as Connection1382
                [
                    breakpoints = 7200, 8640
                ]
                connect Junction100 "Unit Delay2.out" as Connection1383
                [
                    breakpoints = 7616, 8680; 7616, 8680
                ]
                connect thetaPLL.in Junction100 as Connection1384
                connect Gain12.out Junction101 as Connection1386
                connect Junction101 Goto28 as Connection1387
                connect E_q.in Junction101 as Connection1388
                connect magnitude.magnitude Junction46 as Connection326
                connect Junction46 "|V|5" as Connection327
                connect "|E|.in" Junction46 as Connection328
                connect From52 magnitude.d as Connection745
                connect From53 magnitude.q as Connection746
                connect "confine phase.in" Sum1.out as Connection1446
                [
                    breakpoints = 7776, 8048
                ]
                connect Sum1.in Junction87 as Connection1451
                [
                    breakpoints = 7696, 8000; 7632, 8000; 7632, 8000
                ]
                connect theta_E.in Gain17.out as Connection1452
                connect Gain17.in Junction87 as Connection1453
                connect theta_V.in Gain16.out as Connection1454
                connect Gain16.in Junction86 as Connection1455
                connect From54 Sum3.in as Connection1456
            }
            [
                position = 8024, 7936
                size = 112, 144
            ]

            component Subsystem GovernorX {
                layout = dynamic
                component gen_sum Sum10 {
                    signs = "++"
                }
                [
                    position = 8160, 8248
                    hide_name = True
                ]

                component gen_gain Gain28 {
                    gain = "pms/w_0"
                }
                [
                    position = 7800, 8376
                    hide_name = True
                ]

                component Subsystem "Exciter Activation" {
                    layout = dynamic
                    component gen_abs Abs1 {
                    }
                    [
                        position = 8192, 8208
                        hide_name = True
                    ]

                    component gen_comparator Comparator1 {
                    }
                    [
                        position = 8264, 8232
                        hide_name = True
                        scale = 1, -1
                    ]

                    component src_constant Constant1 {
                        execution_rate = "Ts"
                        value = "4*maxw_slip"
                    }
                    [
                        position = 8192, 8256
                        hide_name = True
                    ]

                    component gen_probe "speed difference" {
                    }
                    [
                        position = 8096, 8144
                    ]

                    component gen_c_function "Activate Exciter" {
                        in_terminal_dimensions = "inherit"
                        in_terminal_dimensions_str = "boolean inherit"
                        in_terminal_labels = "[(\'boolean\', True)]"
                        in_terminal_properties = "inherit boolean;"
                        init_fnc = "/*Begin code section*/
Activate = 0;
/*End code section*/"
                        no_feed_inputs = "[\'\']"
                        no_feed_outputs = "[\'\']"
                        out_terminal_dimensions = "inherit"
                        out_terminal_dimensions_str = "Activate inherit"
                        out_terminal_labels = "[(\'Activate\', True)]"
                        out_terminal_properties = "int Activate;"
                        output_fnc = "/*Begin code section*/
if(boolean==1){
    Activate = 1;
}
/*End code section*/"
                    }
                    [
                        position = 8360, 8232
                        size = 112, 48
                    ]

                    component gen_sum Sum1 {
                        signs = "+-"
                    }
                    [
                        position = 8008, 8144
                        hide_name = True
                    ]

                    component src_constant Constant2 {
                        execution_rate = "Ts"
                    }
                    [
                        position = 7936, 8120
                        hide_name = True
                    ]

                    port w_PU {
                        label = "w_PU"
                        position = left:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7936, 8168
                    ]

                    port "exciter state" {
                        position = auto:auto
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8480, 8232
                    ]

                    junction Junction14 sp
                    [
                        position = 8048, 8144
                    ]

                    connect Abs1.out Comparator1.in2 as Connection105
                    connect Constant1.out Comparator1.in1 as Connection18
                    connect w_PU Sum1.in1 as Connection199
                    connect "speed difference.in" Junction14 as Connection195
                    connect Junction14 Sum1.out as Connection196
                    connect Abs1.in Junction14 as Connection197
                    connect Constant2.out Sum1.in as Connection201
                    connect Comparator1.out "Activate Exciter.boolean" as Connection206
                    connect "Activate Exciter.Activate" "exciter state" as Connection207
                }
                [
                    position = 7912, 8376
                    size = 112, 48
                ]

                component gen_sum Sum7 {
                    signs = "+-"
                }
                [
                    position = 7896, 8320
                    hide_name = True
                ]

                component gen_sum Sum2 {
                    signs = "+-"
                }
                [
                    position = 7896, 8224
                    hide_name = True
                ]

                component gen_gain Gain29 {
                    gain = "R_D"
                }
                [
                    position = 7992, 8224
                    hide_name = True
                ]

                component src_scada_input AGC {
                    execution_rate = "Ts"
                    max = "S"
                    min = "-S"
                    unit = "W"
                }
                [
                    position = 7680, 8232
                ]

                component gen_probe P_sv {
                }
                [
                    position = 8592, 8288
                ]

                component gen_probe frequency_diff {
                }
                [
                    position = 8376, 8320
                ]

                component src_constant "AGC offset" {
                    execution_rate = "Ts"
                    value = "18345.5+400.3"
                }
                [
                    position = 7688, 8168
                ]

                component gen_sum Sum11 {
                    signs = "++"
                }
                [
                    position = 7760, 8200
                    hide_name = True
                ]

                component gen_rate_limiter "Rate Limiter2" {
                    falling_limit = "inner_w_fall"
                    rising_limit = "inner_w_rise"
                }
                [
                    position = 8016, 8320
                    hide_name = True
                ]

                component gen_gain Gain37 {
                    gain = "1/S"
                }
                [
                    position = 7816, 8200
                    hide_name = True
                ]

                component gen_gain Gain2 {
                    gain = "gov_Kp"
                }
                [
                    position = 8288, 8248
                    hide_name = True
                ]

                component gen_gain Gain3 {
                    gain = "K"
                }
                [
                    position = 8336, 8248
                    hide_name = True
                ]

                component gen_z_domain_transfer "Discrete Transfer Function2" {
                    a_coeff = "[T5*T6, (T5+T6), 1]"
                    b_coeff = "[T4, 1]"
                    domain = "S-domain"
                    method = "Bilinear"
                }
                [
                    position = 8384, 8248
                    hide_name = True
                ]

                component gen_integrator Integrator1 {
                }
                [
                    position = 8448, 8248
                    hide_name = True
                ]

                component gen_z_domain_transfer "Discrete Transfer Function1" {
                    a_coeff = "[T1*T2, T1, 1]"
                    b_coeff = "[T3, 1]"
                    domain = "S-domain"
                    method = "Bilinear"
                }
                [
                    position = 8240, 8248
                    hide_name = True
                ]

                port w_ref {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7728, 8312
                ]

                port w_m3 {
                    label = "w_m"
                    position = left:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7728, 8376
                ]

                port P_SV {
                    position = auto:auto
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8592, 8232
                ]

                port "exciter state" {
                    label = "exc ON/OFF"
                    position = bottom:auto
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8016, 8376
                ]

                tag From1 {
                    value = "P_SV"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7800, 8248
                    hide_name = True
                    size = 54, 20
                ]

                junction Junction3 sp
                [
                    position = 7832, 8376
                ]

                junction Junction10 sp
                [
                    position = 8120, 8320
                ]

                junction Junction11 sp
                [
                    position = 8560, 8248
                ]

                connect Gain28.in w_m3 as Connection7
                connect Sum2.out Gain29.in as Connection207
                [
                    breakpoints = 7944, 8224
                ]
                connect Gain28.out Junction3 as Connection799
                connect Junction3 Sum7.in1 as Connection800
                [
                    breakpoints = 7832, 8376; 7832, 8344
                ]
                connect "Exciter Activation.w_PU" Junction3 as Connection801
                connect Junction10 Sum10.in1 as Connection842
                connect frequency_diff.in Junction10 as Connection843
                connect "AGC offset.out" Sum11.in as Connection846
                connect From1 Sum2.in1 as Connection849
                connect w_ref Sum7.in as Connection853
                connect Sum7.out "Rate Limiter2.in" as Connection854
                connect "Rate Limiter2.out" Junction10 as Connection855
                connect Gain29.out Sum10.in as Connection857
                connect AGC.out Sum11.in1 as Connection858
                connect Sum11.out Gain37.in as Connection859
                connect Gain37.out Sum2.in as Connection860
                connect "Exciter Activation.exciter state" "exciter state" as Connection861
                connect "Discrete Transfer Function1.out" Gain2.in as Connection3
                connect "Discrete Transfer Function2.in" Gain3.out as Connection5
                connect Gain2.out Gain3.in as Connection4
                connect Integrator1.in "Discrete Transfer Function2.out" as Connection6
                connect "Discrete Transfer Function1.in" Sum10.out as Connection862
                connect Integrator1.out Junction11 as Connection864
                connect Junction11 P_sv.in as Connection865
                connect P_SV Junction11 as Connection866

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">DEGOV1 model</p></body></html>"

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE

                    CODE define_icon
                        mdl.disp_component_icon_text(item_handle, "DEGOV1")
                    ENDCODE
                }
            }
            [
                position = 6760, 8048
                size = 144, 136
            ]

            component Subsystem Governor {
                layout = dynamic
                component gen_gain Gain36 {
                    gain = "1/T1"
                }
                [
                    position = 8248, 8160
                    hide_name = True
                ]

                component gen_sum Sum10 {
                    signs = "++"
                }
                [
                    position = 8160, 8248
                    hide_name = True
                ]

                component gen_gain Gain30 {
                    gain = "1/T1"
                }
                [
                    position = 8320, 8248
                    hide_name = True
                ]

                component gen_integrator Integrator12 {
                }
                [
                    position = 8680, 8456
                    hide_name = True
                ]

                component gen_gain Gain28 {
                    gain = "pms/w_0"
                }
                [
                    position = 7800, 8376
                    hide_name = True
                ]

                component Subsystem "Exciter Activation" {
                    layout = dynamic
                    component gen_abs Abs1 {
                    }
                    [
                        position = 8192, 8208
                        hide_name = True
                    ]

                    component gen_comparator Comparator1 {
                    }
                    [
                        position = 8264, 8232
                        hide_name = True
                        scale = 1, -1
                    ]

                    component src_constant Constant1 {
                        execution_rate = "Ts"
                        value = "4*maxw_slip"
                    }
                    [
                        position = 8192, 8256
                        hide_name = True
                    ]

                    component gen_probe "speed difference" {
                    }
                    [
                        position = 8096, 8144
                    ]

                    component gen_c_function "Activate Exciter" {
                        in_terminal_dimensions = "inherit"
                        in_terminal_dimensions_str = "boolean inherit"
                        in_terminal_labels = "[(\'boolean\', True)]"
                        in_terminal_properties = "inherit boolean;"
                        init_fnc = "/*Begin code section*/
Activate = 0;
/*End code section*/"
                        no_feed_inputs = "[\'\']"
                        no_feed_outputs = "[\'\']"
                        out_terminal_dimensions = "inherit"
                        out_terminal_dimensions_str = "Activate inherit"
                        out_terminal_labels = "[(\'Activate\', True)]"
                        out_terminal_properties = "int Activate;"
                        output_fnc = "/*Begin code section*/
if(boolean==1){
    Activate = 1;
}
/*End code section*/"
                    }
                    [
                        position = 8360, 8232
                        size = 112, 48
                    ]

                    component gen_sum Sum1 {
                        signs = "+-"
                    }
                    [
                        position = 8008, 8144
                        hide_name = True
                    ]

                    component src_constant Constant2 {
                        execution_rate = "Ts"
                    }
                    [
                        position = 7936, 8120
                        hide_name = True
                    ]

                    port w_PU {
                        label = "w_PU"
                        position = left:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7936, 8168
                    ]

                    port "exciter state" {
                        position = auto:auto
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8480, 8232
                    ]

                    junction Junction14 sp
                    [
                        position = 8048, 8144
                    ]

                    connect Abs1.out Comparator1.in2 as Connection105
                    connect Constant1.out Comparator1.in1 as Connection18
                    connect w_PU Sum1.in1 as Connection199
                    connect "speed difference.in" Junction14 as Connection195
                    connect Junction14 Sum1.out as Connection196
                    connect Abs1.in Junction14 as Connection197
                    connect Constant2.out Sum1.in as Connection201
                    connect Comparator1.out "Activate Exciter.boolean" as Connection206
                    connect "Activate Exciter.Activate" "exciter state" as Connection207
                }
                [
                    position = 7912, 8376
                    size = 112, 48
                ]

                component gen_sum Sum7 {
                    signs = "+-"
                }
                [
                    position = 7896, 8320
                    hide_name = True
                ]

                component gen_sum Sum2 {
                    signs = "+-"
                }
                [
                    position = 7896, 8224
                    hide_name = True
                ]

                component gen_gain Gain29 {
                    gain = "R_D"
                }
                [
                    position = 7992, 8224
                    hide_name = True
                ]

                component gen_sum Sum3 {
                    signs = "-+"
                }
                [
                    position = 8376, 8240
                    hide_name = True
                ]

                component gen_gain Gain31 {
                    gain = "T3"
                }
                [
<<<<<<< Updated upstream
                    position = 7992, 8048
=======
                    position = 7544, 8472
>>>>>>> Stashed changes
                    hide_name = True
                ]

                component gen_sum Sum4 {
                }
                [
                    position = 8072, 7992
                    hide_name = True
                ]

                component gen_gain Gain32 {
                    gain = "K*gov_Kp"
                }
                [
                    position = 8176, 7992
                    hide_name = True
                ]

                component gen_sum Sum5 {
                    signs = "+-"
                }
                [
                    position = 8288, 7976
                    hide_name = True
                ]

                component gen_gain Gain33 {
                    gain = "1/(T5+T6)"
                }
                [
                    position = 8408, 7976
                    hide_name = True
                ]

                component gen_sum Sum8 {
                    signs = "--"
                }
                [
                    position = 8512, 7952
                    hide_name = True
                ]

                component gen_gain Gain34 {
                    gain = "(T5+T6)/(T5*T6)"
                }
                [
                    position = 8608, 7952
                    hide_name = True
                ]

                component gen_gain Gain35 {
                    gain = "T4"
                }
                [
                    position = 7992, 7784
                    hide_name = True
                ]

                component gen_sum Sum9 {
                }
                [
                    position = 8064, 7760
                    hide_name = True
                ]

                component gen_integrator Integrator9 {
                }
                [
                    position = 8680, 8376
                    hide_name = True
                ]

                component gen_integrator Integrator10 {
                }
                [
                    position = 8696, 7952
                    hide_name = True
                ]

                component gen_integrator Integrator11 {
                }
                [
                    position = 8288, 7760
                    hide_name = True
                ]

                component src_scada_input AGC {
                    execution_rate = "Ts"
                    max = "S"
                    min = "-S"
                    unit = "W"
                }
                [
                    position = 7680, 8232
                ]

                component gen_probe P_b2 {
                }
                [
                    position = 8568, 8480
                    scale = -1, 1
                ]

                component gen_probe P_a2 {
                }
                [
                    position = 8568, 8400
                    scale = -1, 1
                ]

                component gen_probe P_a1 {
                }
                [
                    position = 8776, 8400
                ]

                component gen_probe P_b1 {
                }
                [
<<<<<<< Updated upstream
                    position = 8776, 8480
=======
                    position = 8616, 8208
                    hide_name = True
>>>>>>> Stashed changes
                ]

                component gen_probe P_sv {
                }
                [
                    position = 8800, 7816
                ]

                component gen_probe frequency_diff {
                }
                [
                    position = 8376, 8320
                ]

                component src_constant "AGC offset" {
                    execution_rate = "Ts"
                    value = "18345.5+400.3"
                }
                [
                    position = 7688, 8168
                ]

                component gen_sum Sum11 {
                    signs = "++"
                }
                [
                    position = 7760, 8200
                    hide_name = True
                ]

                component gen_rate_limiter "Rate Limiter2" {
                    falling_limit = "inner_w_fall"
                    rising_limit = "inner_w_rise"
                }
                [
                    position = 8016, 8320
                    hide_name = True
                ]

                component gen_gain Gain37 {
                    gain = "1/S"
                }
                [
                    position = 7816, 8200
                    hide_name = True
                ]

                port w_ref {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7728, 8312
                ]

                port w_m3 {
                    label = "w_m"
                    position = left:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
<<<<<<< Updated upstream
                    position = 7728, 8376
=======
                    position = 8616, 8176
                    hide_name = True
>>>>>>> Stashed changes
                ]

                port P_SV {
                    position = auto:auto
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8800, 7760
                ]

                port "exciter state" {
                    label = "exc ON/OFF"
                    position = bottom:auto
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8016, 8376
                ]

                tag From13 {
                    value = "P_b2"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8568, 8456
                    hide_name = True
                ]

                tag Goto6 {
                    value = "P_b1"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
<<<<<<< Updated upstream
                    position = 8776, 8456
=======
                    position = 8872, 8432
>>>>>>> Stashed changes
                    hide_name = True
                ]

                tag From1 {
                    value = "P_SV"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7800, 8248
                    hide_name = True
                    size = 54, 20
                ]

                tag From3 {
                    value = "P_b1"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8160, 8160
                    hide_name = True
                ]

                tag Goto1 {
                    value = "P_b2"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
<<<<<<< Updated upstream
                    position = 8648, 8240
=======
                    position = 9112, 8680
>>>>>>> Stashed changes
                    hide_name = True
                ]

                tag From5 {
                    value = "P_a2"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8568, 8376
                    hide_name = True
                ]

                tag Goto2 {
                    value = "P_a1"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 8776, 8376
                    hide_name = True
                ]

                tag From6 {
                    value = "P_b2"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7888, 8048
                    hide_name = True
                ]

                tag From7 {
                    value = "P_b1"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7888, 7944
                    hide_name = True
                ]

<<<<<<< Updated upstream
                tag From8 {
                    value = "P_a1"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
=======
                junction Junction38 sp
                [
                    position = 8304, 8120
                ]

                junction Junction42 sp
                [
                    position = 7216, 8392
                ]

                junction Junction43 sp
                [
                    position = 7216, 8312
                ]

                junction Junction49 sp
                [
                    position = 7872, 8048
                ]

                junction Junction35 sp
                [
                    position = 8424, 8192
                ]

                junction Junction56 sp
                [
                    position = 8280, 8616
                ]

                junction Junction58 sp
                [
                    position = 7368, 8544
                ]

                junction Junction63 sp
                [
                    position = 9040, 8176
                ]

                junction Junction66 sp
                [
                    position = 8552, 8136
                ]

                junction Junction67 sp
                [
                    position = 8576, 8040
                ]

                junction Junction69 sp
                [
                    position = 7456, 8352
                ]

                junction Junction71 sp
                [
                    position = 7880, 8368
                ]

                junction Junction73 sp
                [
                    position = 7992, 8128
                ]

                junction Junction78 sp
                [
                    position = 9040, 8208
                ]

                junction Junction61 sp
                [
                    position = 7376, 8736
                ]

                junction Junction81 sp
                [
                    position = 7992, 8392
                ]

                junction Junction85 sp
                [
                    position = 7640, 8584
                ]

                junction Junction86 sp
                [
                    position = 7520, 8088
                ]

                junction Junction87 sp
                [
                    position = 7520, 8000
                ]

                junction Junction88 sp
                [
                    position = 8432, 8416
                ]

                junction Junction89 sp
                [
                    position = 8672, 8664
                ]

                junction Junction90 sp
                [
                    position = 7880, 8416
                ]

                junction Junction99 sp
                [
                    position = 7200, 8640
                ]

                junction Junction100 sp
                [
                    position = 7616, 8680
                ]

                junction Junction101 sp
>>>>>>> Stashed changes
                [
                    position = 8176, 7928
                    hide_name = True
                ]

                tag From9 {
                    value = "P_a2"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8400, 7928
                    hide_name = True
                ]

<<<<<<< Updated upstream
                tag Goto4 {
                    value = "P_a2"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
=======
                junction Junction102 sp
                [
                    position = 7472, 8592
                ]

                junction Junction103 sp
                [
                    position = 7472, 8472
                ]

                connect "Digital Probe4.in" Junction38 as Connection366
                connect From41 Limit1.in as Connection285
                connect Sum3.in1 From1 as Connection81
                connect angle_diff3.in Junction49 as Connection430
                connect Abs2.out "Relational operator4.in" as Connection84
                connect Connect2 "Hold after connect.connect" as Connection156
                connect Goto30 Junction35 as Connection308
                connect From45 "Trigonometric function2.in" as Connection401
                connect Constant7.out "Relational operator2.in" as Connection70
                connect Junction49 Abs4.in as Connection429
                connect Abs2.in Junction35 as Connection306
                connect From44 Limit2.in as Connection402
                connect "Digital Probe6.in" "Logical operator2.out" as Connection454
                connect Limit2.out "Trigonometric function2.in1" as Connection398
                connect Product3.out Sum5.in as Connection390
                connect Junction38 "Relational operator2.out" as Connection365
>>>>>>> Stashed changes
                [
                    position = 8800, 7952
                    hide_name = True
                ]
<<<<<<< Updated upstream

                tag From10 {
                    value = "P_a2"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
=======
                connect Product3.in Junction43 as Connection386
                connect Limit1.out "Trigonometric function1.in1" as Connection286
                connect From40 "Trigonometric function1.in" as Connection284
                connect "Relational operator2.in1" Abs5.out as Connection357
                connect From42 Junction42 as Connection384
                connect Junction43 From43 as Connection389
                connect Sum5.out "Mathematical function2.in" as Connection387
                connect Product3.in1 Junction43 as Connection391
                connect Junction35 Sum3.out as Connection307
                connect Product4.out Sum5.in1 as Connection388
                connect Constant9.out "Relational operator4.in1" as Connection85
                connect Product4.in Junction42 as Connection385
                connect "confine phase.out" Junction49 as Connection428
                connect Constant6.out "Relational operator1.in" as Connection69
                connect Junction42 Product4.in1 as Connection392
                connect "Logical operator1.in1" Junction38 as Connection364
>>>>>>> Stashed changes
                [
                    position = 7888, 7784
                    hide_name = True
                ]
<<<<<<< Updated upstream

                tag From11 {
                    value = "P_a1"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
=======
                connect theta_bus5 Junction56 as Connection464
                connect Junction56 "BE1-25A Synchronizer1.dV" as Connection465
                connect volt_diff3.in Junction56 as Connection466
                connect Goto33 Junction58 as Connection471
                connect Junction58 Gain5.out as Connection472
                connect Vd_G.in Junction58 as Connection473
                connect PLL.wt "Unit Delay2.in" as Connection474
                connect MT_ON2 "Hold after connect.MT_sync" as Connection492
                connect V_t9 "Hold after connect1.exc_state" as Connection493
                connect MT_ON3 "Hold after connect1.MT_sync" as Connection494
                connect "Hold after connect1.in" "BE1-25A Synchronizer1.del_V" as Connection495
                connect Connect1 Junction63 as Connection508
                connect MT_ON4 "stay connected1.MTsync" as Connection512
                connect w_e7 Gain4.in as Connection513
                connect "Logical operator1.in2" Junction66 as Connection530
                connect Junction66 "Relational operator4.out" as Connection531
                connect "Digital Probe5.in" Junction66 as Connection532
                connect "Relational operator1.out" Junction67 as Connection534
                connect Junction67 "Logical operator1.in" as Connection535
                connect "Digital Probe3.in" Junction67 as Connection536
                connect "Logical operator1.out" "stay connected1.ready" as Connection537
                connect "Mathematical function2.out" Junction69 as Connection544
                connect Junction69 "|V|1" as Connection545
>>>>>>> Stashed changes
                [
                    position = 7888, 7736
                    hide_name = True
                ]

                tag Goto5 {
                    value = "P_SV"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 8400, 7848
                    hide_name = True
                ]

                junction Junction3 sp
                [
                    position = 7832, 8376
                ]

                junction Junction4 sp
                [
                    position = 8352, 7760
                ]
<<<<<<< Updated upstream

                junction Junction5 sp
                [
                    position = 8624, 8456
                ]

                junction Junction6 sp
                [
                    position = 8624, 8376
                ]

                junction Junction7 sp
                [
                    position = 8728, 8376
                ]

                junction Junction8 sp
                [
                    position = 8728, 8456
                ]

                junction Junction9 sp
                [
                    position = 8728, 7760
                ]

                junction Junction10 sp
                [
                    position = 8120, 8320
                ]

                connect From3 Gain36.in as Connection748
                connect Gain36.out Sum3.in as Connection749
                connect Gain30.out Sum3.in1 as Connection752
                connect Gain28.in w_m3 as Connection7
                connect Sum2.out Gain29.in as Connection207
                [
                    breakpoints = 7944, 8224
                ]
                connect From6 Gain31.in as Connection19
                connect From7 Sum4.in as Connection21
                connect Gain31.out Sum4.in1 as Connection22
                connect Sum4.out Gain32.in as Connection23
                connect Gain32.out Sum5.in1 as Connection24
                connect From8 Sum5.in as Connection742
                connect Sum5.out Gain33.in as Connection26
                connect Gain33.out Sum8.in1 as Connection27
                connect From9 Sum8.in as Connection28
                connect Sum8.out Gain34.in as Connection29
                connect Gain35.in From10 as Connection33
                connect Gain35.out Sum9.in1 as Connection743
                connect Sum9.in From11 as Connection744
                [
                    breakpoints = 8024, 7736; 7936, 7736
                ]
                connect Integrator10.out Goto4 as Connection222
                connect Gain34.out Integrator10.in as Connection223
                connect Sum9.out Integrator11.in as Connection226
                connect Sum3.out Goto1 as Connection788
                connect Gain28.out Junction3 as Connection799
                connect Junction3 Sum7.in1 as Connection800
                [
                    breakpoints = 7832, 8376; 7832, 8344
                ]
                connect "Exciter Activation.w_PU" Junction3 as Connection801
                connect Integrator11.out Junction4 as Connection821
                connect Junction4 Goto5 as Connection822
                [
                    breakpoints = 8352, 7760
                ]
                connect From13 Junction5 as Connection824
                connect Junction5 Integrator12.in as Connection825
                connect P_b2.in Junction5 as Connection826
                connect From5 Junction6 as Connection827
                connect Junction6 Integrator9.in as Connection828
                connect P_a2.in Junction6 as Connection829
                connect Integrator9.out Junction7 as Connection830
                connect Junction7 Goto2 as Connection831
                connect P_a1.in Junction7 as Connection832
                connect Integrator12.out Junction8 as Connection833
                connect Junction8 Goto6 as Connection834
                connect P_b1.in Junction8 as Connection835
                connect P_SV Junction9 as Connection836
                connect Junction9 Junction4 as Connection837
                connect P_sv.in Junction9 as Connection838
                connect Junction10 Sum10.in1 as Connection842
                connect frequency_diff.in Junction10 as Connection843
                connect "AGC offset.out" Sum11.in as Connection846
                connect From1 Sum2.in1 as Connection849
                connect w_ref Sum7.in as Connection853
                connect Sum7.out "Rate Limiter2.in" as Connection854
                connect "Rate Limiter2.out" Junction10 as Connection855
                connect Gain30.in Sum10.out as Connection856
                connect Gain29.out Sum10.in as Connection857
                connect AGC.out Sum11.in1 as Connection858
                connect Sum11.out Gain37.in as Connection859
                connect Gain37.out Sum2.in as Connection860
                connect "Exciter Activation.exciter state" "exciter state" as Connection861
=======
                connect Junction63 "Unit Delay5.out" as Connection623
                connect Connect5 "stay connected1.connectMT" as Connection625
                connect Connect6 "Hold after connect1.connect" as Connection626
                connect Abs4.out "Relational operator1.in1" as Connection627
                [
                    breakpoints = 8024, 8048; 8128, 8048
                ]
                connect "BE1-25A Synchronizer2.del_w" "Hold after connect.in" as Connection633
                connect Sum2.out Junction81 as Connection634
                [
                    breakpoints = 7968, 8392
                ]
                connect Junction81 Junction73 as Connection635
                [
                    breakpoints = 7992, 8200; 7992, 8128
                ]
                connect "BE1-25A Synchronizer2.df" Junction81 as Connection636
                connect PLL.w Junction85 as Connection649
                connect omegaPLL.in Junction85 as Connection651
                connect "Trigonometric function2.out" Junction86 as Connection654
                connect Junction86 Sum1.in1 as Connection655
                connect "Trigonometric function1.out" Junction87 as Connection657
                connect Connect3 "Hold after connect2.connect" as Connection1234
                connect w_bus2 Sum9.in as Connection1235
                connect Sum9.out "Hold after connect2.in" as Connection1237
                connect del_w.in Junction88 as Connection1239
                connect Junction88 "Hold after connect.out" as Connection1240
                [
                    breakpoints = 8432, 8416
                ]
                connect Sum9.in1 Junction88 as Connection1241
                connect Connect7 "Hold after connect3.connect" as Connection1243
                connect Sum10.out "Hold after connect3.in" as Connection1244
                connect From47 Sum10.in as Connection1246
                connect del_V.in Junction89 as Connection1247
                connect Junction89 "Hold after connect1.out" as Connection1248
                [
                    breakpoints = 8672, 8664
                ]
                connect Sum10.in1 Junction89 as Connection1249
                connect Gain13.out w_bus1 as Connection1252
                connect w_bus3 Junction90 as Connection1254
                connect Junction90 Sum2.in1 as Connection1255
                connect w_bus.in Junction90 as Connection1256
                connect Gain13.in Junction85 as Connection1340
                [
                    breakpoints = 7640, 8584
                ]
                connect From33 "abc to qd1.a" as Connection1356
                connect "abc to qd1.b" From35 as Connection1357
                connect From34 "abc to qd1.c" as Connection1358
                connect "abc to qd1.theta" theta_bus1 as Connection1359
                connect "abc to qd1.q" Gain7.in as Connection1360
                connect Gain12.in "abc to qd1.d" as Connection1361
                connect Gain6.in "abc to qd.d" as Connection1362
                connect Gain5.in "abc to qd.q" as Connection1363
                connect "abc to qd.c" Vc_G1 as Connection1364
                connect Vb_G1 "abc to qd.b" as Connection1365
                connect "abc to qd.a" Va_G1 as Connection1366
                connect "abc to qd.theta" Junction99 as Connection1375
                connect theta_bus Junction99 as Connection1377
                connect Junction99 Junction100 as Connection1382
                [
                    breakpoints = 7200, 8640
                ]
                connect Junction100 "Unit Delay2.out" as Connection1383
                [
                    breakpoints = 7616, 8680; 7616, 8680
                ]
                connect thetaPLL.in Junction100 as Connection1384
                connect Gain12.out Junction101 as Connection1386
                connect Junction101 Goto28 as Connection1387
                connect E_q.in Junction101 as Connection1388
                connect magnitude.magnitude Junction46 as Connection326
                connect Junction46 "|V|5" as Connection327
                connect "|E|.in" Junction46 as Connection328
                connect From52 magnitude.d as Connection745
                connect From53 magnitude.q as Connection746
                connect "confine phase.in" Sum1.out as Connection1446
                [
                    breakpoints = 7776, 8048
                ]
                connect Sum1.in Junction87 as Connection1451
                [
                    breakpoints = 7696, 8000; 7632, 8000; 7632, 8000
                ]
                connect theta_E.in Gain17.out as Connection1452
                connect Gain17.in Junction87 as Connection1453
                connect theta_V.in Gain16.out as Connection1454
                connect Gain16.in Junction86 as Connection1455
                connect From54 Sum3.in as Connection1456
                connect Gain6.out Junction102 as Connection1466
                connect Junction102 PLL.d as Connection1467
                [
                    breakpoints = 7480, 8592
                ]
                connect Goto32 Junction103 as Connection1469
                connect Junction103 Junction102 as Connection1470
                connect Vq_G.in Junction103 as Connection1471
                connect Goto35 "Hold after connect3.out" as Connection1476
                connect Goto34 "Hold after connect2.out" as Connection1477
                connect "Unit Delay5.in" "stay connected1.out" as Connection1478
            }
            [
                position = 8024, 7936
                size = 112, 144
            ]

            component Subsystem "Three-phase Meter1" {
                layout = dynamic
                component src_constant zero {
                    execution_rate = "Ts"
                    value = "0"
                }
                [
                    position = 8168, 8216
                ]

                component gen_bus_join output_bus {
                    inputs = "30"
                }
                [
                    position = 8872, 7224
                    rotation = left
                ]

                component gen_bus_join extra_output_bus {
                    inputs = "12"
                }
                [
                    position = 9976, 7224
                    rotation = left
                ]

                component gen_terminator POWER_PA {
                }
                [
                    position = 10152, 7784
                    hide_name = True
                ]

                component gen_terminator POWER_PB {
                }
                [
                    position = 10152, 7864
                    hide_name = True
                ]

                component gen_terminator POWER_PC {
                }
                [
                    position = 10152, 7944
                    hide_name = True
                ]

                component gen_terminator POWER_QA {
                }
                [
                    position = 10152, 8024
                    hide_name = True
                ]

                component gen_terminator POWER_QB {
                }
                [
                    position = 10152, 8104
                    hide_name = True
                ]

                component gen_terminator POWER_QC {
                }
                [
                    position = 10152, 8184
                    hide_name = True
                ]

                component gen_terminator POWER_SA {
                }
                [
                    position = 10152, 8264
                    hide_name = True
                ]

                component gen_terminator POWER_SB {
                }
                [
                    position = 10152, 8344
                    hide_name = True
                ]

                component gen_terminator POWER_SC {
                }
                [
                    position = 10152, 8424
                    hide_name = True
                ]

                component gen_terminator POWER_PFA {
                }
                [
                    position = 10152, 8496
                    hide_name = True
                ]

                component gen_terminator POWER_PFB {
                }
                [
                    position = 10152, 8576
                    hide_name = True
                ]

                component gen_terminator POWER_PFC {
                }
                [
                    position = 10152, 8656
                    hide_name = True
                ]

                component gen_terminator extra_out {
                }
                [
                    position = 9976, 7144
                    rotation = left
                ]

                component gen_terminator Out {
                }
                [
                    position = 8872, 7144
                    rotation = left
                ]

                component pas_resistor R17 {
                    resistance = "100"
                }
                [
                    position = 7408, 8288
                    rotation = right
                ]

                component pas_resistor R18 {
                    resistance = "100"
                }
                [
                    position = 7336, 8288
                    rotation = right
                ]

                component pas_resistor R19 {
                    resistance = "100"
                }
                [
                    position = 7480, 8288
                    rotation = right
                ]

                component pas_capacitor C4 {
                }
                [
                    position = 7336, 8176
                    rotation = right
                ]

                component pas_capacitor C5 {
                }
                [
                    position = 7480, 8176
                    rotation = right
                ]

                component pas_capacitor C6 {
                }
                [
                    position = 7408, 8176
                    rotation = right
                ]

                component gen_PQ_transform "Power Meter" {
                    enable_inst_ports = "False"
                    filter_order = "second order"
                }
                [
                    position = 8984, 8624
                ]

                component pas_resistor Ra {
                    resistance = "R"
                }
                [
                    position = 7256, 8288
                    rotation = right
                ]

                component pas_resistor Rb {
                    resistance = "R"
                }
                [
                    position = 7200, 8288
                    rotation = right
                ]

                component pas_resistor Rc {
                    resistance = "R"
                }
                [
                    position = 7144, 8288
                    rotation = right
                ]

                component "core/Voltage Measurement" VAn {
                    execution_rate = "Ts"
                    sig_output = "True"
                }
                [
                    position = 7456, 8168
                    rotation = right
                    size = 64, 32
                ]

                component "core/Voltage Measurement" VBn {
                    execution_rate = "Ts"
                    sig_output = "True"
                }
                [
                    position = 7400, 8232
                    rotation = right
                    size = 64, 32
                ]

                component "core/Voltage Measurement" VCn {
                    execution_rate = "Ts"
                    sig_output = "True"
                }
                [
                    position = 7344, 8296
                    rotation = right
                    size = 64, 32
                ]

                component el_open VAB {
                }
                [
                    position = 7584, 7952
                    rotation = right
                ]

                component el_open VBC {
                }
                [
                    position = 7600, 8048
                    rotation = right
                ]

                component el_open VCA {
                }
                [
                    position = 7912, 8048
                    rotation = left
                ]

                component "core/Current Measurement" IA {
                    execution_rate = "Ts"
                    sig_output = "True"
                }
                [
                    position = 8088, 7904
                    size = 64, 32
                ]

                component "core/Current Measurement" IB {
                    execution_rate = "Ts"
                    sig_output = "True"
                }
                [
                    position = 8088, 8000
                    size = 64, 32
                ]

                component "core/Current Measurement" IC {
                    execution_rate = "Ts"
                    sig_output = "True"
                }
                [
                    position = 8088, 8096
                    size = 64, 32
                ]

                component gen_terminator Freq {
                }
                [
                    position = 9640, 7784
                    hide_name = True
                ]

                component gen_terminator VAn_RMS {
                }
                [
                    position = 9640, 7864
                    hide_name = True
                ]

                component gen_terminator VBn_RMS {
                }
                [
                    position = 9640, 7944
                    hide_name = True
                ]

                component gen_terminator VCn_RMS {
                }
                [
                    position = 9640, 8024
                    hide_name = True
                ]

                component gen_terminator VAB_RMS {
                }
                [
                    position = 9640, 8104
                    hide_name = True
                ]

                component gen_terminator VBC_RMS {
                }
                [
                    position = 9640, 8184
                    hide_name = True
                ]

                component gen_terminator VCA_RMS {
                }
                [
                    position = 9640, 8264
                    hide_name = True
                ]

                component gen_terminator VLn_RMS {
                }
                [
                    position = 9896, 8024
                    hide_name = True
                ]

                component gen_terminator VLL_RMS {
                }
                [
                    position = 9896, 8104
                    hide_name = True
                ]

                component gen_terminator IA_RMS {
                }
                [
                    position = 9896, 7784
                    hide_name = True
                ]

                component gen_terminator IB_RMS {
                }
                [
                    position = 9896, 7864
                    hide_name = True
                ]

                component gen_terminator IC_RMS {
                }
                [
                    position = 9896, 7944
                    hide_name = True
                ]

                component gen_terminator I_RMS {
                }
                [
                    position = 9896, 8184
                    hide_name = True
                ]

                component gen_probe POWER_P {
                }
                [
                    position = 9896, 8264
                ]

                component gen_probe POWER_Q {
                }
                [
                    position = 9896, 8344
                ]

                component gen_probe POWER_S {
                }
                [
                    position = 9896, 8424
                ]

                component gen_probe POWER_PF {
                }
                [
                    position = 9896, 8504
                ]

                port GND {
                    position = bottom:1
                    kind = pe
                }
                [
                    position = 7680, 8480
                    rotation = left
                ]

                port A+ {
                    position = left:1
                    kind = pe
                }
                [
                    position = 7048, 7904
                    rotation = down
                    scale = -1, 1
                ]

                port B+ {
                    position = left:2
                    kind = pe
                }
                [
                    position = 7048, 8000
                    rotation = down
                    scale = -1, 1
                ]

                port C+ {
                    position = left:3
                    kind = pe
                }
                [
                    position = 7048, 8096
                    rotation = down
                    scale = -1, 1
                ]

                port A- {
                    position = right:1
                    kind = pe
                }
                [
                    position = 8248, 7904
                    rotation = down
                ]

                port B- {
                    position = right:2
                    kind = pe
                }
                [
                    position = 8248, 8000
                    rotation = down
                ]

                port C- {
                    position = right:3
                    kind = pe
                }
                [
                    position = 8248, 8096
                    rotation = down
                ]

                tag fromIB {
                    value = "IB"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8560, 7448
                    size = 0, 0
                ]

                tag fromVAB {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8560, 7352
                    size = 0, 0
                ]

                tag fromVABRMS {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8464, 7624
                    size = 0, 0
                ]

                tag GoToZero {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 8272, 8216
                    size = 0, 0
                ]

                tag fromIC {
                    value = "IC"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8464, 7480
                    size = 0, 0
                ]

                tag fromVBCRMS {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9272, 7624
                    scale = -1, 1
                    size = 0, 0
                ]

                tag fromICRMS {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9176, 7496
                    scale = -1, 1
                    size = 0, 0
                ]

                tag fromI_RMS {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9272, 7480
                    scale = -1, 1
                    size = 0, 0
                ]

                tag fromPF4 {
                    value = "POWER_PF"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9792, 8504
                    size = 0, 0
                ]

                tag fromVCARMS {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9176, 7592
                    scale = -1, 1
                    size = 0, 0
                ]

                tag fromPF {
                    value = "POWER_PF"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9272, 7384
                    scale = -1, 1
                    size = 0, 0
                ]

                tag fromVCnRMS {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8464, 7576
                    size = 0, 0
                ]

                tag fromVN {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9176, 7352
                    scale = -1, 1
                    size = 0, 0
                ]

                tag fromFreq {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8560, 7496
                    size = 0, 0
                ]

                tag fromVBC {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8464, 7384
                    size = 0, 0
                ]

                tag fromVLn_RMS {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8560, 7592
                    size = 0, 0
                ]

                tag fromVAn {
                    value = "VAn"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8464, 7288
                    size = 0, 0
                ]

                tag fromS4 {
                    value = "POWER_S"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9792, 8424
                    size = 0, 0
                ]

                tag fromFreq4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9536, 7784
                    size = 0, 0
                ]

                tag fromVCn {
                    value = "VCn"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8464, 7336
                    size = 0, 0
                ]

                tag fromVCnRMS4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9536, 8024
                    size = 0, 0
                ]

                tag fromVAnRMS {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8464, 7528
                    size = 0, 0
                ]

                tag fromICRMS4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9792, 7944
                    size = 0, 0
                ]

                tag fromVLL_RMS {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9272, 7576
                    scale = -1, 1
                    size = 0, 0
                ]

                tag fromIARMS {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9176, 7544
                    scale = -1, 1
                    size = 0, 0
                ]

                tag fromIBRMS {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9272, 7528
                    scale = -1, 1
                    size = 0, 0
                ]

                tag fromVBnRMS {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8560, 7544
                    size = 0, 0
                ]

                tag fromS {
                    value = "POWER_S"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9176, 7400
                    scale = -1, 1
                    size = 0, 0
                ]

                tag fromVAnRMS4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9536, 7864
                    size = 0, 0
                ]

                tag fromVBnRMS4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9536, 7944
                    size = 0, 0
                ]

                tag fromVBCRMS4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9536, 8184
                    size = 0, 0
                ]

                tag fromP {
                    value = "POWER_P"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9176, 7448
                    scale = -1, 1
                    size = 0, 0
                ]

                tag fromVBn {
                    value = "VBn"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8560, 7304
                    size = 59, 20
                ]

                tag fromVABRMS4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9536, 8104
                    size = 0, 0
                ]

                tag fromVLn_RMS4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9792, 8024
                    size = 0, 0
                ]

                tag fromIA {
                    value = "IA"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8464, 7432
                    size = 0, 0
                ]

                tag fromP4 {
                    value = "POWER_P"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9792, 8264
                    size = 0, 0
                ]

                tag fromQ {
                    value = "POWER_Q"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9272, 7432
                    scale = -1, 1
                    size = 63, 20
                ]

                tag fromIN {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9176, 7304
                    scale = -1, 1
                    size = 0, 0
                ]

                tag fromVCARMS4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9536, 8264
                    size = 0, 0
                ]

                tag fromVCA {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8560, 7400
                    size = 0, 0
                ]

                tag fromI_RMS4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9792, 8184
                    size = 0, 0
                ]

                tag fromIBRMS4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9792, 7864
                    size = 0, 0
                ]

                tag fromIARMS4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9792, 7784
                    size = 0, 0
                ]

                tag fromQ4 {
                    value = "POWER_Q"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9792, 8344
                    size = 0, 0
                ]

                tag fromVNRMS {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9272, 7336
                    scale = -1, 1
                    size = 0, 0
                ]

                tag fromVLL_RMS4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9792, 8104
                    size = 0, 0
                ]

                tag fromINRMS {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9272, 7288
                    scale = -1, 1
                    size = 0, 0
                ]

                tag fromPA4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 10048, 7784
                    size = 0, 0
                ]

                tag fromSC4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 10048, 8424
                    size = 0, 0
                ]

                tag fromQA4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 10048, 8024
                    size = 0, 0
                ]

                tag fromPB4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 10048, 7864
                    size = 0, 0
                ]

                tag fromSB4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 10048, 8344
                    size = 0, 0
                ]

                tag fromQC4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 10048, 8184
                    size = 0, 0
                ]

                tag fromQB4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 10048, 8104
                    size = 0, 0
                ]

                tag fromPC4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 10048, 7944
                    size = 0, 0
                ]

                tag fromSA4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 10048, 8264
                    size = 0, 0
                ]

                tag fromPB {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9832, 7296
                    size = 59, 20
                ]

                tag fromQB {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9736, 7376
                    size = 0, 0
                ]

                tag fromQC {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9832, 7392
                    size = 0, 0
                ]

                tag fromSA {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 10120, 7392
                    scale = -1, 1
                    size = 0, 0
                ]

                tag fromPC {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9736, 7328
                    size = 0, 0
                ]

                tag fromSC {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 10120, 7344
                    scale = -1, 1
                    size = 0, 0
                ]

                tag fromSB {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 10216, 7376
                    scale = -1, 1
                    size = 0, 0
                ]

                tag fromQA {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9832, 7344
                    size = 0, 0
                ]

                tag fromPA {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 9736, 7280
                    size = 0, 0
                ]

                tag fromPFC {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 10216, 7280
                    scale = -1, 1
                    size = 0, 0
                ]

                tag fromPFA {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 10216, 7328
                    scale = -1, 1
                    size = 0, 0
                ]

                tag fromPFB {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 10120, 7296
                    scale = -1, 1
                    size = 0, 0
                ]

                tag fromPFA4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 10048, 8496
                    size = 0, 0
                ]

                tag fromPFB4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 10048, 8576
                    size = 0, 0
                ]

                tag fromPFC4 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 10048, 8656
                    size = 0, 0
                ]

                tag GoToVAn {
                    value = "VAn"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 7776, 8168
                    size = 0, 0
                ]

                tag GoToVBn {
                    value = "VBn"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 7776, 8232
                    size = 0, 0
                ]

                tag GoToVCn {
                    value = "VCn"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 7776, 8296
                    size = 0, 0
                ]

                tag GoToIA {
                    value = "IA"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 8144, 7864
                    size = 0, 0
                ]

                tag GoToIB {
                    value = "IB"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 8144, 7960
                    size = 0, 0
                ]

                tag GoToIC {
                    value = "IC"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 8144, 8056
                    size = 0, 0
                ]

                tag fromVAn3 {
                    value = "VAn"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8880, 8488
                    rotation = right
                ]

                tag fromVBn3 {
                    value = "VBn"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8856, 8528
                    rotation = right
                ]

                tag fromVCn3 {
                    value = "VCn"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8832, 8568
                    rotation = right
                ]

                tag fromIA3 {
                    value = "IA"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8832, 8792
                    rotation = left
                ]

                tag fromIB3 {
                    value = "IB"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8856, 8752
                    rotation = left
                ]

                tag fromIC3 {
                    value = "IC"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8880, 8712
                    rotation = left
                ]

                tag GoToP {
                    value = "POWER_P"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 9064, 8504
                    rotation = left
                ]

                tag GoToQ {
                    value = "POWER_Q"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 9088, 8544
                    rotation = left
                ]

                tag GoToS {
                    value = "POWER_S"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 9088, 8760
                    rotation = right
                ]

                tag GoToPF {
                    value = "POWER_PF"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 9064, 8720
                    rotation = right
                ]

                junction Junction225 pe
                [
                    position = 7200, 8368
                ]

                junction Junction230 pe
                [
                    position = 7256, 8368
                ]

                junction JunAn- pe
                [
                    position = 7680, 8368
                ]

                junction Junction234 pe
                [
                    position = 7336, 8368
                ]

                junction Junction235 pe
                [
                    position = 7408, 8368
                ]

                junction Junction236 pe
                [
                    position = 7480, 8368
                ]

                junction Junction237 pe
                [
                    position = 7256, 7904
                ]

                junction Junction238 pe
                [
                    position = 7584, 8368
                ]

                junction Junction239 pe
                [
                    position = 7632, 8368
                ]

                junction Junction240 pe
                [
                    position = 7144, 8096
                ]

                junction Junction241 pe
                [
                    position = 7200, 8000
                ]

                junction Junction242 pe
                [
                    position = 7336, 8096
                ]

                junction Junction243 pe
                [
                    position = 7408, 8000
                ]

                junction Junction244 pe
                [
                    position = 7480, 7904
                ]

                junction Junction245 pe
                [
                    position = 7584, 8096
                ]

                junction Junction246 pe
                [
                    position = 7632, 8000
                ]

                junction Junction247 pe
                [
                    position = 7680, 7904
                ]

                junction Junction248 pe
                [
                    position = 7144, 8096
                ]

                junction Junction249 pe
                [
                    position = 7200, 8000
                ]

                junction Junction250 pe
                [
                    position = 7256, 7904
                ]

                junction Junction251 pe
                [
                    position = 7584, 7904
                ]

                junction Junction252 pe
                [
                    position = 7584, 8000
                ]

                junction Junction253 pe
                [
                    position = 7584, 8096
                ]

                junction Junction254 pe
                [
                    position = 7600, 8096
                ]

                junction Junction255 pe
                [
                    position = 7600, 8000
                ]

                junction Junction256 pe
                [
                    position = 7632, 8000
                ]

                junction Junction257 pe
                [
                    position = 7680, 7904
                ]

                junction Junction258 pe
                [
                    position = 7912, 7904
                ]

                junction Junction259 pe
                [
                    position = 7912, 8096
                ]

                junction Junction260 pe
                [
                    position = 7456, 7904
                ]

                junction Junction261 pe
                [
                    position = 7456, 8368
                ]

                junction Junction262 pe
                [
                    position = 7400, 8368
                ]

                junction Junction263 pe
                [
                    position = 7400, 8000
                ]

                junction Junction264 pe
                [
                    position = 7344, 8096
                ]

                junction Junction265 pe
                [
                    position = 7344, 8368
                ]

                connect GoToZero zero.out as Connection3194
                connect Junction225 Junction230 as Connection3087
                connect fromFreq output_bus.in9 as Connection3140
                connect fromIA output_bus.in6 as Connection3137
                connect fromIARMS output_bus.in18 as Connection3157
                connect fromIB output_bus.in7 as Connection3138
                connect fromIBRMS output_bus.in19 as Connection3156
                connect fromIC output_bus.in8 as Connection3139
                connect fromICRMS output_bus.in20 as Connection3155
                connect fromIN output_bus.in28 as Connection3192
                connect fromINRMS output_bus.in29 as Connection3193
                connect fromI_RMS output_bus.in21 as Connection3154
                connect fromP output_bus.in22 as Connection3186
                connect fromPF output_bus.in25 as Connection3189
                connect fromQ output_bus.in23 as Connection3187
                connect fromS output_bus.in24 as Connection3188
                connect fromVAB output_bus.in3 as Connection3134
                connect fromVABRMS output_bus.in14 as Connection3145
                connect fromVAn output_bus.in as Connection3162
                connect fromVAnRMS output_bus.in10 as Connection3141
                connect fromVBC output_bus.in4 as Connection3135
                connect fromVBCRMS output_bus.in15 as Connection3160
                connect fromVBn output_bus.in1 as Connection3132
                connect fromVBnRMS output_bus.in11 as Connection3142
                connect fromVCA output_bus.in5 as Connection3136
                connect fromVCARMS output_bus.in16 as Connection3159
                connect fromVCn output_bus.in2 as Connection3133
                connect fromVCnRMS output_bus.in12 as Connection3143
                connect fromVLL_RMS output_bus.in17 as Connection3158
                connect fromVLn_RMS output_bus.in13 as Connection3144
                connect fromVN output_bus.in26 as Connection3190
                connect fromVNRMS output_bus.in27 as Connection3191
                connect JunAn- GND as Connection3163
                connect fromQB extra_output_bus.in4 as Connection3204
                connect fromPB extra_output_bus.in1 as Connection3201
                connect fromPC extra_output_bus.in2 as Connection3202
                connect fromPA extra_output_bus.in as Connection3200
                connect fromQC extra_output_bus.in5 as Connection3205
                connect fromQA extra_output_bus.in3 as Connection3203
                connect fromSB extra_output_bus.in7 as Connection3207
                connect fromSA extra_output_bus.in6 as Connection3206
                connect fromSC extra_output_bus.in8 as Connection3208
                connect fromPFA extra_output_bus.in9 as Connection3210
                connect fromPFB extra_output_bus.in10 as Connection3211
                connect fromPFC extra_output_bus.in11 as Connection3212
                connect fromPA4 POWER_PA.in as ConnPAprobe
                connect fromPB4 POWER_PB.in as ConnPBprobe
                connect fromPC4 POWER_PC.in as ConnPCprobe
                connect fromQA4 POWER_QA.in as ConnQAprobe
                connect fromQB4 POWER_QB.in as ConnQBprobe
                connect fromQC4 POWER_QC.in as ConnQCprobe
                connect fromSA4 POWER_SA.in as ConnSAprobe
                connect fromSB4 POWER_SB.in as ConnSBprobe
                connect fromSC4 POWER_SC.in as ConnSCprobe
                connect fromPFA4 POWER_PFA.in as ConnPFAprobe
                connect fromPFB4 POWER_PFB.in as ConnPFBprobe
                connect fromPFC4 POWER_PFC.in as ConnPFCprobe
                connect extra_output_bus.out extra_out.in as conn_extra_out
                connect output_bus.out Out.in as conn_Out
                connect C4.n_node R18.p_node as Connection448
                connect C6.n_node R17.p_node as Connection462
                connect R19.p_node C5.n_node as Connection456
                connect Junction234 Junction230 as Connection3223
                connect R18.n_node Junction234 as Connection3224
                connect R17.n_node Junction235 as Connection3227
                connect R19.n_node Junction236 as Connection3230
                connect fromVAn3 "Power Meter.va" as ConnVAPM
                connect fromVBn3 "Power Meter.vb" as ConnVBPM
                connect fromVCn3 "Power Meter.vc" as ConnVCPM
                connect fromIA3 "Power Meter.ia" as ConnIAPM
                connect fromIB3 "Power Meter.ib" as ConnIBPM
                connect fromIC3 "Power Meter.ic" as ConnICPM
                connect "Power Meter.Pdc" GoToP as ConnPMPdc
                connect "Power Meter.Qdc" GoToQ as ConnPMQdc
                connect "Power Meter.apparent" GoToS as ConnPMS
                connect "Power Meter.k_factor" GoToPF as ConnPMPF
                connect A+ Junction237 as Connection3244
                connect Junction236 Junction238 as Connection3251
                [
                    breakpoints = 7480, 8368; 7568, 8368
                ]
                connect Junction238 Junction239 as Connection3254
                connect Junction239 JunAn- as Connection3255
                [
                    breakpoints = 7624, 8368; 7624, 8368
                ]
                connect C+ Junction240 as Connection3257
                connect Junction241 B+ as Connection3261
                [
                    breakpoints = 7200, 8000; 7200, 8000
                ]
                connect C4.p_node Junction242 as Connection3265
                connect C6.p_node Junction243 as Connection3268
                connect C5.p_node Junction244 as Connection3271
                connect Ra.n_node Junction230 as Connection3088
                connect Rb.n_node Junction225 as Connection3070
                connect Rc.n_node Junction225 as Connection3068
                connect fromFreq4 Freq.in as ConnFreqprobe
                connect fromVAnRMS4 VAn_RMS.in as ConnVAnRMSprobe
                connect fromVBnRMS4 VBn_RMS.in as ConnVBnRMSprobe
                connect fromVCnRMS4 VCn_RMS.in as ConnVCnRMSprobe
                connect fromVABRMS4 VAB_RMS.in as ConnVABRMSprobe
                connect fromVBCRMS4 VBC_RMS.in as ConnVBCRMSprobe
                connect fromVCARMS4 VCA_RMS.in as ConnVCARMSprobe
                connect fromVLn_RMS4 VLn_RMS.in as ConnVLn_RMSprobe
                connect fromVLL_RMS4 VLL_RMS.in as ConnVLL_RMSprobe
                connect fromIARMS4 IA_RMS.in as ConnIARMSprobe
                connect fromIBRMS4 IB_RMS.in as ConnIBRMSprobe
                connect fromICRMS4 IC_RMS.in as ConnICRMSprobe
                connect fromI_RMS4 I_RMS.in as ConnI_RMSprobe
                connect fromP4 POWER_P.in as ConnPprobe
                connect fromQ4 POWER_Q.in as ConnQprobe
                connect fromS4 POWER_S.in as ConnSprobe
                connect fromPF4 POWER_PF.in as ConnPFprobe
                connect Junction242 Junction248 as Connection3280
                connect Junction248 Junction240 as Connection3281
                connect Rc.p_node Junction248 as Connection3282
                connect Junction249 Junction241 as Connection3284
                connect Rb.p_node Junction249 as Connection3285
                connect Junction250 Junction237 as Connection3287
                connect Ra.p_node Junction250 as Connection3288
                connect Junction251 Junction244 as Connection3290
                connect VAB.p_node Junction251 as Connection3291
                connect Junction252 Junction243 as Connection3293
                connect VAB.n_node Junction252 as Connection3294
                connect Junction245 Junction253 as Connection3295
                connect Junction254 Junction253 as Connection3299
                connect VBC.n_node Junction254 as Connection3300
                connect Junction255 Junction252 as Connection3302
                connect VBC.p_node Junction255 as Connection3303
                connect Junction246 Junction256 as Connection3304
                connect Junction256 Junction255 as Connection3305
                connect IB.p_node Junction256 as Connection3306
                connect Junction247 Junction257 as Connection3307
                connect Junction257 Junction251 as Connection3308
                connect IA.n_node A- as Connection3310
                connect IB.n_node B- as Connection3311
                connect C- IC.n_node as Connection3312
                connect GoToIC IC.out as Connection3313
                connect GoToIB IB.out as Connection3314
                connect GoToIA IA.out as Connection3315
                connect IA.p_node Junction258 as Connection3316
                connect Junction258 Junction257 as Connection3317
                connect VCA.n_node Junction258 as Connection3318
                connect IC.p_node Junction259 as Connection3319
                connect Junction259 Junction254 as Connection3320
                connect VCA.p_node Junction259 as Connection3321
                connect Junction244 Junction260 as Connection3322
                connect Junction260 Junction250 as Connection3323
                connect VAn.p_node Junction260 as Connection3324
                connect Junction236 Junction261 as Connection3325
                connect VAn.n_node Junction261 as Connection3327
                [
                    breakpoints = 7448, 8248; 7448, 8368
                ]
                connect Junction261 Junction262 as Connection3328
                connect Junction262 Junction235 as Connection3329
                connect VBn.n_node Junction262 as Connection3330
                connect Junction243 Junction263 as Connection3331
                connect Junction263 Junction249 as Connection3332
                connect VBn.p_node Junction263 as Connection3333
                connect Junction253 Junction264 as Connection3334
                connect Junction264 Junction242 as Connection3335
                connect VCn.p_node Junction264 as Connection3336
                connect Junction235 Junction265 as Connection3337
                connect Junction265 Junction234 as Connection3338
                connect VCn.n_node Junction265 as Connection3339
                connect VCn.out GoToVCn as Connection3340
                connect GoToVBn VBn.out as Connection3341
                connect VAn.out GoToVAn as Connection3342

                P_meas = "True"
                R = "4716"
                Ts = "Ts"
                enable_out = "False"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Three-phase Meter block. </p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Line voltages, phase voltages, currents, frequency, RMS and power measurements are selectable through mask.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Measurements are available as SCADA probes and also through the component output buses. The \"Meter Split\" component used together with \"Three-phase Meter\" enables easy signal selection.</p></body></html>"
                    help_file = "three_phase_meter.html"

                    R {
                        label = "Snubber resistance"
                        widget = edit
                        type = generic
                        default_value = "1e5"
                        unit = "Ω"
                        group = "General:1"
                    }

                    n_cycles {
                        label = "Number of cycles to average on RMS calculation"
                        widget = edit
                        type = generic
                        default_value = "1"
                        unit = " (integer)"
                        group = "General"
                    }

                    Ts {
                        label = "Execution rate"
                        widget = edit
                        type = generic
                        default_value = "100e-6"
                        unit = "s"
                        group = "General"
                    }

                    enable_probes {
                        label = "Enable internal probes"
                        widget = checkbox
                        type = bool
                        default_value = "True"
                        group = "General"
                        no_evaluate

                        CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            if new_value:
                                freq = mdl.get_property_value(mdl.prop(container_handle, "freq"))
                                if freq == True:
                                    place_probe(mdl, comp_handle, new_value, "Freq", "Freq")
                                VLn_rms = mdl.get_property_value(mdl.prop(container_handle, "VLn_rms"))
                                if VLn_rms == True:
                                    place_probe(mdl, comp_handle, new_value, "VAnRMS", "VAn_RMS")
                                    place_probe(mdl, comp_handle, new_value, "VBnRMS", "VBn_RMS")
                                    place_probe(mdl, comp_handle, new_value, "VCnRMS", "VCn_RMS")
                                VLL_rms = mdl.get_property_value(mdl.prop(container_handle, "VLL_rms"))
                                if VLL_rms == True:
                                    place_probe(mdl, comp_handle, new_value, "VABRMS", "VAB_RMS")
                                    place_probe(mdl, comp_handle, new_value, "VBCRMS", "VBC_RMS")
                                    place_probe(mdl, comp_handle, new_value, "VCARMS", "VCA_RMS")
                                I_rms = mdl.get_property_value(mdl.prop(container_handle, "I_rms"))
                                if I_rms == True:
                                    place_probe(mdl, comp_handle, new_value, "IARMS", "IA_RMS")
                                    place_probe(mdl, comp_handle, new_value, "IBRMS", "IB_RMS")
                                    place_probe(mdl, comp_handle, new_value, "ICRMS", "IC_RMS")
                                VLn_avg_rms = mdl.get_property_value(mdl.prop(container_handle, "VLn_avg_rms"))
                                if VLn_avg_rms == True:
                                    place_probe(mdl, comp_handle, new_value, "VLn_RMS", "VLn_RMS")
                                VLL_avg_rms = mdl.get_property_value(mdl.prop(container_handle, "VLL_avg_rms"))
                                if VLL_avg_rms == True:
                                    place_probe(mdl, comp_handle, new_value, "VLL_RMS", "VLL_RMS")
                                I_avg_rms = mdl.get_property_value(mdl.prop(container_handle, "I_avg_rms"))
                                if I_avg_rms == True:
                                    place_probe(mdl, comp_handle, new_value, "I_RMS", "I_RMS")
                                P_meas = mdl.get_property_value(mdl.prop(container_handle, "P_meas"))
                                if P_meas == True:
                                    place_probe(mdl, comp_handle, new_value, "P", "POWER_P")
                                    place_probe(mdl, comp_handle, new_value, "Q", "POWER_Q")
                                    place_probe(mdl, comp_handle, new_value, "S", "POWER_S")
                                    place_probe(mdl, comp_handle, new_value, "PF", "POWER_PF")
                        
                                    p_method = mdl.get_property_value(mdl.prop(container_handle, "P_method"))
                                    if p_method == "RMS based":
                                        place_probe(mdl, comp_handle, new_value, "PA", "POWER_PA")
                                        place_probe(mdl, comp_handle, new_value, "PB", "POWER_PB")
                                        place_probe(mdl, comp_handle, new_value, "PC", "POWER_PC")
                                        place_probe(mdl, comp_handle, new_value, "QA", "POWER_QA")
                                        place_probe(mdl, comp_handle, new_value, "QB", "POWER_QB")
                                        place_probe(mdl, comp_handle, new_value, "QC", "POWER_QC")
                                        place_probe(mdl, comp_handle, new_value, "SA", "POWER_SA")
                                        place_probe(mdl, comp_handle, new_value, "SB", "POWER_SB")
                                        place_probe(mdl, comp_handle, new_value, "SC", "POWER_SC")
                                        place_probe(mdl, comp_handle, new_value, "PFA", "POWER_PFA")
                                        place_probe(mdl, comp_handle, new_value, "PFB", "POWER_PFB")
                                        place_probe(mdl, comp_handle, new_value, "PFC", "POWER_PFC")
                            else:
                                place_probe(mdl, comp_handle, new_value, "Freq", "Freq")
                                place_probe(mdl, comp_handle, new_value, "VAnRMS", "VAn_RMS")
                                place_probe(mdl, comp_handle, new_value, "VBnRMS", "VBn_RMS")
                                place_probe(mdl, comp_handle, new_value, "VCnRMS", "VCn_RMS")
                                place_probe(mdl, comp_handle, new_value, "VABRMS", "VAB_RMS")
                                place_probe(mdl, comp_handle, new_value, "VBCRMS", "VBC_RMS")
                                place_probe(mdl, comp_handle, new_value, "VCARMS", "VCA_RMS")
                                place_probe(mdl, comp_handle, new_value, "IARMS", "IA_RMS")
                                place_probe(mdl, comp_handle, new_value, "IBRMS", "IB_RMS")
                                place_probe(mdl, comp_handle, new_value, "ICRMS", "IC_RMS")
                                place_probe(mdl, comp_handle, new_value, "VLn_RMS", "VLn_RMS")
                                place_probe(mdl, comp_handle, new_value, "VLL_RMS", "VLL_RMS")
                                place_probe(mdl, comp_handle, new_value, "I_RMS", "I_RMS")
                                place_probe(mdl, comp_handle, new_value, "P", "POWER_P")
                                place_probe(mdl, comp_handle, new_value, "PA", "POWER_PA")
                                place_probe(mdl, comp_handle, new_value, "PB", "POWER_PB")
                                place_probe(mdl, comp_handle, new_value, "PC", "POWER_PC")
                                place_probe(mdl, comp_handle, new_value, "Q", "POWER_Q")
                                place_probe(mdl, comp_handle, new_value, "QA", "POWER_QA")
                                place_probe(mdl, comp_handle, new_value, "QB", "POWER_QB")
                                place_probe(mdl, comp_handle, new_value, "QC", "POWER_QC")
                                place_probe(mdl, comp_handle, new_value, "S", "POWER_S")
                                place_probe(mdl, comp_handle, new_value, "SA", "POWER_SA")
                                place_probe(mdl, comp_handle, new_value, "SB", "POWER_SB")
                                place_probe(mdl, comp_handle, new_value, "SC", "POWER_SC")
                                place_probe(mdl, comp_handle, new_value, "PF", "POWER_PF")
                                place_probe(mdl, comp_handle, new_value, "PFA", "POWER_PFA")
                                place_probe(mdl, comp_handle, new_value, "PFB", "POWER_PFB")
                                place_probe(mdl, comp_handle, new_value, "PFC", "POWER_PFC")
                        ENDCODE
                    }

                    enable_out {
                        label = "Enable output port"
                        widget = checkbox
                        type = bool
                        default_value = "True"
                        group = "General"
                        no_evaluate

                        CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            placePort(mdl, comp_handle, new_value, "Out", "output_bus", "1")
                        ENDCODE
                    }

                    remove_snubber {
                        label = "Remove snubbers"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        group = "General"
                        no_evaluate

                        CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            removeSnubber(mdl, comp_handle, new_value)
                            if new_value:
                                mdl.warning("Removing snubbers may cause degeneration and result in incorrect measurements. Be sure to connect the ground port to a valid reference.", context=prop_handle)
                                mdl.disable_property(mdl.prop(container_handle, "R"))
                            else:
                                mdl.enable_property(mdl.prop(container_handle, "R"))
                        ENDCODE

                        CODE property_value_edited
                            if new_value:
                                mdl.disable_property(mdl.prop(container_handle, "R"))
                            else:
                                mdl.enable_property(mdl.prop(container_handle, "R"))
                        ENDCODE
                    }

                    VAn {
                        label = "Phase voltage measurement (A)"
                        widget = checkbox
                        type = bool
                        default_value = "True"
                        group = "Voltage:2"
                        disabled
                        no_evaluate

                        CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            place_Vmeas(mdl, comp_handle, new_value, "An", (6784, 7896))
                        ENDCODE
                    }

                    VBn {
                        label = "Phase voltage measurement (B)"
                        widget = checkbox
                        type = bool
                        default_value = "True"
                        group = "Voltage"
                        disabled
                        no_evaluate

                        CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            place_Vmeas(mdl, comp_handle, new_value, "Bn", (6728, 7960), tag_xoffset=156)
                        ENDCODE
                    }

                    VCn {
                        label = "Phase voltage measurement (C)"
                        widget = checkbox
                        type = bool
                        default_value = "True"
                        group = "Voltage"
                        disabled
                        no_evaluate

                        CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            place_Vmeas(mdl, comp_handle, new_value, "Cn", (6672, 8024), tag_xoffset=212)
                        ENDCODE
                    }

                    VAB {
                        label = "Line voltage measurement (AB)"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        group = "Voltage"
                        no_evaluate

                        CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            place_Vmeas(mdl, comp_handle, new_value, "AB", (6912, 7680))
                        ENDCODE
                    }

                    VBC {
                        label = "Line voltage measurement (BC)"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        group = "Voltage"
                        no_evaluate

                        CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            place_Vmeas(mdl, comp_handle, new_value, "BC", (6928, 7776))
                        ENDCODE
                    }

                    VCA {
                        label = "Line voltage measurement (CA)"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        group = "Voltage"
                        no_evaluate

                        CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            place_Vmeas(mdl, comp_handle, new_value, "CA", (7240, 7776), rotate="left",
                                            rotate_tag="down", tag_xoffset=-96)
                        ENDCODE
                    }

                    IA {
                        label = "Phase current measurement (A)"
                        widget = checkbox
                        type = bool
                        default_value = "True"
                        group = "Current:3"
                        disabled
                        no_evaluate

                        CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            place_Imeas(mdl, comp_handle, new_value, "A", (7416, 7632))
                        ENDCODE
                    }

                    IB {
                        label = "Phase current measurement (B)"
                        widget = checkbox
                        type = bool
                        default_value = "True"
                        group = "Current"
                        disabled
                        no_evaluate

                        CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            place_Imeas(mdl, comp_handle, new_value, "B", (7416, 7728))
                        ENDCODE
                    }

                    IC {
                        label = "Phase current measurement (C)"
                        widget = checkbox
                        type = bool
                        default_value = "True"
                        group = "Current"
                        disabled
                        no_evaluate

                        CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            place_Imeas(mdl, comp_handle, new_value, "C", (7416, 7824))
                        ENDCODE
                    }

                    freq {
                        label = "Frequency measurement"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        group = "Frequency:4"
                        no_evaluate

                        CODE property_value_changed
                            if new_value:
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                            else:
                                P_meas = mdl.get_property_value(mdl.prop(container_handle, "P_meas"))
                                if not P_meas:
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                            
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            place_PLL(mdl, comp_handle, new_value)
                            enable_probes = mdl.get_property_value(mdl.prop(container_handle, "enable_probes"))
                            if enable_probes == True:
                                place_probe(mdl, comp_handle, new_value, "Freq", "Freq")
                        ENDCODE

                        CODE property_value_edited
                            if new_value:
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                            else:
                                P_meas = mdl.get_property_disp_value(mdl.prop(container_handle, "P_meas"))
                                if not P_meas:
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                        ENDCODE
                    }

                    VLn_rms {
                        label = "Phase voltage RMS measurements (VAn, VBn, VCn)"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        group = "Voltage RMS:5"
                        no_evaluate

                        CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            if new_value:
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                place_measSM(mdl, comp_handle, new_value)
                            else:
                                VLL_rms = mdl.get_property_value(mdl.prop(container_handle, "VLL_rms"))
                                I_rms = mdl.get_property_value(mdl.prop(container_handle, "I_rms"))
                                if not ((VLL_rms == True) or (I_rms == True)):
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                    place_measSM(mdl, comp_handle, new_value)
                            
                            place_3phRMS(mdl, comp_handle, new_value, "VLn_RMS", (8416, 7904), ("VAn", "VBn", "VCn"))
                            enable_probes = mdl.get_property_value(mdl.prop(container_handle, "enable_probes"))
                            if enable_probes == True:
                                place_probe(mdl, comp_handle, new_value, "VAnRMS", "VAn_RMS")
                                place_probe(mdl, comp_handle, new_value, "VBnRMS", "VBn_RMS")
                                place_probe(mdl, comp_handle, new_value, "VCnRMS", "VCn_RMS")
                        ENDCODE

                        CODE property_value_edited
                            if new_value:
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                            else:
                                VLL_rms = mdl.get_property_disp_value(mdl.prop(container_handle, "VLL_rms"))
                                I_rms = mdl.get_property_disp_value(mdl.prop(container_handle, "I_rms"))
                                if not (VLL_rms or I_rms):
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                        ENDCODE
                    }

                    VLL_rms {
                        label = "Line voltage RMS measurements (VAB, VBC, VCA)"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        group = "Voltage RMS"
                        no_evaluate

                        CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            if new_value:
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAB", "VBC", "VCA"))
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                place_measSM(mdl, comp_handle, new_value)
                            else:
                                VLn_rms = mdl.get_property_value(mdl.prop(container_handle, "VLn_rms"))
                                I_rms = mdl.get_property_value(mdl.prop(container_handle, "I_rms"))
                                if not (VLn_rms or I_rms):
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                    place_measSM(mdl, comp_handle, new_value)
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAB", "VBC", "VCA"))
                            
                            
                            
                            place_3phRMS(mdl, comp_handle, new_value, "VLL_RMS", (8416, 8314), ("VAB", "VBC", "VCA"))
                            enable_probes = mdl.get_property_value(mdl.prop(container_handle, "enable_probes"))
                            if enable_probes == True:
                                place_probe(mdl, comp_handle, new_value, "VABRMS", "VAB_RMS")
                                place_probe(mdl, comp_handle, new_value, "VBCRMS", "VBC_RMS")
                                place_probe(mdl, comp_handle, new_value, "VCARMS", "VCA_RMS")
                        ENDCODE

                        CODE property_value_edited
                            if new_value:
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAB", "VBC", "VCA"))
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                            else:
                                VLn_rms = mdl.get_property_disp_value(mdl.prop(container_handle, "VLn_rms"))
                                I_rms = mdl.get_property_disp_value(mdl.prop(container_handle, "I_rms"))
                                if not (VLn_rms or I_rms):
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAB", "VBC", "VCA"))
                        ENDCODE
                    }

                    VLn_avg_rms {
                        label = "Average phase voltage RMS measurement (VLn)"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        group = "Voltage RMS"
                        no_evaluate

                        CODE property_value_changed
                            if new_value:
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLn_rms")
                            else:
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLn_rms")
                            
                            
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            place_avg_rms(mdl, comp_handle, new_value, "VLn_RMS", (8952, 7824), ("VAn", "VBn", "VCn"))
                            enable_probes = mdl.get_property_value(mdl.prop(container_handle, "enable_probes"))
                            if enable_probes == True:
                                place_probe(mdl, comp_handle, new_value, "VLn_RMS", "VLn_RMS")
                        ENDCODE

                        CODE property_value_edited
                            if new_value:
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLn_rms")
                            else:
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLn_rms")
                        ENDCODE
                    }

                    VLL_avg_rms {
                        label = "Average line voltage RMS measurement (VLL)"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        group = "Voltage RMS"
                        no_evaluate

                        CODE property_value_changed
                            if new_value:
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAB", "VBC", "VCA"))
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLL_rms")
                            else:
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLL_rms")
                            
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            place_avg_rms(mdl, comp_handle, new_value, "VLL_RMS", (8952, 8074), ("VAB", "VBC", "VCA"))
                            enable_probes = mdl.get_property_value(mdl.prop(container_handle, "enable_probes"))
                            if enable_probes == True:
                                place_probe(mdl, comp_handle, new_value, "VLL_RMS", "VLL_RMS")
                        ENDCODE

                        CODE property_value_edited
                            if new_value:
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAB", "VBC", "VCA"))
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLL_rms")
                            else:
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLL_rms")
                        ENDCODE
                    }

                    I_rms {
                        label = "Phase current RMS measurements (IA, IB, IC)"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        group = "Current RMS:6"
                        no_evaluate

                        CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            if new_value:
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("IA", "IB", "IC"))
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                place_measSM(mdl, comp_handle, new_value)
                            else:
                                VLn_rms = mdl.get_property_value(mdl.prop(container_handle, "VLn_rms"))
                                VLL_rms = mdl.get_property_value(mdl.prop(container_handle, "VLL_rms"))
                                if not (VLn_rms or VLL_rms):
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                    place_measSM(mdl, comp_handle, new_value)
                                P_meas = mdl.get_property_value(mdl.prop(container_handle, "P_meas"))
                                if not P_meas:
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("IA", "IB", "IC"))
                            
                            
                            place_3phRMS(mdl, comp_handle, new_value, "I_RMS", (8416, 8724), ("IA", "IB", "IC"))
                            enable_probes = mdl.get_property_value(mdl.prop(container_handle, "enable_probes"))
                            if enable_probes == True:
                                place_probe(mdl, comp_handle, new_value, "IARMS", "IA_RMS")
                                place_probe(mdl, comp_handle, new_value, "IBRMS", "IB_RMS")
                                place_probe(mdl, comp_handle, new_value, "ICRMS", "IC_RMS")
                        ENDCODE

                        CODE property_value_edited
                            if new_value:
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("IA", "IB", "IC"))
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                            else:
                                VLn_rms = mdl.get_property_disp_value(mdl.prop(container_handle, "VLn_rms"))
                                VLL_rms = mdl.get_property_disp_value(mdl.prop(container_handle, "VLL_rms"))
                                if not (VLn_rms or VLL_rms):
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                P_meas = mdl.get_property_disp_value(mdl.prop(container_handle, "P_meas"))
                                if not P_meas:
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("IA", "IB", "IC"))
                        ENDCODE
                    }

                    I_avg_rms {
                        label = "Average phase current RMS measurement (I)"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        group = "Current RMS"
                        no_evaluate

                        CODE property_value_changed
                            if new_value:
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("IA", "IB", "IC"))
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "I_rms")
                            else:
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "I_rms")
                            
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            place_avg_rms(mdl, comp_handle, new_value, "I_RMS", (8952, 8324), ("IA", "IB", "IC"))
                            enable_probes = mdl.get_property_value(mdl.prop(container_handle, "enable_probes"))
                            if enable_probes == True:
                                place_probe(mdl, comp_handle, new_value, "I_RMS", "I_RMS")
                        ENDCODE

                        CODE property_value_edited
                            if new_value:
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("IA", "IB", "IC"))
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "I_rms")
                            else:
                                sp_meas_dependent_checkbox(mdl, container_handle, new_value, "I_rms")
                        ENDCODE
                    }

                    P_method {
                        label = "Power measurement method"
                        widget = combo
                        combo_values = "alpha-beta", "RMS based"
                        type = string
                        default_value = "alpha-beta"
                        group = "Power:7"
                        disabled
                        no_evaluate

                        CODE property_value_changed
                            if new_value == "alpha-beta":
                                mdl.set_property_value(mdl.prop(container_handle, "enable_extra_out"), False)
                                mdl.disable_property(mdl.prop(container_handle, "enable_extra_out"))
                            else:
                                mdl.enable_property(mdl.prop(container_handle, "enable_extra_out"))
                        ENDCODE

                        CODE property_value_edited
                            mdl.set_property_disp_value(mdl.prop(container_handle, "P_meas"), False)
                            mdl.set_property_value(mdl.prop(container_handle, "P_meas"), False)
                            
                            if new_value == "alpha-beta":
                                mdl.set_property_disp_value(mdl.prop(container_handle, "enable_extra_out"), False)
                                mdl.set_property_value(mdl.prop(container_handle, "enable_extra_out"), False)
                                mdl.disable_property(mdl.prop(container_handle, "enable_extra_out"))
                            else:
                                mdl.enable_property(mdl.prop(container_handle, "enable_extra_out"))
                        ENDCODE
                    }

                    enable_extra_out {
                        label = "Enable extra output port"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        group = "Power"
                        disabled
                        no_evaluate

                        CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            placePort(mdl, comp_handle, new_value, "extra_out", "extra_output_bus", 2)
                        ENDCODE
                    }

                    P_meas {
                        label = "Power measurements"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        group = "Power"
                        no_evaluate

                        CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            p_method = mdl.get_property_value(mdl.prop(container_handle, "P_method"))
                            if new_value:
                                mdl.disable_property(mdl.prop(container_handle, "P_method"))
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("IA", "IB", "IC"))
                                if p_method == "RMS based":
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLn_rms")
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "I_rms")
                                    place_measSM(mdl, comp_handle, new_value)
                                    placeSubModetag(mdl, comp_handle, new_value)
                            else:
                                mdl.enable_property(mdl.prop(container_handle, "P_method"))
                                if p_method == "RMS based":
                                    VLnAVG = mdl.get_property_value(mdl.prop(container_handle, "VLn_avg_rms"))
                                    if not VLnAVG:
                                        sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLn_rms")
                                    IAVG = mdl.get_property_value(mdl.prop(container_handle, "I_avg_rms"))
                                    if not IAVG:
                                        sp_meas_dependent_checkbox(mdl, container_handle, new_value, "I_rms")
                                    placeSubModetag(mdl, comp_handle, new_value)
                            
                            if p_method == "RMS based":
                                place_RMS_power_meter(mdl, comp_handle, new_value)
                            else:
                                place_AB_power_meter(mdl, comp_handle, new_value)
                            
                            enable_probes = mdl.get_property_value(mdl.prop(container_handle, "enable_probes"))
                            if enable_probes == True:
                                place_probe(mdl, comp_handle, new_value, "P", "POWER_P")
                                place_probe(mdl, comp_handle, new_value, "Q", "POWER_Q")
                                place_probe(mdl, comp_handle, new_value, "S", "POWER_S")
                                place_probe(mdl, comp_handle, new_value, "PF", "POWER_PF")
                                
                                if p_method == "RMS based":
                                    place_probe(mdl, comp_handle, new_value, "PA", "POWER_PA")
                                    place_probe(mdl, comp_handle, new_value, "PB", "POWER_PB")
                                    place_probe(mdl, comp_handle, new_value, "PC", "POWER_PC")
                                    place_probe(mdl, comp_handle, new_value, "QA", "POWER_QA")
                                    place_probe(mdl, comp_handle, new_value, "QB", "POWER_QB")
                                    place_probe(mdl, comp_handle, new_value, "QC", "POWER_QC")
                                    place_probe(mdl, comp_handle, new_value, "SA", "POWER_SA")
                                    place_probe(mdl, comp_handle, new_value, "SB", "POWER_SB")
                                    place_probe(mdl, comp_handle, new_value, "SC", "POWER_SC")
                                    place_probe(mdl, comp_handle, new_value, "PFA", "POWER_PFA")
                                    place_probe(mdl, comp_handle, new_value, "PFB", "POWER_PFB")
                                    place_probe(mdl, comp_handle, new_value, "PFC", "POWER_PFC")
                        ENDCODE

                        CODE property_value_edited
                            p_method = mdl.get_property_disp_value(mdl.prop(container_handle, "P_method"))
                            
                            if new_value:
                                mdl.disable_property(mdl.prop(container_handle, "P_method"))
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("IA", "IB", "IC"))
                                if p_method == "RMS based":
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLn_rms")
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "I_rms")
                            else:
                                mdl.enable_property(mdl.prop(container_handle, "P_method"))
                                if p_method == "RMS based":
                                    VLnAVG = mdl.get_property_disp_value(mdl.prop(container_handle, "VLn_avg_rms"))
                                    if not VLnAVG:
                                        sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLn_rms")
                                    IAVG = mdl.get_property_disp_value(mdl.prop(container_handle, "I_avg_rms"))
                                    if not IAVG:
                                        sp_meas_dependent_checkbox(mdl, container_handle, new_value, "I_rms")
                        ENDCODE
                    }

                    CODE init
                        def place_Vmeas(mdl, comp_handle, new_value, phaseID, position, tag_xoffset=96, rotate="right",
                                        rotate_tag="up"):
                            if new_value:
                                V = mdl.get_item("V{}".format(phaseID), parent=comp_handle, item_type="component")
                                if V:
                                    mdl.delete_item(V)
                                V = mdl.create_component("Voltage Measurement", parent=comp_handle,
                                                         name="V{}".format(phaseID),
                                                         position=position, rotation=rotate)
                                mdl.set_property_value(mdl.prop(V, "sig_output"), "True")
                                mdl.set_property_value(mdl.prop(V, "execution_rate"), "Ts")
                        
                                GoToV = mdl.get_item("GoToV{}".format(phaseID), parent=comp_handle, item_type="tag")
                                if not GoToV:
                                    GoToV = mdl.create_tag("V{}".format(phaseID), name="GoToV{}".format(phaseID),
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="in", rotation=rotate_tag,
                                                           position=(position[0] + tag_xoffset, position[1]))
                        
                                jun_p = mdl.get_item("Jun{}+".format(phaseID), parent=comp_handle, item_type="junction")
                                jun_n = mdl.get_item("Jun{}-".format(phaseID), parent=comp_handle, item_type="junction")
                        
                                conn_p = mdl.get_item("Conn{}+".format(phaseID), parent=comp_handle, item_type="connection")
                                if not conn_p:
                                    conn_p = mdl.create_connection(jun_p, mdl.term(V, "p_node"), name="Conn{}+".format(phaseID))
                                conn_n = mdl.get_item("Conn{}-".format(phaseID), parent=comp_handle, item_type="connection")
                                if not conn_n:
                                    conn_n = mdl.create_connection(jun_n, mdl.term(V, "n_node"), name="Conn{}-".format(phaseID))
                                conn_sp = mdl.get_item("Conn{}SP".format(phaseID), parent=comp_handle, item_type="connection")
                                if not conn_sp:
                                    conn_sp = mdl.create_connection(mdl.term(V, "out"), GoToV, name="Conn{}SP".format(phaseID))
                                tag = mdl.get_item("fromV{}".format(phaseID), parent=comp_handle,
                                                   item_type="tag")
                                mdl.set_tag_properties(tag, value="V{}".format(phaseID))
                            else:
                                V = mdl.get_item("V{}".format(phaseID), parent=comp_handle, item_type="component")
                                if V:
                                    mdl.delete_item(V)
                                V = mdl.create_component("Open Circuit", parent=comp_handle,
                                                         name="V{}".format(phaseID),
                                                         position=position, rotation=rotate)
                                GoToV = mdl.get_item("GoToV{}".format(phaseID), parent=comp_handle, item_type="tag")
                                if GoToV:
                                    mdl.delete_item(GoToV)
                                tag = mdl.get_item("fromV{}".format(phaseID), parent=comp_handle,
                                                   item_type="tag")
                                mdl.set_tag_properties(tag, value="zero")
                                
                                jun_p = mdl.get_item("Jun{}+".format(phaseID), parent=comp_handle, item_type="junction")
                                jun_n = mdl.get_item("Jun{}-".format(phaseID), parent=comp_handle, item_type="junction")
                        
                                conn_p = mdl.get_item("Conn{}+".format(phaseID), parent=comp_handle, item_type="connection")
                                if not conn_p:
                                    conn_p = mdl.create_connection(jun_p, mdl.term(V, "p_node"), name="Conn{}+".format(phaseID))
                                conn_n = mdl.get_item("Conn{}-".format(phaseID), parent=comp_handle, item_type="connection")
                                if not conn_n:
                                    conn_n = mdl.create_connection(jun_n, mdl.term(V, "n_node"), name="Conn{}-".format(phaseID))
                        
                        
                        def place_Imeas(mdl, comp_handle, new_value, phaseID, position):
                            if new_value:
                        
                                I = mdl.get_item("I{}".format(phaseID), parent=comp_handle, item_type="component")
                                if I:
                                    mdl.delete_item(I)
                                I = mdl.create_component("Current Measurement", parent=comp_handle,
                                                         name="I{}".format(phaseID),
                                                         position=position, rotation="up")
                                mdl.set_property_value(mdl.prop(I, "sig_output"), "True")
                                mdl.set_property_value(mdl.prop(I, "execution_rate"), "Ts")
                        
                                GoToI = mdl.get_item("GoToI{}".format(phaseID), parent=comp_handle, item_type="tag")
                                if not GoToI:
                                    GoToI = mdl.create_tag("I{}".format(phaseID), name="GoToI{}".format(phaseID),
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="in", rotation="up",
                                                           position=(position[0] + 56, position[1] - 40))
                        
                                jun_p = mdl.get_item("JunI{}".format(phaseID), parent=comp_handle, item_type="junction")
                                port = mdl.get_item("{}-".format(phaseID), parent=comp_handle, item_type="port")
                        
                                conn_p = mdl.get_item("ConnI{}+".format(phaseID), parent=comp_handle, item_type="connection")
                                if not conn_p:
                                    conn_p = mdl.create_connection(jun_p, mdl.term(I, "p_node"), name="ConnI{}+".format(phaseID))
                                conn_n = mdl.get_item("ConnI{}-".format(phaseID), parent=comp_handle, item_type="connection")
                                if not conn_n:
                                    conn_n = mdl.create_connection(mdl.term(I, "n_node"), port, name="ConnI{}-".format(phaseID))
                                conn_sp = mdl.get_item("ConnI{}SP".format(phaseID), parent=comp_handle, item_type="connection")
                                if not conn_sp:
                                    conn_sp = mdl.create_connection(mdl.term(I, "out"), GoToI, name="ConnI{}SP".format(phaseID))
                        
                                tag = mdl.get_item("fromI{}".format(phaseID), parent=comp_handle,
                                                   item_type="tag")
                                mdl.set_tag_properties(tag, value="I{}".format(phaseID))
                            else:
                                I = mdl.get_item("I{}".format(phaseID), parent=comp_handle, item_type="component")
                                if I:
                                    mdl.delete_item(I)
                                I = mdl.create_component("Short Circuit", parent=comp_handle,
                                                         name="I{}".format(phaseID),
                                                         position=position, rotation="up")
                                GoToI = mdl.get_item("GoToI{}".format(phaseID), parent=comp_handle, item_type="tag")
                                if GoToI:
                                    mdl.delete_item(GoToI)
                        
                                jun_p = mdl.get_item("JunI{}".format(phaseID), parent=comp_handle, item_type="junction")
                                port = mdl.get_item("{}-".format(phaseID), parent=comp_handle, item_type="port")
                                
                                conn_p = mdl.get_item("ConnI{}+".format(phaseID), parent=comp_handle, item_type="connection")
                                if not conn_p:
                                    conn_p = mdl.create_connection(jun_p, mdl.term(I, "p_node"), name="ConnI{}+".format(phaseID))
                                conn_n = mdl.get_item("ConnI{}-".format(phaseID), parent=comp_handle, item_type="connection")
                                if not conn_n:
                                    conn_n = mdl.create_connection(mdl.term(I, "n_node"), port, name="ConnI{}-".format(phaseID))
                        
                                tag = mdl.get_item("fromI{}".format(phaseID), parent=comp_handle,
                                                   item_type="tag")
                                mdl.set_tag_properties(tag, value="zero")
                        
                        
                        def place_PLL(mdl, comp_handle, new_value):
                            if new_value:
                                fromVAn = mdl.get_item("fromVAn1", parent=comp_handle, item_type="tag")
                                if not fromVAn:
                                    fromVAn = mdl.create_tag("VAn", name="fromVAn1", parent=comp_handle,
                                                             scope="local", kind="sp", direction="out",
                                                             rotation="up", position=(7800, 7880))
                                fromVBn = mdl.get_item("fromVBn1", parent=comp_handle, item_type="tag")
                                if not fromVBn:
                                    fromVBn = mdl.create_tag("VBn", name="fromVBn1", parent=comp_handle,
                                                             scope="local", kind="sp", direction="out",
                                                             rotation="up", position=(7800, 7944))
                                fromVCn = mdl.get_item("fromVCn1", parent=comp_handle, item_type="tag")
                                if not fromVCn:
                                    fromVCn = mdl.create_tag("VCn", name="fromVCn1", parent=comp_handle,
                                                             scope="local", kind="sp", direction="out",
                                                             rotation="up", position=(7800, 8008))
                                GoToFreq = mdl.get_item("GoToFreq", parent=comp_handle, item_type="tag")
                                if not GoToFreq:
                                    GoToFreq = mdl.create_tag("Freq", name="GoToFreq", parent=comp_handle,
                                                              scope="local", kind="sp", direction="in",
                                                              rotation="up", position=(8096, 7944))
                        
                                TRMd = mdl.get_item("TRMd", parent=comp_handle, item_type="component")
                                if not TRMd:
                                    TRMd = mdl.create_component("Termination", parent=comp_handle,
                                                                name="TRMd", position=(7976, 7792),
                                                                rotation="left", hide_name=True)
                                TRMq = mdl.get_item("TRMq", parent=comp_handle, item_type="component")
                                if not TRMq:
                                    TRMq = mdl.create_component("Termination", parent=comp_handle,
                                                                name="TRMq", position=(8000, 7840),
                                                                rotation="left", hide_name=True)
                                TRMz = mdl.get_item("TRMz", parent=comp_handle, item_type="component")
                                if not TRMz:
                                    TRMz = mdl.create_component("Termination", parent=comp_handle,
                                                                name="TRMz", position=(8032, 7880),
                                                                rotation="left", hide_name=True)
                                TRMwt = mdl.get_item("TRMwt", parent=comp_handle, item_type="component")
                                if not TRMwt:
                                    TRMwt = mdl.create_component("Termination", parent=comp_handle,
                                                                 name="TRMwt", position=(8032, 8064),
                                                                 rotation="right", hide_name=True)
                                TRMsin = mdl.get_item("TRMsin", parent=comp_handle, item_type="component")
                                if not TRMsin:
                                    TRMsin = mdl.create_component("Termination", parent=comp_handle,
                                                                  name="TRMsin", position=(8000, 8016),
                                                                  rotation="right", hide_name=True)
                        
                                PLL = mdl.get_item("PLL", parent=comp_handle, item_type="component")
                                if not PLL:
                                    PLL = mdl.create_component("Three phase PLL", parent=comp_handle,
                                                               name="PLL", position=(7896, 7944),
                                                               rotation="up")
                        
                                connA = mdl.get_item("ConnAPLL", parent=comp_handle, item_type="connection")
                                if not connA:
                                    connA = mdl.create_connection(fromVAn, mdl.term(PLL, "va"), name="ConnAPLL")
                                connB = mdl.get_item("ConnBPLL", parent=comp_handle, item_type="connection")
                                if not connB:
                                    connB = mdl.create_connection(fromVBn, mdl.term(PLL, "vb"), name="ConnBPLL")
                                connC = mdl.get_item("ConnCPLL", parent=comp_handle, item_type="connection")
                                if not connC:
                                    connC = mdl.create_connection(fromVCn, mdl.term(PLL, "vc"), name="ConnCPLL")
                                connD = mdl.get_item("ConnDPLL", parent=comp_handle, item_type="connection")
                                if not connD:
                                    connD = mdl.create_connection(mdl.term(PLL, "d_axis"), mdl.term(TRMd, "in"),
                                                                  name="ConnDPLL")
                                connQ = mdl.get_item("ConnQPLL", parent=comp_handle, item_type="connection")
                                if not connQ:
                                    connQ = mdl.create_connection(mdl.term(PLL, "q_axis"), mdl.term(TRMq, "in"),
                                                                  name="ConnQPLL")
                                connZ = mdl.get_item("ConnZPLL", parent=comp_handle, item_type="connection")
                                if not connZ:
                                    connZ = mdl.create_connection(mdl.term(PLL, "zero_axis"), mdl.term(TRMz, "in"),
                                                                  name="ConnZPLL")
                                connWT = mdl.get_item("ConnWTPLL", parent=comp_handle, item_type="connection")
                                if not connWT:
                                    connWT = mdl.create_connection(mdl.term(PLL, "theta"), mdl.term(TRMwt, "in"),
                                                                   name="ConnWTPLL")
                                connSIN = mdl.get_item("ConnSINPLL", parent=comp_handle, item_type="connection")
                                if not connSIN:
                                    connSIN = mdl.create_connection(mdl.term(PLL, "sin_theta"), mdl.term(TRMsin, "in"),
                                                                    name="ConnSINPLL")
                                connFreq = mdl.get_item("ConnFPLL", parent=comp_handle, item_type="connection")
                                if not connFreq:
                                    connFreq = mdl.create_connection(mdl.term(PLL, "freq"), GoToFreq,
                                                                     name="ConnFPLL")
                                tag = mdl.get_item("fromFreq", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tag, value="Freq")
                        
                            else:
                                fromVAn = mdl.get_item("fromVAn1", parent=comp_handle, item_type="tag")
                                if fromVAn:
                                    mdl.delete_item(fromVAn)
                                fromVBn = mdl.get_item("fromVBn1", parent=comp_handle, item_type="tag")
                                if fromVBn:
                                    mdl.delete_item(fromVBn)
                                fromVCn = mdl.get_item("fromVCn1", parent=comp_handle, item_type="tag")
                                if fromVCn:
                                    mdl.delete_item(fromVCn)
                                GoToFreq = mdl.get_item("GoToFreq", parent=comp_handle, item_type="tag")
                                if GoToFreq:
                                    mdl.delete_item(GoToFreq)
                        
                                TRMd = mdl.get_item("TRMd", parent=comp_handle, item_type="component")
                                if TRMd:
                                    mdl.delete_item(TRMd)
                                TRMq = mdl.get_item("TRMq", parent=comp_handle, item_type="component")
                                if TRMq:
                                    mdl.delete_item(TRMq)
                                TRMz = mdl.get_item("TRMz", parent=comp_handle, item_type="component")
                                if TRMz:
                                    mdl.delete_item(TRMz)
                                TRMwt = mdl.get_item("TRMwt", parent=comp_handle, item_type="component")
                                if TRMwt:
                                    mdl.delete_item(TRMwt)
                                TRMsin = mdl.get_item("TRMsin", parent=comp_handle, item_type="component")
                                if TRMsin:
                                    mdl.delete_item(TRMsin)
                        
                                PLL = mdl.get_item("PLL", parent=comp_handle, item_type="component")
                                if PLL:
                                    mdl.delete_item(PLL)
                                tag = mdl.get_item("fromFreq", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tag, value="zero")
                        
                        
                        def place_3phRMS(mdl, comp_handle, new_value, name, position, phaseIDs):
                            if new_value:
                                rms = mdl.get_item("{}_calc".format(name), parent=comp_handle,
                                                   item_type="component")
                                if not rms:
                                    rms = mdl.create_component("Three-phase RMS variable frequency",
                                                               parent=comp_handle,
                                                               name="{}_calc".format(name), position=position,
                                                               rotation="up")
                                    mdl.set_property_value(mdl.prop(rms, "Ts"), "Ts")
                                    mdl.set_property_value(mdl.prop(rms, "internal_sm"), "False")
                                
                                fromMode = mdl.get_item("fromMode{}".format(name), parent=comp_handle, item_type="tag")
                                if not fromMode:
                                    fromMode = mdl.create_tag("mode", name="fromMode{}".format(name),
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="out", rotation="right",
                                                           position=(position[0] - 96, position[1] - 144))
                        
                                fromA = mdl.get_item("from{}2".format(phaseIDs[0]),
                                                     parent=comp_handle, item_type="tag")
                                if not fromA:
                                    fromA = mdl.create_tag(phaseIDs[0], name="from{}2".format(phaseIDs[0]),
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="out", rotation="right",
                                                           position=(position[0] - 120, position[1] - 96))
                                fromB = mdl.get_item("from{}2".format(phaseIDs[1]),
                                                     parent=comp_handle, item_type="tag")
                                if not fromB:
                                    fromB = mdl.create_tag(phaseIDs[1], name="from{}2".format(phaseIDs[1]),
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="out", rotation="right",
                                                           position=(position[0] - 144, position[1] - 48))
                                fromC = mdl.get_item("from{}2".format(phaseIDs[2]),
                                                     parent=comp_handle, item_type="tag")
                                if not fromC:
                                    fromC = mdl.create_tag(phaseIDs[2], name="from{}2".format(phaseIDs[2]),
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="out", rotation="left",
                                                           position=(position[0] - 144, position[1] + 192))
                                fromdF = mdl.get_item("fromdFract{}".format(name), parent=comp_handle, item_type="tag")
                                if not fromdF:
                                    fromdF = mdl.create_tag("dFract", name="fromdFract{}".format(name),
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="out", rotation="left",
                                                           position=(position[0] - 120, position[1] + 144))
                        
                                GoToA = mdl.get_item("GoTo{}RMS".format(phaseIDs[0]),
                                                     parent=comp_handle, item_type="tag")
                                if not GoToA:
                                    GoToA = mdl.create_tag("{}_RMS".format(phaseIDs[0]),
                                                           name="GoTo{}RMS".format(phaseIDs[0]),
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="in", rotation="left",
                                                           position=(position[0] + 144, position[1] - 120))
                                GoToB = mdl.get_item("GoTo{}RMS".format(phaseIDs[1]),
                                                     parent=comp_handle, item_type="tag")
                                if not GoToB:
                                    GoToB = mdl.create_tag("{}_RMS".format(phaseIDs[1]),
                                                           name="GoTo{}RMS".format(phaseIDs[1]),
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="in", rotation="up",
                                                           position=(position[0] + 176, position[1]))
                                GoToC = mdl.get_item("GoTo{}RMS".format(phaseIDs[2]),
                                                     parent=comp_handle, item_type="tag")
                                if not GoToC:
                                    GoToC = mdl.create_tag("{}_RMS".format(phaseIDs[2]),
                                                           name="GoTo{}RMS".format(phaseIDs[2]),
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="in", rotation="right",
                                                           position=(position[0] + 144, position[1] + 120))
                        
                                connMode = mdl.get_item("ConnMode{}".format(name),
                                                     parent=comp_handle, item_type="connection")
                                if not connMode:
                                    connMode = mdl.create_connection(fromMode, mdl.term(rms, "mode"),
                                                                  name="ConnMode{}".format(name))
                                connA = mdl.get_item("Conn{}RMS".format(phaseIDs[0]),
                                                     parent=comp_handle, item_type="connection")
                                if not connA:
                                    connA = mdl.create_connection(fromA, mdl.term(rms, "A"),
                                                                  name="Conn{}RMS".format(phaseIDs[0]))
                                connB = mdl.get_item("Conn{}RMS".format(phaseIDs[1]),
                                                     parent=comp_handle, item_type="connection")
                                if not connB:
                                    connB = mdl.create_connection(mdl.term(rms, "B"), fromB,
                                                                  name="Conn{}RMS".format(phaseIDs[1]))
                                connC = mdl.get_item("Conn{}RMS".format(phaseIDs[2]),
                                                     parent=comp_handle, item_type="connection")
                                if not connC:
                                    connC = mdl.create_connection(mdl.term(rms, "C"), fromC,
                                                                  name="Conn{}RMS".format(phaseIDs[2]))
                                conndF = mdl.get_item("ConndF{}".format(name),
                                                     parent=comp_handle, item_type="connection")
                                if not conndF:
                                    conndF = mdl.create_connection(fromdF, mdl.term(rms, "dFract"),
                                                                  name="ConndF{}".format(name))
                                connA1 = mdl.get_item("Conn{}RMS1".format(phaseIDs[0]),
                                                      parent=comp_handle, item_type="connection")
                                if not connA1:
                                    connA1 = mdl.create_connection(GoToA, mdl.term(rms, "RMSa"),
                                                                   name="Conn{}RMS1".format(phaseIDs[0]))
                                connB1 = mdl.get_item("Conn{}RMS1".format(phaseIDs[1]),
                                                      parent=comp_handle, item_type="connection")
                                if not connB1:
                                    connB1 = mdl.create_connection(mdl.term(rms, "RMSb"), GoToB,
                                                                   name="Conn{}RMS1".format(phaseIDs[1]))
                                connC1 = mdl.get_item("Conn{}RMS1".format(phaseIDs[2]),
                                                      parent=comp_handle, item_type="connection")
                                if not connC1:
                                    connC1 = mdl.create_connection(GoToC, mdl.term(rms, "RMSc"),
                                                                   name="Conn{}RMS1".format(phaseIDs[2]))
                                tagA = mdl.get_item("from{}RMS".format(phaseIDs[0]), parent=comp_handle,
                                                    item_type="tag")
                                mdl.set_tag_properties(tagA, value="{}_RMS".format(phaseIDs[0]))
                                tagB = mdl.get_item("from{}RMS".format(phaseIDs[1]), parent=comp_handle,
                                                    item_type="tag")
                                mdl.set_tag_properties(tagB, value="{}_RMS".format(phaseIDs[1]))
                                tagC = mdl.get_item("from{}RMS".format(phaseIDs[2]), parent=comp_handle,
                                                    item_type="tag")
                                mdl.set_tag_properties(tagC, value="{}_RMS".format(phaseIDs[2]))
                        
                            else:
                                rms = mdl.get_item("{}_calc".format(name), parent=comp_handle,
                                                   item_type="component")
                                if rms:
                                    mdl.delete_item(rms)
                        
                                fromMode = mdl.get_item("fromMode{}".format(name),
                                                     parent=comp_handle, item_type="tag")
                                if fromMode:
                                    mdl.delete_item(fromMode)
                                fromA = mdl.get_item("from{}2".format(phaseIDs[0]),
                                                     parent=comp_handle, item_type="tag")
                                if fromA:
                                    mdl.delete_item(fromA)
                                fromB = mdl.get_item("from{}2".format(phaseIDs[1]),
                                                     parent=comp_handle, item_type="tag")
                                if fromB:
                                    mdl.delete_item(fromB)
                                fromC = mdl.get_item("from{}2".format(phaseIDs[2]),
                                                     parent=comp_handle, item_type="tag")
                                if fromC:
                                    mdl.delete_item(fromC)
                                fromdF = mdl.get_item("fromdFract{}".format(name),
                                                     parent=comp_handle, item_type="tag")
                                if fromdF:
                                    mdl.delete_item(fromdF)
                        
                                GoToA = mdl.get_item("GoTo{}RMS".format(phaseIDs[0]),
                                                     parent=comp_handle, item_type="tag")
                                if GoToA:
                                    mdl.delete_item(GoToA)
                                GoToB = mdl.get_item("GoTo{}RMS".format(phaseIDs[1]),
                                                     parent=comp_handle, item_type="tag")
                                if GoToB:
                                    mdl.delete_item(GoToB)
                                GoToC = mdl.get_item("GoTo{}RMS".format(phaseIDs[2]),
                                                     parent=comp_handle, item_type="tag")
                                if GoToC:
                                    mdl.delete_item(GoToC)
                                tagA = mdl.get_item("from{}RMS".format(phaseIDs[0]), parent=comp_handle,
                                                    item_type="tag")
                                mdl.set_tag_properties(tagA, value="zero")
                                tagB = mdl.get_item("from{}RMS".format(phaseIDs[1]), parent=comp_handle,
                                                    item_type="tag")
                                mdl.set_tag_properties(tagB, value="zero")
                                tagC = mdl.get_item("from{}RMS".format(phaseIDs[2]), parent=comp_handle,
                                                    item_type="tag")
                                mdl.set_tag_properties(tagC, value="zero")
                        
                        
                        def place_avg_rms(mdl, comp_handle, new_value, name, position, phaseIDs):
                            if new_value:
                                fromA = mdl.get_item("from{}RMS3".format(phaseIDs[0]),
                                                     parent=comp_handle, item_type="tag")
                                if not fromA:
                                    fromA = mdl.create_tag("{}_RMS".format(phaseIDs[0]),
                                                           name="from{}RMS3".format(phaseIDs[0]),
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="out", rotation="up",
                                                           position=(position[0] - 128, position[1] - 48))
                                fromB = mdl.get_item("from{}RMS3".format(phaseIDs[1]),
                                                     parent=comp_handle, item_type="tag")
                                if not fromB:
                                    fromB = mdl.create_tag("{}_RMS".format(phaseIDs[1]),
                                                           name="from{}RMS3".format(phaseIDs[1]),
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="out", rotation="up",
                                                           position=(position[0] - 128, position[1]))
                                fromC = mdl.get_item("from{}RMS3".format(phaseIDs[2]),
                                                     parent=comp_handle, item_type="tag")
                                if not fromC:
                                    fromC = mdl.create_tag("{}_RMS".format(phaseIDs[2]),
                                                           name="from{}RMS3".format(phaseIDs[2]),
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="out", rotation="up",
                                                           position=(position[0] - 128, position[1] + 48))
                        
                                sum3ph = mdl.get_item("sum{}".format(name), parent=comp_handle, item_type="component")
                                if not sum3ph:
                                    sum3ph = mdl.create_component("Sum", parent=comp_handle,
                                                                  name="sum{}".format(name),
                                                                  position=position, rotation="up", hide_name=True)
                                    mdl.set_property_value(mdl.prop(sum3ph, "signs"), "3")
                                gain = mdl.get_item("gain{}".format(name), parent=comp_handle, item_type="component")
                                if not gain:
                                    gain = mdl.create_component("Gain", parent=comp_handle,
                                                                name="gain{}".format(name),
                                                                position=(position[0] + 128, position[1]),
                                                                rotation="up", hide_name=True)
                                    mdl.set_property_value(mdl.prop(gain, "gain"), "1/3")
                        
                                GoTo = mdl.get_item("GoTo{}".format(name), parent=comp_handle, item_type="tag")
                                if not GoTo:
                                    GoTo = mdl.create_tag(name, name="GoTo{}".format(name),
                                                          parent=comp_handle, scope="local", kind="sp",
                                                          direction="in", rotation="up",
                                                          position=(position[0] + 248, position[1]))
                        
                                connA = mdl.get_item("Conn{}RMS3".format(phaseIDs[0]),
                                                     parent=comp_handle, item_type="connection")
                                if not connA:
                                    connA = mdl.create_connection(fromA, mdl.term(sum3ph, "in"),
                                                                  "Conn{}RMS3".format(phaseIDs[0]))
                                connB = mdl.get_item("Conn{}RMS3".format(phaseIDs[1]),
                                                     parent=comp_handle, item_type="connection")
                                if not connB:
                                    connB = mdl.create_connection(fromB, mdl.term(sum3ph, "in1"),
                                                                  "Conn{}RMS3".format(phaseIDs[1]))
                                connC = mdl.get_item("Conn{}RMS3".format(phaseIDs[2]),
                                                     parent=comp_handle, item_type="connection")
                                if not connC:
                                    connC = mdl.create_connection(fromC, mdl.term(sum3ph, "in2"),
                                                                  "Conn{}RMS3".format(phaseIDs[2]))
                                connS = mdl.get_item("Conn{}1".format(name),
                                                     parent=comp_handle, item_type="connection")
                                if not connS:
                                    connS = mdl.create_connection(mdl.term(sum3ph, "out"), mdl.term(gain, "in"),
                                                                  "Conn{}1".format(name))
                                connG = mdl.get_item("Conn{}2".format(name),
                                                     parent=comp_handle, item_type="connection")
                                if not connG:
                                    connS = mdl.create_connection(mdl.term(gain, "out"), GoTo,
                                                                  "Conn{}2".format(name))
                                tag = mdl.get_item("from{}".format(name), parent=comp_handle,
                                                   item_type="tag")
                                mdl.set_tag_properties(tag, value=name)
                            else:
                                fromA = mdl.get_item("from{}RMS3".format(phaseIDs[0]),
                                                     parent=comp_handle, item_type="tag")
                                if fromA:
                                    mdl.delete_item(fromA)
                                fromB = mdl.get_item("from{}RMS3".format(phaseIDs[1]),
                                                     parent=comp_handle, item_type="tag")
                                if fromB:
                                    mdl.delete_item(fromB)
                                fromC = mdl.get_item("from{}RMS3".format(phaseIDs[2]),
                                                     parent=comp_handle, item_type="tag")
                                if fromC:
                                    mdl.delete_item(fromC)
                        
                                sum3ph = mdl.get_item("sum{}".format(name), parent=comp_handle, item_type="component")
                                if sum3ph:
                                    mdl.delete_item(sum3ph)
                                gain = mdl.get_item("gain{}".format(name), parent=comp_handle, item_type="component")
                                if gain:
                                    mdl.delete_item(gain)
                        
                                GoTo = mdl.get_item("GoTo{}".format(name), parent=comp_handle, item_type="tag")
                                if GoTo:
                                    mdl.delete_item(GoTo)
                                tag = mdl.get_item("from{}".format(name), parent=comp_handle,
                                                   item_type="tag")
                                mdl.set_tag_properties(tag, value="zero")
                        
                        
                        def pe_meas_dependent_checkbox(mdl, mask_handle, new_value, measIDs):
                            if new_value:
                                for id in range(len(measIDs)):
                                    mdl.set_property_value(mdl.prop(mask_handle, measIDs[id]), True)
                                    mdl.disable_property(mdl.prop(mask_handle, measIDs[id]))
                            else:
                                for id in range(len(measIDs)):
                                    mdl.enable_property(mdl.prop(mask_handle, measIDs[id]))
                        
                        
                        def sp_meas_dependent_checkbox(mdl, mask_handle, new_value, measID):
                            if new_value:
                                mdl.set_property_value(mdl.prop(mask_handle, measID), True)
                                mdl.disable_property(mdl.prop(mask_handle, measID))
                            else:
                                mdl.enable_property(mdl.prop(mask_handle, measID))
                        
                        
                        def place_probe(mdl, comp_handle, new_value, tag_name, probe_name):
                            if new_value:
                                tag = mdl.get_item("from{}4".format(tag_name),
                                                   parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tag, value=probe_name)
                                term = mdl.get_item(probe_name, parent=comp_handle, item_type="component")
                                position = mdl.get_position(term)
                                if term:
                                    mdl.delete_item(term)
                                probe = mdl.create_component("Probe", parent=comp_handle,
                                                             name=probe_name,
                                                             position=position,
                                                             rotation="up")
                                conn = mdl.create_connection(tag, mdl.term(probe, "in"),
                                                             "Conn{}probe".format(tag_name))
                            else:
                                tag = mdl.get_item("from{}4".format(tag_name),
                                                   parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tag, value="zero")
                                probe = mdl.get_item(probe_name, parent=comp_handle, item_type="component")
                                position = mdl.get_position(probe)
                                if probe:
                                    mdl.delete_item(probe)
                                term = mdl.create_component("Termination", parent=comp_handle,
                                                            name=probe_name,
                                                            position=position,
                                                            rotation="up", hide_name=True)
                                conn = mdl.create_connection(tag, mdl.term(term, "in"),
                                                             "Conn{}probe".format(tag_name))
                        
                        
                        def place_RMS_power_meter(mdl, comp_handle, new_value):
                            pos = (9312, 8928)
                            if new_value:
                                fromMode = mdl.get_item("fromMode3", parent=comp_handle, item_type="tag")
                                if not fromMode:
                                    fromMode = mdl.create_tag("mode", name="fromMode3",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="out", rotation="right",
                                                               position=(pos[0] - 192, pos[1] - 384))
                                fromSubMode = mdl.get_item("fromSubMode3", parent=comp_handle, item_type="tag")
                                if not fromSubMode:
                                    fromSubMode = mdl.create_tag("submode", name="fromSubMode3",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="out", rotation="right",
                                                               position=(pos[0] - 216, pos[1] - 336))
                                fromVA = mdl.get_item("fromVAn3", parent=comp_handle, item_type="tag")
                                if not fromVA:
                                    fromVA = mdl.create_tag("VAn", name="fromVAn3",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="out", rotation="right",
                                                               position=(pos[0] - 240, pos[1] - 288))
                                fromVB = mdl.get_item("fromVBn3", parent=comp_handle, item_type="tag")
                                if not fromVB:
                                    fromVB = mdl.create_tag("VBn", name="fromVBn3",
                                                            parent=comp_handle, scope="local", kind="sp",
                                                            direction="out", rotation="right",
                                                            position=(pos[0] - 264, pos[1] - 240))
                                fromVC = mdl.get_item("fromVCn3", parent=comp_handle, item_type="tag")
                                if not fromVC:
                                    fromVC = mdl.create_tag("VCn", name="fromVCn3",
                                                            parent=comp_handle, scope="local", kind="sp",
                                                            direction="out", rotation="right",
                                                            position=(pos[0] - 288, pos[1] - 192))
                                fromIA = mdl.get_item("fromIA3", parent=comp_handle, item_type="tag")
                                if not fromIA:
                                    fromIA = mdl.create_tag("IA", name="fromIA3",
                                                            parent=comp_handle, scope="local", kind="sp",
                                                            direction="out", rotation="right",
                                                            position=(pos[0] - 312, pos[1] - 144))
                                fromIB = mdl.get_item("fromIB3", parent=comp_handle, item_type="tag")
                                if not fromIB:
                                    fromIB = mdl.create_tag("IB", name="fromIB3",
                                                            parent=comp_handle, scope="local", kind="sp",
                                                            direction="out", rotation="right",
                                                            position=(pos[0] - 336, pos[1] - 96))
                                fromIC = mdl.get_item("fromIC3", parent=comp_handle, item_type="tag")
                                if not fromIC:
                                    fromIC = mdl.create_tag("IC", name="fromIC3",
                                                            parent=comp_handle, scope="local", kind="sp",
                                                            direction="out", rotation="right",
                                                            position=(pos[0] - 360, pos[1] - 48))
                                fromVArms = mdl.get_item("fromVAnRMS5", parent=comp_handle, item_type="tag")
                                if not fromVArms:
                                    fromVArms = mdl.create_tag("VAn_RMS", name="fromVAnRMS5",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="out", rotation="left",
                                                               position=(pos[0] - 360, pos[1] + 576))
                                fromVBrms = mdl.get_item("fromVBnRMS5", parent=comp_handle, item_type="tag")
                                if not fromVBrms:
                                    fromVBrms = mdl.create_tag("VBn_RMS", name="fromVBnRMS5",
                                                            parent=comp_handle, scope="local", kind="sp",
                                                            direction="out", rotation="left",
                                                            position=(pos[0] - 336, pos[1] + 528))
                                fromVCrms = mdl.get_item("fromVCnRMS5", parent=comp_handle, item_type="tag")
                                if not fromVCrms:
                                    fromVCrms = mdl.create_tag("VCn_RMS", name="fromVCnRMS5",
                                                            parent=comp_handle, scope="local", kind="sp",
                                                            direction="out", rotation="left",
                                                            position=(pos[0] - 312, pos[1] + 480))
                                fromIArms = mdl.get_item("fromIARMS5", parent=comp_handle, item_type="tag")
                                if not fromIArms:
                                    fromIArms = mdl.create_tag("IA_RMS", name="fromIARMS5",
                                                            parent=comp_handle, scope="local", kind="sp",
                                                            direction="out", rotation="left",
                                                            position=(pos[0] - 288, pos[1] + 432))
                                fromIBrms = mdl.get_item("fromIBRMS5", parent=comp_handle, item_type="tag")
                                if not fromIBrms:
                                    fromIBrms = mdl.create_tag("IB_RMS", name="fromIBRMS5",
                                                            parent=comp_handle, scope="local", kind="sp",
                                                            direction="out", rotation="left",
                                                            position=(pos[0] - 264, pos[1] + 384))
                                fromICrms = mdl.get_item("fromICRMS5", parent=comp_handle, item_type="tag")
                                if not fromICrms:
                                    fromICrms = mdl.create_tag("IC_RMS", name="fromICRMS5",
                                                            parent=comp_handle, scope="local", kind="sp",
                                                            direction="out", rotation="left",
                                                            position=(pos[0] - 240, pos[1] + 336))
                                fromdFract = mdl.get_item("fromdFract3", parent=comp_handle, item_type="tag")
                                if not fromdFract:
                                    fromdFract = mdl.create_tag("dFract", name="fromdFract3",
                                                            parent=comp_handle, scope="local", kind="sp",
                                                            direction="out", rotation="left",
                                                            position=(pos[0] - 216, pos[1] + 288))
                        
                                power_meter = mdl.get_item("Power Meter", parent=comp_handle, item_type="component")
                                if not power_meter:
                                    power_meter = mdl.create_component("Three-phase POWER variable frequency",
                                                                       parent=comp_handle, name="Power Meter",
                                                                       position=pos, rotation="up")
                                    mdl.set_property_value(mdl.prop(power_meter, "Ts"), "Ts")
                                    mdl.set_property_value(mdl.prop(power_meter, "internal_sm"), "False")
                        
                                GoToPa = mdl.get_item("GoToPa", parent=comp_handle, item_type="tag")
                                if not GoToPa:
                                    GoToPa = mdl.create_tag("POWER_PA", name="GoToPa",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="left",
                                                               position=(pos[0] + 192, pos[1] - 432))
                                GoToPb = mdl.get_item("GoToPb", parent=comp_handle, item_type="tag")
                                if not GoToPb:
                                    GoToPb = mdl.create_tag("POWER_PB", name="GoToPb",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="left",
                                                               position=(pos[0] + 216, pos[1] - 384))
                                GoToPc = mdl.get_item("GoToPc", parent=comp_handle, item_type="tag")
                                if not GoToPc:
                                    GoToPc = mdl.create_tag("POWER_PC", name="GoToPc",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="left",
                                                               position=(pos[0] + 240, pos[1] - 336))
                                GoToP = mdl.get_item("GoToP", parent=comp_handle, item_type="tag")
                                if not GoToP:
                                    GoToP = mdl.create_tag("POWER_P", name="GoToP",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="left",
                                                               position=(pos[0] + 264, pos[1] - 288))
                                GoToQa = mdl.get_item("GoToQa", parent=comp_handle, item_type="tag")
                                if not GoToQa:
                                    GoToQa = mdl.create_tag("POWER_QA", name="GoToQa",
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="in", rotation="left",
                                                           position=(pos[0] + 288, pos[1] - 240))
                                GoToQb = mdl.get_item("GoToQb", parent=comp_handle, item_type="tag")
                                if not GoToQb:
                                    GoToQb = mdl.create_tag("POWER_QB", name="GoToQb",
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="in", rotation="left",
                                                           position=(pos[0] + 312, pos[1] - 192))
                                GoToQc = mdl.get_item("GoToQc", parent=comp_handle, item_type="tag")
                                if not GoToQc:
                                    GoToQc = mdl.create_tag("POWER_QC", name="GoToQc",
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="in", rotation="left",
                                                           position=(pos[0] + 336, pos[1] - 144))
                                GoToQ = mdl.get_item("GoToQ", parent=comp_handle, item_type="tag")
                                if not GoToQ:
                                    GoToQ = mdl.create_tag("POWER_Q", name="GoToQ",
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="in", rotation="left",
                                                           position=(pos[0] + 360, pos[1] - 96))
                                GoToSa = mdl.get_item("GoToSa", parent=comp_handle, item_type="tag")
                                if not GoToSa:
                                    GoToSa = mdl.create_tag("POWER_SA", name="GoToSa",
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="in", rotation="right",
                                                           position=(pos[0] + 360, pos[1] + 624))
                                GoToSb = mdl.get_item("GoToSb", parent=comp_handle, item_type="tag")
                                if not GoToSb:
                                    GoToSb = mdl.create_tag("POWER_SB", name="GoToSb",
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="in", rotation="right",
                                                           position=(pos[0] + 336, pos[1] + 576))
                                GoToSc = mdl.get_item("GoToSc", parent=comp_handle, item_type="tag")
                                if not GoToSc:
                                    GoToSc = mdl.create_tag("POWER_SC", name="GoToSc",
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="in", rotation="right",
                                                           position=(pos[0] + 312, pos[1] + 528))
                                GoToS = mdl.get_item("GoToS", parent=comp_handle, item_type="tag")
                                if not GoToS:
                                    GoToS = mdl.create_tag("POWER_S", name="GoToS",
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="in", rotation="right",
                                                           position=(pos[0] + 288, pos[1] + 480))
                                GoToPFa = mdl.get_item("GoToPFa", parent=comp_handle, item_type="tag")
                                if not GoToPFa:
                                    GoToPFa = mdl.create_tag("POWER_PFA", name="GoToPFa",
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="in", rotation="right",
                                                           position=(pos[0] + 264, pos[1] + 432))
                                GoToPFb = mdl.get_item("GoToPFb", parent=comp_handle, item_type="tag")
                                if not GoToPFb:
                                    GoToPFb = mdl.create_tag("POWER_PFB", name="GoToPFb",
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="in", rotation="right",
                                                           position=(pos[0] + 240, pos[1] + 384))
                                GoToPFc = mdl.get_item("GoToPFc", parent=comp_handle, item_type="tag")
                                if not GoToPFc:
                                    GoToPFc = mdl.create_tag("POWER_PFC", name="GoToPFc",
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="in", rotation="right",
                                                           position=(pos[0] + 216, pos[1] + 336))
                                GoToPF = mdl.get_item("GoToPF", parent=comp_handle, item_type="tag")
                                if not GoToPF:
                                    GoToPF = mdl.create_tag("POWER_PF", name="GoToPF",
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="in", rotation="right",
                                                           position=(pos[0] + 192, pos[1] + 288))
                        
                                connMode = mdl.get_item("ConnModePM", parent=comp_handle, item_type="connection")
                                if not connMode:
                                    connMode = mdl.create_connection(fromMode, mdl.term(power_meter, "mode"),
                                                                 "ConnModePM")
                                connSubMode = mdl.get_item("ConnSubModePM", parent=comp_handle, item_type="connection")
                                if not connSubMode:
                                    connSubMode = mdl.create_connection(fromSubMode, mdl.term(power_meter, "submode"),
                                                                 "ConnSubModePM")
                                connVAPM = mdl.get_item("ConnVAPM", parent=comp_handle, item_type="connection")
                                if not connVAPM:
                                    connVAPM = mdl.create_connection(fromVA, mdl.term(power_meter, "Va"),
                                                                 "ConnVAPM")
                                connVBPM = mdl.get_item("ConnVBPM", parent=comp_handle, item_type="connection")
                                if not connVBPM:
                                    connVBPM = mdl.create_connection(fromVB, mdl.term(power_meter, "Vb"),
                                                                     "ConnVBPM")
                                connVCPM = mdl.get_item("ConnVCPM", parent=comp_handle, item_type="connection")
                                if not connVCPM:
                                    connVCPM = mdl.create_connection(fromVC, mdl.term(power_meter, "Vc"),
                                                                     "ConnVCPM")
                                connIAPM = mdl.get_item("ConnIAPM", parent=comp_handle, item_type="connection")
                                if not connIAPM:
                                    connIAPM = mdl.create_connection(fromIA, mdl.term(power_meter, "Ia"),
                                                                     "ConnIAPM")
                                connIBPM = mdl.get_item("ConnIBPM", parent=comp_handle, item_type="connection")
                                if not connIBPM:
                                    connIBPM = mdl.create_connection(fromIB, mdl.term(power_meter, "Ib"),
                                                                     "ConnIBPM")
                                connICPM = mdl.get_item("ConnICPM", parent=comp_handle, item_type="connection")
                                if not connICPM:
                                    connICPM = mdl.create_connection(fromIC, mdl.term(power_meter, "Ic"),
                                                                     "ConnICPM")
                                connVArms = mdl.get_item("ConnVARMSPM", parent=comp_handle, item_type="connection")
                                if not connVArms:
                                    connVArms = mdl.create_connection(fromVArms, mdl.term(power_meter, "VrmsA"),
                                                                 "ConnVARMSPM")
                                connVBrms = mdl.get_item("ConnVBRMSPM", parent=comp_handle, item_type="connection")
                                if not connVBrms:
                                    connVBrms = mdl.create_connection(fromVBrms, mdl.term(power_meter, "VrmsB"),
                                                                     "ConnVBRMSPM")
                                connVCrms = mdl.get_item("ConnVCRMSPM", parent=comp_handle, item_type="connection")
                                if not connVCrms:
                                    connVCrms = mdl.create_connection(fromVCrms, mdl.term(power_meter, "VrmsC"),
                                                                     "ConnVCRMSPM")
                                connIArms = mdl.get_item("ConnIARMSPM", parent=comp_handle, item_type="connection")
                                if not connIArms:
                                    connIArms = mdl.create_connection(fromIArms, mdl.term(power_meter, "IrmsA"),
                                                                     "ConnIARMSPM")
                                connIBrms = mdl.get_item("ConnIBRMSPM", parent=comp_handle, item_type="connection")
                                if not connIBrms:
                                    connIBrms = mdl.create_connection(fromIBrms, mdl.term(power_meter, "IrmsB"),
                                                                     "ConnIBRMSPM")
                                connICrms = mdl.get_item("ConnICRMSPM", parent=comp_handle, item_type="connection")
                                if not connICrms:
                                    connICrms = mdl.create_connection(fromICrms, mdl.term(power_meter, "IrmsC"),
                                                                     "ConnICRMSPM")
                                conndFract = mdl.get_item("ConndFractPM", parent=comp_handle, item_type="connection")
                                if not conndFract:
                                    conndFract = mdl.create_connection(fromdFract, mdl.term(power_meter, "dFract"),
                                                                     "ConndFractPM")
                                
                                connPa = mdl.get_item("ConnPMPa", parent=comp_handle, item_type="connection")
                                if not connPa:
                                    connPa = mdl.create_connection(mdl.term(power_meter, "Pa"), GoToPa,
                                                                     "ConnPMPa")
                                connPb = mdl.get_item("ConnPMPb", parent=comp_handle, item_type="connection")
                                if not connPb:
                                    connPb = mdl.create_connection(mdl.term(power_meter, "Pb"), GoToPb,
                                                                     "ConnPMPb")
                                connPc = mdl.get_item("ConnPMPc", parent=comp_handle, item_type="connection")
                                if not connPc:
                                    connPc = mdl.create_connection(mdl.term(power_meter, "Pc"), GoToPc,
                                                                     "ConnPMPc")
                                connP = mdl.get_item("ConnPMP", parent=comp_handle, item_type="connection")
                                if not connP:
                                    connP = mdl.create_connection(mdl.term(power_meter, "P"), GoToP,
                                                                     "ConnPMP")
                                connQa = mdl.get_item("ConnPMQa", parent=comp_handle, item_type="connection")
                                if not connQa:
                                    connQa = mdl.create_connection(mdl.term(power_meter, "Qa"), GoToQa,
                                                                     "ConnPMQa")
                                connQb = mdl.get_item("ConnPMQb", parent=comp_handle, item_type="connection")
                                if not connQb:
                                    connQb = mdl.create_connection(mdl.term(power_meter, "Qb"), GoToQb,
                                                                     "ConnPMQb")
                                connQc = mdl.get_item("ConnPMQc", parent=comp_handle, item_type="connection")
                                if not connQc:
                                    connQc = mdl.create_connection(mdl.term(power_meter, "Qc"), GoToQc,
                                                                     "ConnPMQc")
                                connQ = mdl.get_item("ConnPMQ", parent=comp_handle, item_type="connection")
                                if not connQ:
                                    connQ = mdl.create_connection(mdl.term(power_meter, "Q"), GoToQ,
                                                                     "ConnPMQ")
                                connSa = mdl.get_item("ConnPMSa", parent=comp_handle, item_type="connection")
                                if not connSa:
                                    connSa = mdl.create_connection(mdl.term(power_meter, "Sa"), GoToSa,
                                                                     "ConnPMSa")
                                connSb = mdl.get_item("ConnPMSb", parent=comp_handle, item_type="connection")
                                if not connSb:
                                    connSb = mdl.create_connection(mdl.term(power_meter, "Sb"), GoToSb,
                                                                     "ConnPMSb")
                                connSc = mdl.get_item("ConnPMSc", parent=comp_handle, item_type="connection")
                                if not connSc:
                                    connSc = mdl.create_connection(mdl.term(power_meter, "Sc"), GoToSc,
                                                                     "ConnPMSc")
                                connS = mdl.get_item("ConnPMS", parent=comp_handle, item_type="connection")
                                if not connS:
                                    connS = mdl.create_connection(mdl.term(power_meter, "S"), GoToS,
                                                                     "ConnPMS")
                                connPFa = mdl.get_item("ConnPMPFa", parent=comp_handle, item_type="connection")
                                if not connPFa:
                                    connPFa = mdl.create_connection(mdl.term(power_meter, "PFa"), GoToPFa,
                                                                     "ConnPMPFa")
                                connPFb = mdl.get_item("ConnPMPFb", parent=comp_handle, item_type="connection")
                                if not connPFb:
                                    connPFb = mdl.create_connection(mdl.term(power_meter, "PFb"), GoToPFb,
                                                                     "ConnPMPFb")
                                connPFc = mdl.get_item("ConnPMPFc", parent=comp_handle, item_type="connection")
                                if not connPFc:
                                    connPFc = mdl.create_connection(mdl.term(power_meter, "PFc"), GoToPFc,
                                                                     "ConnPMPFc")
                                connPF = mdl.get_item("ConnPMPF", parent=comp_handle, item_type="connection")
                                if not connPF:
                                    connPF = mdl.create_connection(mdl.term(power_meter, "PF"), GoToPF,
                                                                     "ConnPMPF")
                        
                                tagP = mdl.get_item("fromP", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagP, value="POWER_P")
                                tagPa = mdl.get_item("fromPA", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPa, value="POWER_PA")
                                tagPb = mdl.get_item("fromPB", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPb, value="POWER_PB")
                                tagPc = mdl.get_item("fromPC", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPc, value="POWER_PC")
                                tagQ = mdl.get_item("fromQ", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagQ, value="POWER_Q")
                                tagQa = mdl.get_item("fromQA", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagQa, value="POWER_QA")
                                tagQb = mdl.get_item("fromQB", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagQb, value="POWER_QB")
                                tagQc = mdl.get_item("fromQC", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagQc, value="POWER_QC")
                                tagS = mdl.get_item("fromS", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagS, value="POWER_S")
                                tagSa = mdl.get_item("fromSA", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagSa, value="POWER_SA")
                                tagSb = mdl.get_item("fromSB", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagSb, value="POWER_SB")
                                tagSc = mdl.get_item("fromSC", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagSc, value="POWER_SC")
                                tagPF = mdl.get_item("fromPF", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPF, value="POWER_PF")
                                tagPFa = mdl.get_item("fromPFA", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPFa, value="POWER_PFA")
                                tagPFb = mdl.get_item("fromPFB", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPFb, value="POWER_PFB")
                                tagPFc = mdl.get_item("fromPFC", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPFc, value="POWER_PFC")
                            else:
                                fromMode = mdl.get_item("fromMode3", parent=comp_handle, item_type="tag")
                                if fromMode:
                                    mdl.delete_item(fromMode)
                                fromSubMode = mdl.get_item("fromSubMode3", parent=comp_handle, item_type="tag")
                                if fromSubMode:
                                    mdl.delete_item(fromSubMode)
                                fromVA = mdl.get_item("fromVAn3", parent=comp_handle, item_type="tag")
                                if fromVA:
                                    mdl.delete_item(fromVA)
                                fromVB = mdl.get_item("fromVBn3", parent=comp_handle, item_type="tag")
                                if fromVB:
                                    mdl.delete_item(fromVB)
                                fromVC = mdl.get_item("fromVCn3", parent=comp_handle, item_type="tag")
                                if fromVC:
                                    mdl.delete_item(fromVC)
                                fromIA = mdl.get_item("fromIA3", parent=comp_handle, item_type="tag")
                                if fromIA:
                                    mdl.delete_item(fromIA)
                                fromIB = mdl.get_item("fromIB3", parent=comp_handle, item_type="tag")
                                if fromIB:
                                    mdl.delete_item(fromIB)
                                fromIC = mdl.get_item("fromIC3", parent=comp_handle, item_type="tag")
                                if fromIC:
                                    mdl.delete_item(fromIC)
                                fromVArms = mdl.get_item("fromVAnRMS5", parent=comp_handle, item_type="tag")
                                if fromVArms:
                                    mdl.delete_item(fromVArms)
                                fromVBrms = mdl.get_item("fromVBnRMS5", parent=comp_handle, item_type="tag")
                                if fromVBrms:
                                    mdl.delete_item(fromVBrms)
                                fromVCrms = mdl.get_item("fromVCnRMS5", parent=comp_handle, item_type="tag")
                                if fromVCrms:
                                    mdl.delete_item(fromVCrms)
                                fromIArms = mdl.get_item("fromIARMS5", parent=comp_handle, item_type="tag")
                                if fromIArms:
                                    mdl.delete_item(fromIArms)
                                fromIBrms = mdl.get_item("fromIBRMS5", parent=comp_handle, item_type="tag")
                                if fromIBrms:
                                    mdl.delete_item(fromIBrms)
                                fromICrms = mdl.get_item("fromICRMS5", parent=comp_handle, item_type="tag")
                                if fromICrms:
                                    mdl.delete_item(fromICrms)
                                fromdFract = mdl.get_item("fromdFract3", parent=comp_handle, item_type="tag")
                                if fromdFract:
                                    mdl.delete_item(fromdFract)
                        
                                power_meter = mdl.get_item("Power Meter", parent=comp_handle, item_type="component")
                                if power_meter:
                                    mdl.delete_item(power_meter)
                        
                                GoToPa = mdl.get_item("GoToPa", parent=comp_handle, item_type="tag")
                                if GoToPa:
                                    mdl.delete_item(GoToPa)
                                GoToPb = mdl.get_item("GoToPb", parent=comp_handle, item_type="tag")
                                if GoToPb:
                                    mdl.delete_item(GoToPb)
                                GoToPc = mdl.get_item("GoToPc", parent=comp_handle, item_type="tag")
                                if GoToPc:
                                    mdl.delete_item(GoToPc)
                                GoToP = mdl.get_item("GoToP", parent=comp_handle, item_type="tag")
                                if GoToP:
                                    mdl.delete_item(GoToP)
                                GoToQa = mdl.get_item("GoToQa", parent=comp_handle, item_type="tag")
                                if GoToQa:
                                    mdl.delete_item(GoToQa)
                                GoToQb = mdl.get_item("GoToQb", parent=comp_handle, item_type="tag")
                                if GoToQb:
                                    mdl.delete_item(GoToQb)
                                GoToQc = mdl.get_item("GoToQc", parent=comp_handle, item_type="tag")
                                if GoToQc:
                                    mdl.delete_item(GoToQc)
                                GoToQ = mdl.get_item("GoToQ", parent=comp_handle, item_type="tag")
                                if GoToQ:
                                    mdl.delete_item(GoToQ)
                                GoToSa = mdl.get_item("GoToSa", parent=comp_handle, item_type="tag")
                                if GoToSa:
                                    mdl.delete_item(GoToSa)
                                GoToSb = mdl.get_item("GoToSb", parent=comp_handle, item_type="tag")
                                if GoToSb:
                                    mdl.delete_item(GoToSb)
                                GoToSc = mdl.get_item("GoToSc", parent=comp_handle, item_type="tag")
                                if GoToSc:
                                    mdl.delete_item(GoToSc)
                                GoToS = mdl.get_item("GoToS", parent=comp_handle, item_type="tag")
                                if GoToS:
                                    mdl.delete_item(GoToS)
                                GoToPFa = mdl.get_item("GoToPFa", parent=comp_handle, item_type="tag")
                                if GoToPFa:
                                    mdl.delete_item(GoToPFa)
                                GoToPFb = mdl.get_item("GoToPFb", parent=comp_handle, item_type="tag")
                                if GoToPFb:
                                    mdl.delete_item(GoToPFb)
                                GoToPFc = mdl.get_item("GoToPFc", parent=comp_handle, item_type="tag")
                                if GoToPFc:
                                    mdl.delete_item(GoToPFc)
                                GoToPF = mdl.get_item("GoToPF", parent=comp_handle, item_type="tag")
                                if GoToPF:
                                    mdl.delete_item(GoToPF)
                        
                                tagP = mdl.get_item("fromP", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagP, value="zero")
                                tagPa = mdl.get_item("fromPA", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPa, value="zero")
                                tagPb = mdl.get_item("fromPB", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPb, value="zero")
                                tagPc = mdl.get_item("fromPC", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPc, value="zero")
                                tagQ = mdl.get_item("fromQ", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagQ, value="zero")
                                tagQa = mdl.get_item("fromQA", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagQa, value="zero")
                                tagQb = mdl.get_item("fromQB", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagQb, value="zero")
                                tagQc = mdl.get_item("fromQC", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagQc, value="zero")
                                tagS = mdl.get_item("fromS", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagS, value="zero")
                                tagSa = mdl.get_item("fromSA", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagSa, value="zero")
                                tagSb = mdl.get_item("fromSB", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagSb, value="zero")
                                tagSc = mdl.get_item("fromSC", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagSc, value="zero")
                                tagPF = mdl.get_item("fromPF", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPF, value="zero")
                                tagPFa = mdl.get_item("fromPFA", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPFa, value="zero")
                                tagPFb = mdl.get_item("fromPFB", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPFb, value="zero")
                                tagPFc = mdl.get_item("fromPFC", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPFc, value="zero")
                        
                        
                        def place_AB_power_meter(mdl, comp_handle, new_value):
                            if new_value:
                                fromVA = mdl.get_item("fromVAn3", parent=comp_handle, item_type="tag")
                                if not fromVA:
                                    fromVA = mdl.create_tag("VAn", name="fromVAn3",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="out", rotation="right",
                                                               position=(8880, 8488))
                                fromVB = mdl.get_item("fromVBn3", parent=comp_handle, item_type="tag")
                                if not fromVB:
                                    fromVB = mdl.create_tag("VBn", name="fromVBn3",
                                                            parent=comp_handle, scope="local", kind="sp",
                                                            direction="out", rotation="right",
                                                            position=(8856, 8528))
                                fromVC = mdl.get_item("fromVCn3", parent=comp_handle, item_type="tag")
                                if not fromVC:
                                    fromVC = mdl.create_tag("VCn", name="fromVCn3",
                                                            parent=comp_handle, scope="local", kind="sp",
                                                            direction="out", rotation="right",
                                                            position=(8832, 8568))
                                fromIA = mdl.get_item("fromIA3", parent=comp_handle, item_type="tag")
                                if not fromIA:
                                    fromIA = mdl.create_tag("IA", name="fromIA3",
                                                            parent=comp_handle, scope="local", kind="sp",
                                                            direction="out", rotation="left",
                                                            position=(8832, 8792))
                                fromIB = mdl.get_item("fromIB3", parent=comp_handle, item_type="tag")
                                if not fromIB:
                                    fromIB = mdl.create_tag("IB", name="fromIB3",
                                                            parent=comp_handle, scope="local", kind="sp",
                                                            direction="out", rotation="left",
                                                            position=(8856, 8752))
                                fromIC = mdl.get_item("fromIC3", parent=comp_handle, item_type="tag")
                                if not fromIC:
                                    fromIC = mdl.create_tag("IC", name="fromIC3",
                                                            parent=comp_handle, scope="local", kind="sp",
                                                            direction="out", rotation="left",
                                                            position=(8880, 8712))
                        
                                power_meter = mdl.get_item("Power Meter", parent=comp_handle, item_type="component")
                                if not power_meter:
                                    power_meter = mdl.create_component("Power Meter", parent=comp_handle,
                                                                       name="Power Meter",
                                                                       position=(8984, 8624), rotation="up")
                                    mdl.set_property_value(mdl.prop(power_meter, "filter_order"), "second order")
                                    mdl.set_property_value(mdl.prop(power_meter, "enable_inst_ports"), False)
                        
                                GoToP = mdl.get_item("GoToP", parent=comp_handle, item_type="tag")
                                if not GoToP:
                                    GoToP = mdl.create_tag("POWER_P", name="GoToP",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="left",
                                                               position=(9064, 8504))
                                GoToQ = mdl.get_item("GoToQ", parent=comp_handle, item_type="tag")
                                if not GoToQ:
                                    GoToQ = mdl.create_tag("POWER_Q", name="GoToQ",
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="in", rotation="left",
                                                           position=(9088, 8544))
                                GoToS = mdl.get_item("GoToS", parent=comp_handle, item_type="tag")
                                if not GoToS:
                                    GoToS = mdl.create_tag("POWER_S", name="GoToS",
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="in", rotation="right",
                                                           position=(9088, 8760))
                                GoToPF = mdl.get_item("GoToPF", parent=comp_handle, item_type="tag")
                                if not GoToPF:
                                    GoToPF = mdl.create_tag("POWER_PF", name="GoToPF",
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="in", rotation="right",
                                                           position=(9064, 8720))
                    
                                connVAPM = mdl.get_item("ConnVAPM", parent=comp_handle, item_type="connection")
                                if not connVAPM:
                                    connVAPM = mdl.create_connection(fromVA, mdl.term(power_meter, "va"),
                                                                 "ConnVAPM")
                                connVBPM = mdl.get_item("ConnVBPM", parent=comp_handle, item_type="connection")
                                if not connVBPM:
                                    connVBPM = mdl.create_connection(fromVB, mdl.term(power_meter, "vb"),
                                                                     "ConnVBPM")
                                connVCPM = mdl.get_item("ConnVCPM", parent=comp_handle, item_type="connection")
                                if not connVCPM:
                                    connVCPM = mdl.create_connection(fromVC, mdl.term(power_meter, "vc"),
                                                                     "ConnVCPM")
                                connIAPM = mdl.get_item("ConnIAPM", parent=comp_handle, item_type="connection")
                                if not connIAPM:
                                    connIAPM = mdl.create_connection(fromIA, mdl.term(power_meter, "ia"),
                                                                     "ConnIAPM")
                                connIBPM = mdl.get_item("ConnIBPM", parent=comp_handle, item_type="connection")
                                if not connIBPM:
                                    connIBPM = mdl.create_connection(fromIB, mdl.term(power_meter, "ib"),
                                                                     "ConnIBPM")
                                connICPM = mdl.get_item("ConnICPM", parent=comp_handle, item_type="connection")
                                if not connICPM:
                                    connICPM = mdl.create_connection(fromIC, mdl.term(power_meter, "ic"),
                                                                     "ConnICPM")
                                connPMPdc = mdl.get_item("ConnPMPdc", parent=comp_handle, item_type="connection")
                                if not connPMPdc:
                                    connPMPdc = mdl.create_connection(mdl.term(power_meter, "Pdc"),GoToP,
                                                                     "ConnPMPdc")
                                connPMQdc = mdl.get_item("ConnPMQdc", parent=comp_handle, item_type="connection")
                                if not connPMQdc:
                                    connPMQdc = mdl.create_connection(mdl.term(power_meter, "Qdc"), GoToQ,
                                                                      "ConnPMQdc")
                                connPMS = mdl.get_item("ConnPMS", parent=comp_handle, item_type="connection")
                                if not connPMS:
                                    connPMS = mdl.create_connection(mdl.term(power_meter, "apparent"), GoToS,
                                                                      "ConnPMS")
                                connPMPF = mdl.get_item("ConnPMPF", parent=comp_handle, item_type="connection")
                                if not connPMPF:
                                    connPMPF = mdl.create_connection(mdl.term(power_meter, "k_factor"), GoToPF,
                                                                      "ConnPMPF")
                                tagP = mdl.get_item("fromP", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagP, value="POWER_P")
                                tagQ = mdl.get_item("fromQ", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagQ, value="POWER_Q")
                                tagS = mdl.get_item("fromS", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagS, value="POWER_S")
                                tagPF = mdl.get_item("fromPF", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPF, value="POWER_PF")
                                
                                tagPa = mdl.get_item("fromPA", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPa, value="zero")
                                tagPb = mdl.get_item("fromPB", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPb, value="zero")
                                tagPc = mdl.get_item("fromPC", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPc, value="zero")
                                
                                tagQa = mdl.get_item("fromQA", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagQa, value="zero")
                                tagQb = mdl.get_item("fromQB", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagQb, value="zero")
                                tagQc = mdl.get_item("fromQC", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagQc, value="zero")
                                
                                tagSa = mdl.get_item("fromSA", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagSa, value="zero")
                                tagSb = mdl.get_item("fromSB", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagSb, value="zero")
                                tagSc = mdl.get_item("fromSC", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagSc, value="zero")
                                
                                tagPFa = mdl.get_item("fromPFA", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPFa, value="zero")
                                tagPFb = mdl.get_item("fromPFB", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPFb, value="zero")
                                tagPFc = mdl.get_item("fromPFC", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPFc, value="zero")
                                
                            else:
                                fromVA = mdl.get_item("fromVAn3", parent=comp_handle, item_type="tag")
                                if fromVA:
                                    mdl.delete_item(fromVA)
                                fromVB = mdl.get_item("fromVBn3", parent=comp_handle, item_type="tag")
                                if fromVB:
                                    mdl.delete_item(fromVB)
                                fromVC = mdl.get_item("fromVCn3", parent=comp_handle, item_type="tag")
                                if fromVC:
                                    mdl.delete_item(fromVC)
                                fromIA = mdl.get_item("fromIA3", parent=comp_handle, item_type="tag")
                                if fromIA:
                                    mdl.delete_item(fromIA)
                                fromIB = mdl.get_item("fromIB3", parent=comp_handle, item_type="tag")
                                if fromIB:
                                    mdl.delete_item(fromIB)
                                fromIC = mdl.get_item("fromIC3", parent=comp_handle, item_type="tag")
                                if fromIC:
                                    mdl.delete_item(fromIC)
                        
                                power_meter = mdl.get_item("Power Meter", parent=comp_handle, item_type="component")
                                if power_meter:
                                    mdl.delete_item(power_meter)
                        
                                GoToP = mdl.get_item("GoToP", parent=comp_handle, item_type="tag")
                                if GoToP:
                                    mdl.delete_item(GoToP)
                                GoToQ = mdl.get_item("GoToQ", parent=comp_handle, item_type="tag")
                                if GoToQ:
                                    mdl.delete_item(GoToQ)
                                GoToS = mdl.get_item("GoToS", parent=comp_handle, item_type="tag")
                                if GoToS:
                                    mdl.delete_item(GoToS)
                                GoToPF = mdl.get_item("GoToPF", parent=comp_handle, item_type="tag")
                                if GoToPF:
                                    mdl.delete_item(GoToPF)
                        
                                tagP = mdl.get_item("fromP", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagP, value="zero")
                                tagPa = mdl.get_item("fromPA", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPa, value="zero")
                                tagPb = mdl.get_item("fromPB", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPb, value="zero")
                                tagPc = mdl.get_item("fromPC", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPc, value="zero")
                                tagQ = mdl.get_item("fromQ", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagQ, value="zero")
                                tagQa = mdl.get_item("fromQA", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagQa, value="zero")
                                tagQb = mdl.get_item("fromQB", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagQb, value="zero")
                                tagQc = mdl.get_item("fromQC", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagQc, value="zero")
                                tagS = mdl.get_item("fromS", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagS, value="zero")
                                tagSa = mdl.get_item("fromSA", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagSa, value="zero")
                                tagSb = mdl.get_item("fromSB", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagSb, value="zero")
                                tagSc = mdl.get_item("fromSC", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagSc, value="zero")
                                tagPF = mdl.get_item("fromPF", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPF, value="zero")
                                tagPFa = mdl.get_item("fromPFA", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPFa, value="zero")
                                tagPFb = mdl.get_item("fromPFB", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPFb, value="zero")
                                tagPFc = mdl.get_item("fromPFC", parent=comp_handle, item_type="tag")
                                mdl.set_tag_properties(tagPFc, value="zero")
                        
                        
                        
                        def place_measSM(mdl, comp_handle, new_value):
                            if new_value:
                                fromFreq = mdl.get_item("fromFreq2", parent=comp_handle, item_type="tag")
                                if not fromFreq:
                                    fromFreq = mdl.create_tag("Freq", name="fromFreq2",
                                                           parent=comp_handle, scope="local", kind="sp",
                                                           direction="out", rotation="up",
                                                           position=(7776, 8496))
                                measSM = mdl.get_item("measSM", parent=comp_handle, item_type="component")
                                if not measSM:
                                    measSM = mdl.create_component("Meter_SM_and_dFract", parent=comp_handle,
                                                                       name="measSM", position=(7896, 8496),
                                                                       rotation="up")
                                    mdl.set_property_value(mdl.prop(measSM, "Ts"), "Ts")
                                    mdl.set_property_value(mdl.prop(measSM, "n_cycles"), "n_cycles")
                                gotodFract = mdl.get_item("GoTodFract", parent=comp_handle, item_type="tag")
                                if not gotodFract:
                                    gotodFract = mdl.create_tag("dFract", name="GoTodFract",
                                                             parent=comp_handle, scope="local", kind="sp",
                                                             direction="in", rotation="left",
                                                             position=(7968, 8400))
                                gotoMode = mdl.get_item("GoToMode", parent=comp_handle, item_type="tag")
                                if not gotoMode:
                                    gotoMode = mdl.create_tag("mode", name="GoToMode",
                                                             parent=comp_handle, scope="local", kind="sp",
                                                             direction="in", rotation="up",
                                                             position=(8040, 8496))
                                termSubMode = mdl.get_item("termSubMode", parent=comp_handle, item_type="component")
                                if not termSubMode:
                                    termSubMode = mdl.create_component("Termination", parent=comp_handle,
                                                                       name="termSubMode", position=(7968, 8592),
                                                                       rotation="right")
                                connFreq = mdl.get_item("connFreq2", parent=comp_handle, item_type="connection")
                                if not connFreq:
                                    connFreq = mdl.create_connection(fromFreq, mdl.term(measSM, "Freq"),
                                                                     "connFreq2")
                                conndFract = mdl.get_item("conndFract", parent=comp_handle, item_type="connection")
                                if not conndFract:
                                    conndFract = mdl.create_connection(mdl.term(measSM, "dFract"), gotodFract,
                                                                     "conndFract")
                                connMode = mdl.get_item("connMode", parent=comp_handle, item_type="connection")
                                if not connMode:
                                    connMode = mdl.create_connection(mdl.term(measSM, "mode"), gotoMode,
                                                                     "connMode")
                                connSubMode = mdl.get_item("connSubMode", parent=comp_handle, item_type="connection")
                                if not connSubMode:
                                    connSubMode = mdl.create_connection(mdl.term(measSM, "submode"), mdl.term(termSubMode, "in"),
                                                                     "connSubMode")
                            else:
                                fromFreq = mdl.get_item("fromFreq2", parent=comp_handle, item_type="tag")
                                if fromFreq:
                                    mdl.delete_item(fromFreq)
                                measSM = mdl.get_item("measSM", parent=comp_handle, item_type="component")
                                if measSM:
                                    mdl.delete_item(measSM)
                                gotodFract = mdl.get_item("GoTodFract", parent=comp_handle, item_type="tag")
                                if gotodFract:
                                    mdl.delete_item(gotodFract)
                                gotoMode = mdl.get_item("GoToMode", parent=comp_handle, item_type="tag")
                                if gotoMode:
                                    mdl.delete_item(gotoMode)
                                termSubMode = mdl.get_item("termSubMode", parent=comp_handle, item_type="component")
                                if termSubMode:
                                    mdl.delete_item(termSubMode)
                                gotoSubMode = mdl.get_item("GoToSubMode", parent=comp_handle, item_type="tag")
                                if gotoSubMode:
                                    mdl.delete_item(gotoSubMode)
                        
                        
                        def placeSubModetag(mdl, comp_handle, new_value):
                            if new_value:
                                termSubMode = mdl.get_item("termSubMode", parent=comp_handle, item_type="component")
                                if termSubMode:
                                    mdl.delete_item(termSubMode)
                                measSM = mdl.get_item("measSM", parent=comp_handle, item_type="component")
                                if measSM:
                                    gotoSubMode = mdl.get_item("GoToSubMode", parent=comp_handle, item_type="tag")
                                    if not gotoSubMode:
                                        gotoSubMode = mdl.create_tag("submode", name="GoToSubMode",
                                                                     parent=comp_handle, scope="local", kind="sp",
                                                                     direction="in", rotation="right",
                                                                     position=(7968, 8592))
                                    connSubMode = mdl.get_item("connSubMode", parent=comp_handle, item_type="connection")
                                    if not connSubMode:
                                        connSubMode = mdl.create_connection(mdl.term(measSM, "submode"), gotoSubMode,
                                                                         "connSubMode")
                            else:
                                gotoSubMode = mdl.get_item("GoToSubMode", parent=comp_handle, item_type="tag")
                                if gotoSubMode:
                                    mdl.delete_item(gotoSubMode)
                                measSM = mdl.get_item("measSM", parent=comp_handle, item_type="component")
                                if measSM:
                                    termSubMode = mdl.get_item("termSubMode", parent=comp_handle, item_type="component")
                                    if not termSubMode:
                                        termSubMode = mdl.create_component("Termination", parent=comp_handle,
                                                                           name="termSubMode", position=(7968, 8592),
                                                                           rotation="right")
                                    connSubMode = mdl.get_item("connSubMode", parent=comp_handle, item_type="connection")
                                    if not connSubMode:
                                        connSubMode = mdl.create_connection(mdl.term(measSM, "submode"), mdl.term(termSubMode, "in"),
                                                                         "connSubMode")
                        
                        def placePort(mdl, comp_handle, new_value, port_name, bus_name, term_pos):
                            if new_value:
                                termOut = mdl.get_item(port_name, parent=comp_handle, item_type="component")
                                if termOut:
                                    pos = mdl.get_position(termOut)
                                    mdl.delete_item(termOut)
                                    portOut = mdl.create_port(parent=comp_handle, name=port_name, direction="out",
                                                                kind="sp", terminal_position=("top", term_pos),
                                                                position=pos, rotation="left")
                                    busJoin = mdl.get_item(bus_name, parent=comp_handle, item_type="component")
                                    mdl.create_connection(mdl.term(busJoin, "out"), portOut, "conn_{}".format(port_name))
                            else:
                                portOut = mdl.get_item(port_name, parent=comp_handle, item_type="port")
                                if portOut:
                                    pos = mdl.get_position(portOut)
                                    mdl.delete_item(portOut)
                                    termOut = mdl.create_component("Termination", parent=comp_handle, name=port_name,
                                                                    position=pos, rotation="left")
                                    busJoin = mdl.get_item(bus_name, parent=comp_handle, item_type="component")
                                    mdl.create_connection(mdl.term(busJoin, "out"), mdl.term(termOut, "in"), "conn_{}".format(port_name))
                        
                        
                        def removeSnubber(mdl, comp_handle, new_value):
                            if new_value:
                                Ra = mdl.get_item("Ra", parent=comp_handle, item_type="component")
                                if Ra:
                                    posA = mdl.get_position(Ra)
                                    mdl.delete_item(Ra)
                                    ocA = mdl.create_component("Open Circuit", parent=comp_handle, name="Ra",
                                                                position=posA, rotation="right")
                                    junAp = mdl.get_item("Junction221", parent=comp_handle, item_type="junction")
                                    junAn = mdl.get_item("Junction230", parent=comp_handle, item_type="junction")
                                    if junAp:
                                        mdl.create_connection(junAp, mdl.term(ocA, "p_node"), "Connection3035")
                                    if junAn:
                                        mdl.create_connection(mdl.term(ocA, "n_node"), junAn, "Connection3088")
                                Rb = mdl.get_item("Rb", parent=comp_handle, item_type="component")
                                if Rb:
                                    posB = mdl.get_position(Rb)
                                    mdl.delete_item(Rb)
                                    ocB = mdl.create_component("Open Circuit", parent=comp_handle, name="Rb",
                                                                position=posB, rotation="right")
                                    junBp = mdl.get_item("Junction220", parent=comp_handle, item_type="junction")
                                    junBn = mdl.get_item("Junction225", parent=comp_handle, item_type="junction")
                                    if junBp:
                                        mdl.create_connection(junBp, mdl.term(ocB, "p_node"), "Connection3032")
                                    if junBn:
                                        mdl.create_connection(mdl.term(ocB, "n_node"), junBn, "Connection3070")
                                Rc = mdl.get_item("Rc", parent=comp_handle, item_type="component")
                                if Rc:
                                    posC = mdl.get_position(Rc)
                                    mdl.delete_item(Rc)
                                    ocC = mdl.create_component("Open Circuit", parent=comp_handle, name="Rc",
                                                                position=posC, rotation="right")
                                    junCp = mdl.get_item("Junction219", parent=comp_handle, item_type="junction")
                                    junCn = mdl.get_item("Junction225", parent=comp_handle, item_type="junction")
                                    if junCp:
                                        mdl.create_connection(junCp, mdl.term(ocC, "p_node"), "Connection3029")
                                    if junAn:
                                        mdl.create_connection(mdl.term(ocC, "n_node"), junCn, "Connection3068")
                            else:
                                Ra = mdl.get_item("Ra", parent=comp_handle, item_type="component")
                                if Ra:
                                    posA = mdl.get_position(Ra)
                                    mdl.delete_item(Ra)
                                    ocA = mdl.create_component("Resistor", parent=comp_handle, name="Ra",
                                                                position=posA, rotation="right")
                                    mdl.set_property_value(mdl.prop(ocA, "resistance"), "R")
                                    junAp = mdl.get_item("Junction221", parent=comp_handle, item_type="junction")
                                    junAn = mdl.get_item("Junction230", parent=comp_handle, item_type="junction")
                                    if junAp:
                                        mdl.create_connection(junAp, mdl.term(ocA, "p_node"), "Connection3035")
                                    if junAn:
                                        mdl.create_connection(mdl.term(ocA, "n_node"), junAn, "Connection3088")
                                Rb = mdl.get_item("Rb", parent=comp_handle, item_type="component")
                                if Rb:
                                    posB = mdl.get_position(Rb)
                                    mdl.delete_item(Rb)
                                    ocB = mdl.create_component("Resistor", parent=comp_handle, name="Rb",
                                                                position=posB, rotation="right")
                                    mdl.set_property_value(mdl.prop(ocB, "resistance"), "R")
                                    junBp = mdl.get_item("Junction220", parent=comp_handle, item_type="junction")
                                    junBn = mdl.get_item("Junction225", parent=comp_handle, item_type="junction")
                                    if junBp:
                                        mdl.create_connection(junBp, mdl.term(ocB, "p_node"), "Connection3032")
                                    if junBn:
                                        mdl.create_connection(mdl.term(ocB, "n_node"), junBn, "Connection3070")
                                Rc = mdl.get_item("Rc", parent=comp_handle, item_type="component")
                                if Rc:
                                    posC = mdl.get_position(Rc)
                                    mdl.delete_item(Rc)
                                    ocC = mdl.create_component("Resistor", parent=comp_handle, name="Rc",
                                                                position=posC, rotation="right")
                                    mdl.set_property_value(mdl.prop(ocC, "resistance"), "R")
                                    junCp = mdl.get_item("Junction219", parent=comp_handle, item_type="junction")
                                    junCn = mdl.get_item("Junction225", parent=comp_handle, item_type="junction")
                                    if junCp:
                                        mdl.create_connection(junCp, mdl.term(ocC, "p_node"), "Connection3029")
                                    if junAn:
                                        mdl.create_connection(mdl.term(ocC, "n_node"), junCn, "Connection3068")
                    ENDCODE

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE
                }
            }
            [
                position = 8544, 8280
                size = 56, 240
            ]

            component Subsystem GovernorX {
                layout = dynamic
                component gen_gain Gain36 {
                    gain = "1/T1"
                }
                [
                    position = 8248, 8160
                    hide_name = True
                ]

                component gen_sum Sum10 {
                    signs = "++"
                }
                [
                    position = 8160, 8248
                    hide_name = True
                ]

                component gen_gain Gain30 {
                    gain = "1/T1"
                }
                [
                    position = 8320, 8248
                    hide_name = True
                ]

                component gen_integrator Integrator12 {
                }
                [
                    position = 8680, 8456
                    hide_name = True
                ]

                component gen_gain Gain28 {
                    gain = "pms/w_0"
                }
                [
                    position = 7800, 8376
                    hide_name = True
                ]

                component Subsystem "Exciter Activation" {
                    layout = dynamic
                    component gen_abs Abs1 {
                    }
                    [
                        position = 8192, 8208
                        hide_name = True
                    ]

                    component gen_comparator Comparator1 {
                    }
                    [
                        position = 8264, 8232
                        hide_name = True
                        scale = 1, -1
                    ]

                    component src_constant Constant1 {
                        execution_rate = "Ts_sys"
                        value = "4*maxw_slip"
                    }
                    [
                        position = 8192, 8256
                        hide_name = True
                    ]

                    component gen_probe "speed difference" {
                    }
                    [
                        position = 8096, 8144
                    ]

                    component gen_c_function "Activate Exciter" {
                        in_terminal_dimensions = "inherit"
                        in_terminal_dimensions_str = "boolean inherit"
                        in_terminal_labels = "[(\'boolean\', True)]"
                        in_terminal_properties = "inherit boolean;"
                        init_fnc = "/*Begin code section*/
Activate = 0;
/*End code section*/"
                        no_feed_inputs = "[\'\']"
                        no_feed_outputs = "[\'\']"
                        out_terminal_dimensions = "inherit"
                        out_terminal_dimensions_str = "Activate inherit"
                        out_terminal_labels = "[(\'Activate\', True)]"
                        out_terminal_properties = "int Activate;"
                        output_fnc = "/*Begin code section*/
if(boolean==1){
    Activate = 1;
}
/*End code section*/"
                    }
                    [
                        position = 8360, 8232
                        size = 112, 48
                    ]

                    component gen_sum Sum1 {
                        signs = "+-"
                    }
                    [
                        position = 8008, 8144
                        hide_name = True
                    ]

                    component src_constant Constant2 {
                        execution_rate = "Ts_sys"
                    }
                    [
                        position = 7936, 8120
                        hide_name = True
                    ]

                    port w_PU {
                        label = "w_PU"
                        position = left:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7936, 8168
                    ]

                    port "exciter state" {
                        position = auto:auto
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8480, 8232
                    ]

                    junction Junction14 sp
                    [
                        position = 8048, 8144
                    ]

                    connect Abs1.out Comparator1.in2 as Connection105
                    connect Constant1.out Comparator1.in1 as Connection18
                    connect w_PU Sum1.in1 as Connection199
                    connect "speed difference.in" Junction14 as Connection195
                    connect Junction14 Sum1.out as Connection196
                    connect Abs1.in Junction14 as Connection197
                    connect Constant2.out Sum1.in as Connection201
                    connect Comparator1.out "Activate Exciter.boolean" as Connection206
                    connect "Activate Exciter.Activate" "exciter state" as Connection207
                }
                [
                    position = 7912, 8376
                    size = 112, 48
                ]

                component gen_sum Sum7 {
                    signs = "+-"
                }
                [
                    position = 7896, 8320
                    hide_name = True
                ]

                component gen_sum Sum2 {
                    signs = "+-"
                }
                [
                    position = 7896, 8224
                    hide_name = True
                ]

                component gen_gain Gain29 {
                    gain = "R_D"
                }
                [
                    position = 7992, 8224
                    hide_name = True
                ]

                component gen_sum Sum3 {
                    signs = "-+"
                }
                [
                    position = 8376, 8240
                    hide_name = True
                ]

                component gen_gain Gain31 {
                    gain = "T3"
                }
                [
                    position = 7992, 8048
                    hide_name = True
                ]

                component gen_sum Sum4 {
                }
                [
                    position = 8072, 7992
                    hide_name = True
                ]

                component gen_gain Gain32 {
                    gain = "K*gov_Kp"
                }
                [
                    position = 8176, 7992
                    hide_name = True
                ]

                component gen_sum Sum5 {
                    signs = "+-"
                }
                [
                    position = 8288, 7976
                    hide_name = True
                ]

                component gen_gain Gain33 {
                    gain = "1/(T5+T6)"
                }
                [
                    position = 8408, 7976
                    hide_name = True
                ]

                component gen_sum Sum8 {
                    signs = "--"
                }
                [
                    position = 8512, 7952
                    hide_name = True
                ]

                component gen_gain Gain34 {
                    gain = "(T5+T6)/(T5*T6)"
                }
                [
                    position = 8608, 7952
                    hide_name = True
                ]

                component gen_gain Gain35 {
                    gain = "T4"
                }
                [
                    position = 7992, 7784
                    hide_name = True
                ]

                component gen_sum Sum9 {
                }
                [
                    position = 8064, 7760
                    hide_name = True
                ]

                component gen_integrator Integrator9 {
                }
                [
                    position = 8680, 8376
                    hide_name = True
                ]

                component gen_integrator Integrator10 {
                }
                [
                    position = 8696, 7952
                    hide_name = True
                ]

                component gen_integrator Integrator11 {
                }
                [
                    position = 8288, 7760
                    hide_name = True
                ]

                component src_scada_input AGC {
                    execution_rate = "Ts"
                    max = "S"
                    min = "-S"
                    unit = "W"
                }
                [
                    position = 7680, 8232
                ]

                component gen_probe P_b2 {
                }
                [
                    position = 8568, 8480
                    scale = -1, 1
                ]

                component gen_probe P_a2 {
                }
                [
                    position = 8568, 8400
                    scale = -1, 1
                ]

                component gen_probe P_a1 {
                }
                [
                    position = 8776, 8400
                ]

                component gen_probe P_b1 {
                }
                [
                    position = 8776, 8480
                ]

                component gen_probe P_sv {
                }
                [
                    position = 8800, 7816
                ]

                component gen_probe frequency_diff {
                }
                [
                    position = 8376, 8320
                ]

                component src_constant "AGC offset" {
                    execution_rate = "Ts"
                    value = "18345.5+400.3"
                }
                [
                    position = 7688, 8168
                ]

                component gen_sum Sum11 {
                    signs = "++"
                }
                [
                    position = 7760, 8200
                    hide_name = True
                ]

                component gen_rate_limiter "Rate Limiter2" {
                    falling_limit = "inner_w_fall"
                    rising_limit = "inner_w_rise"
                }
                [
                    position = 8080, 8320
                    hide_name = True
                ]

                component gen_gain Gain37 {
                    gain = "1/S"
                }
                [
                    position = 7816, 8200
                    hide_name = True
                ]

                component "core/Rate Transition" "Rate Transition1" {
                    execution_rate = "Ts"
                }
                [
                    position = 7992, 8320
                    hide_name = True
                    size = 32, 32
                ]

                port w_ref {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7728, 8312
                ]

                port w_m3 {
                    label = "w_m"
                    position = left:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7728, 8376
                ]

                port P_SV {
                    position = auto:auto
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8936, 7760
                ]

                port "exciter state" {
                    label = "exc ON/OFF"
                    position = bottom:auto
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8016, 8376
                ]

                tag From13 {
                    value = "P_b2"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8568, 8456
                    hide_name = True
                ]

                tag Goto6 {
                    value = "P_b1"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 8776, 8456
                    hide_name = True
                ]

                tag From1 {
                    value = "P_SV"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7800, 8248
                    hide_name = True
                    size = 54, 20
                ]

                tag From3 {
                    value = "P_b1"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8160, 8160
                    hide_name = True
                ]

                tag Goto1 {
                    value = "P_b2"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 8648, 8240
                    hide_name = True
                ]

                tag From5 {
                    value = "P_a2"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8568, 8376
                    hide_name = True
                ]

                tag Goto2 {
                    value = "P_a1"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 8776, 8376
                    hide_name = True
                ]

                tag From6 {
                    value = "P_b2"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7888, 8048
                    hide_name = True
                ]

                tag From7 {
                    value = "P_b1"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7888, 7944
                    hide_name = True
                ]

                tag From8 {
                    value = "P_a1"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8176, 7928
                    hide_name = True
                ]

                tag From9 {
                    value = "P_a2"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 8400, 7928
                    hide_name = True
                ]

                tag Goto4 {
                    value = "P_a2"
                    scope = masked_subsystem
                    kind = sp
                    direction = in
                }
                [
                    position = 8800, 7952
                    hide_name = True
                ]

                tag From10 {
                    value = "P_a2"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7888, 7784
                    hide_name = True
                ]

                tag From11 {
                    value = "P_a1"
                    scope = masked_subsystem
                    kind = sp
                    direction = out
                }
                [
                    position = 7888, 7736
                    hide_name = True
                ]

                tag Goto5 {
                    value = "P_SV"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 8400, 7848
                    hide_name = True
                ]

                junction Junction3 sp
                [
                    position = 7832, 8376
                ]

                junction Junction4 sp
                [
                    position = 8352, 7760
                ]

                junction Junction5 sp
                [
                    position = 8624, 8456
                ]

                junction Junction6 sp
                [
                    position = 8624, 8376
                ]

                junction Junction7 sp
                [
                    position = 8728, 8376
                ]

                junction Junction8 sp
                [
                    position = 8728, 8456
                ]

                junction Junction10 sp
                [
                    position = 8120, 8320
                ]

                junction Junction11 sp
                [
                    position = 8728, 7760
                ]

                connect From3 Gain36.in as Connection748
                connect Gain36.out Sum3.in as Connection749
                connect Gain30.out Sum3.in1 as Connection752
                connect Gain28.in w_m3 as Connection7
                connect Sum2.out Gain29.in as Connection207
                [
                    breakpoints = 7944, 8224
                ]
                connect From6 Gain31.in as Connection19
                connect From7 Sum4.in as Connection21
                connect Gain31.out Sum4.in1 as Connection22
                connect Sum4.out Gain32.in as Connection23
                connect Gain32.out Sum5.in1 as Connection24
                connect From8 Sum5.in as Connection742
                connect Sum5.out Gain33.in as Connection26
                connect Gain33.out Sum8.in1 as Connection27
                connect From9 Sum8.in as Connection28
                connect Sum8.out Gain34.in as Connection29
                connect Gain35.in From10 as Connection33
                connect Gain35.out Sum9.in1 as Connection743
                connect Sum9.in From11 as Connection744
                [
                    breakpoints = 8024, 7736; 7936, 7736
                ]
                connect Integrator10.out Goto4 as Connection222
                connect Gain34.out Integrator10.in as Connection223
                connect Sum9.out Integrator11.in as Connection226
                connect Sum3.out Goto1 as Connection788
                connect Gain28.out Junction3 as Connection799
                connect Junction3 Sum7.in1 as Connection800
                [
                    breakpoints = 7832, 8376; 7832, 8344
                ]
                connect "Exciter Activation.w_PU" Junction3 as Connection801
                connect Integrator11.out Junction4 as Connection821
                connect Junction4 Goto5 as Connection822
                [
                    breakpoints = 8352, 7760
                ]
                connect From13 Junction5 as Connection824
                connect Junction5 Integrator12.in as Connection825
                connect P_b2.in Junction5 as Connection826
                connect From5 Junction6 as Connection827
                connect Junction6 Integrator9.in as Connection828
                connect P_a2.in Junction6 as Connection829
                connect Integrator9.out Junction7 as Connection830
                connect Junction7 Goto2 as Connection831
                connect P_a1.in Junction7 as Connection832
                connect Integrator12.out Junction8 as Connection833
                connect Junction8 Goto6 as Connection834
                connect P_b1.in Junction8 as Connection835
                connect "AGC offset.out" Sum11.in as Connection846
                connect From1 Sum2.in1 as Connection849
                connect w_ref Sum7.in as Connection853
                connect Gain30.in Sum10.out as Connection856
                connect Gain29.out Sum10.in as Connection857
                connect AGC.out Sum11.in1 as Connection858
                connect Sum11.out Gain37.in as Connection859
                connect Gain37.out Sum2.in as Connection860
                connect "Exciter Activation.exciter state" "exciter state" as Connection861
                connect Sum10.in1 Junction10 as Connection867
                connect Junction10 frequency_diff.in as Connection868
                [
                    breakpoints = 8120, 8320
                ]
                connect "Rate Limiter2.out" Junction10 as Connection869
                connect "Rate Limiter2.in" "Rate Transition1.out" as Connection870
                connect "Rate Transition1.in" Sum7.out as Connection871
                connect P_sv.in Junction11 as Connection873
                connect Junction11 Junction4 as Connection874
                [
                    breakpoints = 8728, 7760
                ]
                connect P_SV Junction11 as Connection875

                Ts = "Ts*4"
>>>>>>> Stashed changes

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">DEGOV1 model</p></body></html>"

<<<<<<< Updated upstream
=======
                    Ts {
                        label = "Execution rate"
                        widget = edit
                        type = generic
                        default_value = "0"
                    }

>>>>>>> Stashed changes
                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE

                    CODE define_icon
                        mdl.disp_component_icon_text(item_handle, "DEGOV1")
                    ENDCODE
<<<<<<< Updated upstream
                }
            }
            [
                position = 6760, 7840
=======

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 6760, 7648
>>>>>>> Stashed changes
                size = 144, 136
            ]

            port ground {
                position = bottom:auto
                kind = pe
            }
            [
                position = 8680, 8512
                scale = -1, 1
            ]

            port V_aG {
                position = top:1
                kind = pe
            }
            [
                position = 8680, 8184
                scale = -1, 1
            ]

            port V_bG {
                position = top:2
                kind = pe
            }
            [
                position = 8680, 8280
                scale = -1, 1
            ]

            port V_cG {
                position = top:3
                kind = pe
            }
            [
                position = 8680, 8376
                scale = -1, 1
            ]

            port "MCB Control" {
                position = left:auto
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                    readonly = True
                }
            }
            [
                position = 8176, 8104
            ]

            tag MT_ON1 {
                value = "MT_sync"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6416, 8072
                hide_name = True
            ]

            tag MT_ON2 {
                value = "MT_sync"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6440, 8296
                hide_name = True
            ]

            tag V_d_a3 {
                value = "VbG"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 8272, 8328
                hide_name = True
                scale = -1, 1
            ]

            tag V_q_a3 {
                value = "VaG"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 8336, 8232
                hide_name = True
                scale = -1, 1
            ]

            tag V_q_a4 {
                value = "VcG"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 8208, 8440
                hide_name = True
                scale = -1, 1
            ]

            tag Connect2 {
                value = "Connected"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6336, 8216
                rotation = left
                hide_name = True
                size = 58, 20
            ]

            tag theta_bus5 {
                value = "w_sync"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6416, 8000
                hide_name = True
            ]

            tag From1 {
                value = "|V|_sync"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6440, 8232
                hide_name = True
            ]

            tag Ea_G {
                value = "Ea1"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 7440, 8424
            ]

            tag Eb_G {
                value = "Eb1"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 7704, 8432
            ]

            tag Ec_G {
                value = "Ec1"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 7920, 8432
            ]

            tag w_e1 {
                value = "w_e"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 7224, 8024
                rotation = down
                hide_name = True
                scale = -1, 1
            ]

            tag w_m2 {
                value = "w_e"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6560, 8096
                hide_name = True
            ]

            tag "|V|2" {
                value = "|E|"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6608, 8328
                hide_name = True
            ]

            tag w_e2 {
                value = "exc_state"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 6792, 8160
                rotation = down
                hide_name = True
                scale = -1, 1
            ]

            junction Junction201 pe
            [
                position = 8376, 8512
            ]

            junction Junction202 pe
            [
                position = 8440, 8512
            ]

            junction Junction76 sp
            [
                position = 6656, 8328
            ]

            junction Junction203 pe
            [
                position = 8312, 8512
            ]

            junction Junction205 pe
            [
                position = 7368, 8512
            ]

            junction Junction206 pe
            [
                position = 7616, 8512
            ]

            junction Junction207 pe
            [
                position = 7848, 8512
            ]

            junction Junction211 sp
            [
                position = 6744, 8160
            ]

            junction Junction213 pe
            [
                position = 7848, 8368
            ]

            junction Junction214 pe
            [
                position = 7616, 8280
            ]

            junction Junction215 pe
            [
                position = 7368, 8192
            ]

<<<<<<< Updated upstream
            junction Junction212 pe
=======
            junction Junction216 pe
            [
                position = 8440, 8184
            ]

            junction Junction217 pe
            [
                position = 8376, 8280
            ]

            junction Junction218 pe
            [
                position = 8312, 8376
            ]

            junction Junction219 pe
>>>>>>> Stashed changes
            [
                position = 8544, 8512
            ]

            junction Junction220 sp
            [
                position = 6336, 8144
            ]

            junction Junction221 sp
            [
                position = 7168, 8072
            ]

            connect Constant1.out "Signal switch2.in" as Connection360
            connect Constant2.out "Signal switch1.in" as Connection362
            connect MT_ON2 "Signal switch2.in2" as Connection366
            connect V_q_a3 Va_G1.out as Connection720
            connect V_d_a3 Vb_G1.out as Connection721
            connect V_q_a4 Vc_G1.out as Connection806
            connect "Connect MT.out" CB_control.Close_GCB as Connection1050
            connect "Connect MCB.out" CB_control.Close_MCB as Connection1051
            connect "MCB Control" CB_control.MCB_control as Connection1052
            connect theta_bus5 "Signal switch1.in1" as Connection1234
            connect From1 "Signal switch2.in1" as Connection1235
            connect S4.ctrl_in CB_control.CB_status as Connection1475
            connect MT_ON1 "Signal switch1.in2" as Connection1653
            connect Ea_G Ea1.out as Connection295
            connect Eb_G Eb1.out as Connection296
            connect Ec_G Ec1.out as Connection297
            connect Vb_G1.n_node Junction201 as Connection1719
            connect Junction202 Junction201 as Connection1721
            connect Va_G1.n_node Junction202 as Connection1722
<<<<<<< Updated upstream
            connect Engine.T_M2 "Synchronous Machine.Torque" as Connection1415
            connect "|V|.in" Gain17.out as Connection1416
            connect Gain1.out w_e1 as Connection1418
            connect V_F.n_node "Synchronous Machine.- E_F" as Connection1419
            connect "Synchronous Machine.Speed (rpm)" Junction78 as Connection1421
            connect Junction78 Gain1.in as Connection1422
            connect w_M.in Junction78 as Connection1423
            connect Gain18.in w_m2 as Connection1426
            connect wref.out "|V|4.in" as Connection1327
=======
            connect "|V|.in" Gain17.out as Connection1416
            connect Gain1.out w_e1 as Connection1418
            connect V_F.n_node "Synchonous Machine.- E_F" as Connection1419
            connect Governor.w_m3 Gain18.out as Connection1425
            connect Gain18.in w_m2 as Connection1426
            connect Engine.P_SV Governor.P_SV as Connection742
            connect Governor.w_ref w.out as Connection744
            connect wref.out w.in as Connection1327
>>>>>>> Stashed changes
            connect "|V|3.out" Exciter.E_ref as Connection532
            connect "|V|2" Junction76 as Connection781
            connect Junction76 "Exciter.|E|" as Connection782
            connect Gain17.in Junction76 as Connection784
            connect Vref.out "|V|3.in" as Connection1329
            connect Exciter.V_F V_F.in as Connection1388
            connect V_F.p_node "Synchronous Machine.+ E_F" as Connection1410
            connect "Signal switch2.out" "|V|3.in1" as Connection1774
            connect "Signal switch1.out" w.in1 as Connection1775
            connect Junction201 Junction203 as Connection1781
            [
                breakpoints = 8376, 8512
            ]
            connect Junction203 Vc_G1.n_node as Connection1782
            [
                breakpoints = 8312, 8512
            ]
<<<<<<< Updated upstream
            connect "Synchronous Machine.Ea" Junction204 as Connection1787
            connect Junction204 RL.P2 as Connection1788
            [
                breakpoints = 7368, 8192; 7880, 8192
            ]
            connect Ea1.p_node Junction204 as Connection1789
            connect "Synchronous Machine.ground" Junction205 as Connection1790
=======
            connect "Synchonous Machine.ground" Junction205 as Connection1790
>>>>>>> Stashed changes
            connect Ea1.n_node Junction205 as Connection1792
            connect Junction205 Junction206 as Connection1793
            connect Eb1.n_node Junction206 as Connection1795
            connect Junction206 Junction207 as Connection1796
            connect Junction207 Junction203 as Connection1797
            connect Ec1.n_node Junction207 as Connection1798
<<<<<<< Updated upstream
            connect "Synchronous Machine.Ec" Junction208 as Connection1799
            connect Junction208 RL.P6 as Connection1800
=======
            connect Exciter.exc_state Junction211 as Connection1817
            connect Junction211 "Governor.exciter state" as Connection1818
            connect w_e2 Junction211 as Connection1819
            connect Ec1.p_node Junction213 as Connection1832
            connect Junction213 "Synchonous Machine.Ec" as Connection1833
>>>>>>> Stashed changes
            [
                breakpoints = 7848, 8368
            ]
<<<<<<< Updated upstream
            connect Ec1.p_node Junction208 as Connection1801
            connect "Synchronous Machine.Eb" Junction209 as Connection1810
            connect Junction209 Eb1.p_node as Connection1811
=======
            connect S4.c_in Junction213 as Connection1834
>>>>>>> Stashed changes
            [
                breakpoints = 8176, 8368; 7848, 8368
            ]
            connect Eb1.p_node Junction214 as Connection1835
            connect Junction214 "Synchonous Machine.Eb" as Connection1836
            [
                breakpoints = 7616, 8280; 7616, 8280; 7616, 8280
            ]
<<<<<<< Updated upstream
            connect V_cG "Three-phase Meter1.C-" as Connection1820
            connect "Three-phase Meter1.C+" Junction176 as Connection1821
            connect Junction175 "Three-phase Meter1.A+" as Connection1822
            connect "Three-phase Meter1.A-" V_aG as Connection1823
            connect Junction174 "Three-phase Meter1.B+" as Connection1824
            connect "Three-phase Meter1.B-" V_bG as Connection1825
            connect ground Junction212 as Connection1826
            connect Junction212 Junction202 as Connection1827
            connect "Three-phase Meter1.GND" Junction212 as Connection1828
            connect w_e2 Exciter.exc_state as Connection1829
            [
                breakpoints = 6792, 8160; 6744, 8160
            ]
            connect "|V|4.out" GovernorX.w_ref as Connection1830
            connect GovernorX.w_m3 Gain18.out as Connection1831
            connect GovernorX.P_SV Engine.P_SV as Connection1832
=======
            connect S4.b_in Junction214 as Connection1837
            connect "Synchonous Machine.Ea" Junction215 as Connection1838
            connect Junction215 Ea1.p_node as Connection1839
            [
                breakpoints = 7368, 8192
            ]
            connect S4.a_in Junction215 as Connection1840
            [
                breakpoints = 8176, 8192; 7368, 8192
            ]
            connect S4.a_out Junction216 as Connection1845
            connect Junction216 Va_G1.p_node as Connection1846
            [
                breakpoints = 8440, 8184
            ]
            connect "Three-phase Meter1.A+" Junction216 as Connection1847
            connect S4.b_out Junction217 as Connection1848
            connect Junction217 Vb_G1.p_node as Connection1849
            [
                breakpoints = 8376, 8280
            ]
            connect "Three-phase Meter1.B+" Junction217 as Connection1850
            connect S4.c_out Junction218 as Connection1851
            connect Junction218 Vc_G1.p_node as Connection1852
            [
                breakpoints = 8312, 8376; 8312, 8376
            ]
            connect "Three-phase Meter1.C+" Junction218 as Connection1853
            connect Junction202 Junction219 as Connection1854
            [
                breakpoints = 8440, 8512
            ]
            connect Junction219 ground as Connection1855
            [
                breakpoints = 8544, 8512
            ]
            connect "Three-phase Meter1.GND" Junction219 as Connection1856
            connect "Three-phase Meter1.C-" V_cG as Connection1857
            connect V_bG "Three-phase Meter1.B-" as Connection1858
            connect "Three-phase Meter1.A-" V_aG as Connection1859
            connect "|V|3.in2" Junction220 as Connection1870
            connect Junction220 Connect2 as Connection1871
            [
                breakpoints = 6336, 8144
            ]
            connect w.in2 Junction220 as Connection1872
            [
                breakpoints = 6624, 7936; 6336, 7936
            ]
            connect Engine.T_M2 "Synchonous Machine.Torque" as Connection1873
            connect w_M.in Junction221 as Connection1875
            connect Junction221 "Synchonous Machine.Speed (rpm)" as Connection1876
            connect Gain1.in Junction221 as Connection1877

            Ts_sys = "Ts"
>>>>>>> Stashed changes

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A salient-pole synchronous machine with DEGOV1 governor and IEEE type DC1A exciter, powered by a diesel genset</p></body></html>"

                S {
                    label = "Rated Power (system)"
                    widget = edit
                    type = generic
                    default_value = "3.5e+6"
                    unit = "VA"
                    group = "1. Synchronous Machine"
                }

                V_ABC {
                    label = "Rated RMS Voltage (genset)"
                    widget = edit
                    type = generic
                    default_value = "13800/np.sqrt(3)"
                    unit = "V"
                    group = "1. Synchronous Machine"
                }

                w_0 {
                    label = "Nominal Frequency"
                    widget = edit
                    type = generic
                    default_value = "2*np.pi*60"
                    unit = "rad/s"
                    group = "1. Synchronous Machine"
                }

                pms {
                    label = "Pole-pairs"
                    widget = edit
                    type = generic
                    default_value = "2"
                    group = "1. Synchronous Machine"
                }

                Jm {
                    label = "Moment of Inertia"
                    widget = edit
                    type = generic
                    default_value = "68.32425"
                    unit = "kg.m^2"
                    group = "1. Synchronous Machine"
                }

                Fc {
                    label = "Friction Coefficient"
                    widget = edit
                    type = generic
                    default_value = "0.5720"
                    unit = "N.m.s"
                    group = "1. Synchronous Machine"
                }

                Ts {
                    label = "Execution rate (machine)"
                    widget = edit
                    type = generic
                    default_value = "Ts_gen"
                    unit = "s"
                    group = "1. Synchronous Machine"
                }

                Ts_sys {
                    label = "Execution rate (system)"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "s"
                    group = "1. Synchronous Machine"
                }

                R_g {
                    label = "Resistance"
                    widget = edit
                    type = generic
                    default_value = "0.35"
                    unit = "Ω/mile"
                    group = "2. Electrical Line"
                }

                L_g {
                    label = "Inductance"
                    widget = edit
                    type = generic
                    default_value = "5.5e-4"
                    unit = "H/mile"
                    group = "2. Electrical Line"
                }

                line_len {
                    label = "Length"
                    widget = edit
                    type = generic
                    default_value = "1"
                    unit = "miles"
                    group = "2. Electrical Line"
                }

                Rs {
                    label = "Armature Resistance"
                    widget = edit
                    type = generic
                    default_value = "0.4886"
                    unit = "Ω"
                    group = "3. Windings"
                }

                Lls {
                    label = "Armature Leakage Inductance"
                    widget = edit
                    type = generic
                    default_value = "0.0072"
                    unit = "H"
                    group = "3. Windings"
                }

                Rf {
                    label = "Field Resistance"
                    widget = edit
                    type = generic
                    default_value = "0.1121"
                    unit = "Ω"
                    group = "3. Windings"
                }

                Llfd {
                    label = "Field Leakage Inductance"
                    widget = edit
                    type = generic
                    default_value = "0.0738"
                    unit = "H"
                    group = "3. Windings"
                }

                Rkq {
                    label = "Damper q Resistance"
                    widget = edit
                    type = generic
                    default_value = "1.3848"
                    unit = "Ω"
                    group = "3. Windings"
                }

                Llkq {
                    label = "Damper q Leakage Inductance"
                    widget = edit
                    type = generic
                    default_value = "0.0345"
                    unit = "H"
                    group = "3. Windings"
                }

                Rkd {
                    label = "Damper d Resistance"
                    widget = edit
                    type = generic
                    default_value = "15.3767"
                    unit = "Ω"
                    group = "3. Windings"
                }

                Llkd {
                    label = "Damper d Leakage Inductance"
                    widget = edit
                    type = generic
                    default_value = "0.5395"
                    unit = "H"
                    group = "3. Windings"
                }

                Lmq {
                    label = "q Mutual Inductance"
                    widget = edit
                    type = generic
                    default_value = "0.2482"
                    unit = "H"
                    group = "3. Windings"
                }

                Lmd {
                    label = "d Mutual Inductance"
                    widget = edit
                    type = generic
                    default_value = "0.3392"
                    unit = "H"
                    group = "3. Windings"
                }

                EM_delay {
                    label = "dλ/dt delay"
                    widget = edit
                    type = generic
                    default_value = "Ts*5"
                    group = "3. Windings"
                }

                gov_Kp {
                    label = "Governor gain (gov_Kp)"
                    widget = edit
                    type = generic
                    default_value = "0.75"
                    group = "4. Governor and Engine"
                }

                K {
                    label = "Governor gain (K)"
                    widget = edit
                    type = generic
                    default_value = "10"
                    group = "4. Governor and Engine"
                }

                R_D {
                    label = "Governor Droop"
                    widget = edit
                    type = generic
                    default_value = "0.1"
                    group = "4. Governor and Engine"
                }

                T_CH {
                    label = "Engine time constant"
                    widget = edit
                    type = generic
                    default_value = "24e-3"
                    unit = "s"
                    group = "4. Governor and Engine"
                }

                T1 {
                    label = "Time constant 1"
                    widget = edit
                    type = generic
                    default_value = "1e-4"
                    unit = "s"
                    group = "4. Governor and Engine"
                }

                T2 {
                    label = "Time constant 2"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "s"
                    group = "4. Governor and Engine"
                }

                T3 {
                    label = "Time constant 3"
                    widget = edit
                    type = generic
                    default_value = "5e-1"
                    unit = "s"
                    group = "4. Governor and Engine"
                }

                T4 {
                    label = "Time constant 4"
                    widget = edit
                    type = generic
                    default_value = "25e-3"
                    unit = "s"
                    group = "4. Governor and Engine"
                }

                T5 {
                    label = "Time constant 5"
                    widget = edit
                    type = generic
                    default_value = "9e-4"
                    unit = "s"
                    group = "4. Governor and Engine"
                }

                T6 {
                    label = "Time constant 6"
                    widget = edit
                    type = generic
                    default_value = "5.74e-3"
                    unit = "s"
                    group = "4. Governor and Engine"
                }

                K_A {
                    label = "Gain 1 (K_A)"
                    widget = edit
                    type = generic
                    default_value = "20"
                    group = "5. Exciter and Voltage Regulator"
                }

                K_E {
                    label = "Gain 2 (K_E)"
                    widget = edit
                    type = generic
                    default_value = "1"
                    group = "5. Exciter and Voltage Regulator"
                }

                K_F {
                    label = "Gain 3 (K_F)"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "5. Exciter and Voltage Regulator"
                }

                S_E {
                    label = "Gain 4 (S_E)"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "5. Exciter and Voltage Regulator"
                }

                V_R_max {
                    label = "Saturation upper limit"
                    widget = edit
                    type = generic
                    default_value = "5"
                    group = "5. Exciter and Voltage Regulator"
                }

                V_R_min {
                    label = "Saturation lower limit"
                    widget = edit
                    type = generic
                    default_value = "-5"
                    group = "5. Exciter and Voltage Regulator"
                }

                T_A {
                    label = "Time constant 1 (T_A)"
                    widget = edit
                    type = generic
                    default_value = "2e-3"
                    unit = "s"
                    group = "5. Exciter and Voltage Regulator"
                }

                T_E {
                    label = "Time constant 2 (T_E)"
                    widget = edit
                    type = generic
                    default_value = "1e-3"
                    unit = "s"
                    group = "5. Exciter and Voltage Regulator"
                }

                T_F {
                    label = "Time constant 3 (T_F)"
                    widget = edit
                    type = generic
                    default_value = "1e-3"
                    unit = "s"
                    group = "5. Exciter and Voltage Regulator"
                }

                T_R {
                    label = "Time constant 4 (T_R)"
                    widget = edit
                    type = generic
                    default_value = "1e-3"
                    unit = "s"
                    group = "5. Exciter and Voltage Regulator"
                }

                inner_w_rise {
                    label = "Governor (inner_w_rise)"
                    widget = edit
                    type = generic
                    default_value = "5"
                    unit = "pu/s"
                    group = "4. Governor and Engine"
                }

                inner_w_fall {
                    label = "Governor (inner_w_fall)"
                    widget = edit
                    type = generic
                    default_value = "-5"
                    unit = "pu/s"
                    group = "4. Governor and Engine"
                }

                V_rise {
                    label = "Exciter (V_rise)"
                    widget = edit
                    type = generic
                    default_value = "5"
                    unit = "pu/s"
                    group = "5. Exciter and Voltage Regulator"
                }

                V_fall {
                    label = "Exciter (V_fall)"
                    widget = edit
                    type = generic
                    default_value = "-5"
                    unit = "pu/s"
                    group = "5. Exciter and Voltage Regulator"
                }

                exc_Kp {
                    label = "Exciter proportional gain"
                    widget = edit
                    type = generic
                    default_value = "1.16"
                    group = "5. Exciter and Voltage Regulator"
                }

                exc_Ki {
                    label = "Exciter integral gain"
                    widget = edit
                    type = generic
                    default_value = "1.19"
                    group = "5. Exciter and Voltage Regulator"
                }

                E_F_max {
                    label = "Field voltage upper limit"
                    widget = edit
                    type = generic
                    default_value = "3"
                    group = "5. Exciter and Voltage Regulator"
                }

                E_F_min {
                    label = "Field voltage lower limit"
                    widget = edit
                    type = generic
                    default_value = "-3"
                    group = "5. Exciter and Voltage Regulator"
                }

                maxV_slip {
                    label = "Maximum slip (voltage)"
                    widget = edit
                    type = generic
                    default_value = "2e-3"
                    unit = "pu"
                    group = "6. Automatic Synchronizer"
                }

                minV_slip {
                    label = "Minimum slip (voltage)"
                    widget = edit
                    type = generic
                    default_value = "1e-3"
                    unit = "pu"
                    group = "6. Automatic Synchronizer"
                }

                maxw_slip {
                    label = "Maximum slip (frequency)"
                    widget = edit
                    type = generic
                    default_value = "2e-3"
                    unit = "pu"
                    group = "6. Automatic Synchronizer"
                }

                minw_slip {
                    label = "Minimum slip (frequency)"
                    widget = edit
                    type = generic
                    default_value = "1e-3"
                    unit = "pu"
                    group = "6. Automatic Synchronizer"
                }

                maxV_pds {
                    label = "Maximum difference signal (voltage)"
                    widget = edit
                    type = generic
                    default_value = "5e-2"
                    unit = "pu"
                    group = "6. Automatic Synchronizer"
                }

                maxw_pds {
                    label = "Maximum difference signal (frequency)"
                    widget = edit
                    type = generic
                    default_value = "8e-2"
                    unit = "pu"
                    group = "6. Automatic Synchronizer"
                }

                Kp_PLL {
                    label = "Proportional gain"
                    widget = edit
                    type = generic
                    default_value = "5"
                    group = "7. Phase Locked Loop"
                }

                Ki_PLL {
                    label = "Integral gain"
                    widget = edit
                    type = generic
                    default_value = "2"
                    group = "7. Phase Locked Loop"
                }

                PLL_max {
                    label = "Saturation upper limit"
                    widget = edit
                    type = generic
                    default_value = "2*np.pi*63"
                    group = "7. Phase Locked Loop"
                }

                PLL_min {
                    label = "Saturation lower limit"
                    widget = edit
                    type = generic
                    default_value = "2*np.pi*57"
                    group = "7. Phase Locked Loop"
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                    
                ENDCODE

                CODE init
                    S = mdl.get_property_value(mdl.prop(item_handle, "S"))
                    V_ABC = mdl.get_property_value(mdl.prop(item_handle, "V_ABC"))
                    w_0 = mdl.get_property_value(mdl.prop(item_handle, "w_0"))
                    pms = mdl.get_property_value(mdl.prop(item_handle, "pms"))
                    Jm = mdl.get_property_value(mdl.prop(item_handle, "Jm"))
                    Fc = mdl.get_property_value(mdl.prop(item_handle, "Fc"))
                    Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    R_g = mdl.get_property_value(mdl.prop(item_handle, "R_g"))
                    L_g = mdl.get_property_value(mdl.prop(item_handle, "L_g"))
                    line_len = mdl.get_property_value(mdl.prop(item_handle, "line_len"))
                    Rs = mdl.get_property_value(mdl.prop(item_handle, "Rs"))
                    Lls = mdl.get_property_value(mdl.prop(item_handle, "Lls"))
                    Rf = mdl.get_property_value(mdl.prop(item_handle, "Rf"))
                    Llfd = mdl.get_property_value(mdl.prop(item_handle, "Llfd"))
                    Rkq = mdl.get_property_value(mdl.prop(item_handle, "Rkq"))
                    Llkq = mdl.get_property_value(mdl.prop(item_handle, "Llkq"))
                    Rkd = mdl.get_property_value(mdl.prop(item_handle, "Rkd"))
                    Llkd = mdl.get_property_value(mdl.prop(item_handle, "Llkd"))
                    Lmq = mdl.get_property_value(mdl.prop(item_handle, "Lmq"))
                    Lmd = mdl.get_property_value(mdl.prop(item_handle, "Lmd"))
                    EM_delay = mdl.get_property_value(mdl.prop(item_handle, "EM_delay"))
                    gov_Kp = mdl.get_property_value(mdl.prop(item_handle, "gov_Kp"))
                    K = mdl.get_property_value(mdl.prop(item_handle, "K"))
                    R_D = mdl.get_property_value(mdl.prop(item_handle, "R_D"))
                    T_CH = mdl.get_property_value(mdl.prop(item_handle, "T_CH"))
                    T1 = mdl.get_property_value(mdl.prop(item_handle, "T1"))
                    T2 = mdl.get_property_value(mdl.prop(item_handle, "T2"))
                    T3 = mdl.get_property_value(mdl.prop(item_handle, "T3"))
                    T4 = mdl.get_property_value(mdl.prop(item_handle, "T4"))
                    T5 = mdl.get_property_value(mdl.prop(item_handle, "T5"))
                    T6 = mdl.get_property_value(mdl.prop(item_handle, "T6"))
                    K_A = mdl.get_property_value(mdl.prop(item_handle, "K_A"))
                    K_E = mdl.get_property_value(mdl.prop(item_handle, "K_E"))
                    K_F = mdl.get_property_value(mdl.prop(item_handle, "K_F"))
                    S_E = mdl.get_property_value(mdl.prop(item_handle, "S_E"))
                    V_R_max = mdl.get_property_value(mdl.prop(item_handle, "V_R_max"))
                    V_R_min = mdl.get_property_value(mdl.prop(item_handle, "V_R_min"))
                    T_A = mdl.get_property_value(mdl.prop(item_handle, "T_A"))
                    T_E = mdl.get_property_value(mdl.prop(item_handle, "T_E"))
                    T_F = mdl.get_property_value(mdl.prop(item_handle, "T_F"))
                    T_R = mdl.get_property_value(mdl.prop(item_handle, "T_R"))
                    inner_w_rise = mdl.get_property_value(mdl.prop(item_handle, "inner_w_rise"))
                    inner_w_fall = mdl.get_property_value(mdl.prop(item_handle, "inner_w_fall"))
                    V_rise = mdl.get_property_value(mdl.prop(item_handle, "V_rise"))
                    V_fall = mdl.get_property_value(mdl.prop(item_handle, "V_fall"))
                    exc_Kp = mdl.get_property_value(mdl.prop(item_handle, "exc_Kp"))
                    exc_Ki = mdl.get_property_value(mdl.prop(item_handle, "exc_Ki"))
                    E_F_max = mdl.get_property_value(mdl.prop(item_handle, "E_F_max"))
                    E_F_min = mdl.get_property_value(mdl.prop(item_handle, "E_F_min"))
                    maxV_slip = mdl.get_property_value(mdl.prop(item_handle, "maxV_slip"))
                    minV_slip = mdl.get_property_value(mdl.prop(item_handle, "minV_slip"))
                    maxw_slip = mdl.get_property_value(mdl.prop(item_handle, "maxw_slip"))
                    minw_slip = mdl.get_property_value(mdl.prop(item_handle, "minw_slip"))
                    maxV_pds = mdl.get_property_value(mdl.prop(item_handle, "maxV_pds"))
                    maxw_pds = mdl.get_property_value(mdl.prop(item_handle, "maxw_pds"))
                    Kp_PLL = mdl.get_property_value(mdl.prop(item_handle, "Kp_PLL"))
                    Ki_PLL = mdl.get_property_value(mdl.prop(item_handle, "Ki_PLL"))
                    PLL_max = mdl.get_property_value(mdl.prop(item_handle, "PLL_max"))
                    PLL_min = mdl.get_property_value(mdl.prop(item_handle, "PLL_min"))
                    
                    w_m = w_0/pms
                    
                    V_DQ = V_ABC*np.sqrt(2)
                    T_nom = S/w_m
                    TM_DQ = T_nom
                    I_DQ = (2*S)/(3*V_DQ)
                    Z_DQ = V_DQ/I_DQ
                    L_DQ = Z_DQ/w_0
                    sq_Z = (R_g/Z_DQ)**2+(L_g/L_DQ)**2
                    
                    X_q = w_0*(Lls+Lmq)/Z_DQ
                    X_d = w_0*(Lls+Lmd)/Z_DQ
                    X_ls = w_0*Lls/Z_DQ
                    X_lfd = w_0*Llfd/Z_DQ
                    X_lkd = w_0*Llkd/Z_DQ
                    X_lkq = w_0*Llkq/Z_DQ
                    X_md = w_0*Lmd/Z_DQ
                    X_mq = w_0*Lmq/Z_DQ
                    X_fd = w_0*(Llfd+Lmd)/Z_DQ
                    X_kd = w_0*(Llkd+Lmd)/Z_DQ
                    X_kq = w_0*(Llkq+Lmq)/Z_DQ
                    R_fd = Rf/Z_DQ
                    R_kd = Rkd/Z_DQ
                    R_kq = Rkq/Z_DQ
                    R_s = Rs/Z_DQ
                    
                    L_DQ = Z_DQ/w_0
                    C_DQ = 1/(Z_DQ*w_0)
                    
                    R_G = R_g/Z_DQ
                    X_G = L_g/L_DQ
                    
                    H = 0.5*Jm*(w_0*(2/pms))**2/S
                    D_FW = Fc*(w_m/T_nom)
                    
                    X_dp = X_d - (X_md**2/X_fd)
                    X_qp = X_q
                    T_dop = X_fd/(w_0*R_fd)
                    T_qop = 0
                    
                    X_dpp = X_ls + (X_md*(X_lkd*X_lfd/(X_lkd+X_lfd)))/(X_md+(X_lkd*X_lfd/(X_lkd+X_lfd)))
                    X_qpp = X_ls + (X_mq*X_lkq/(X_mq+X_lkq))
                    T_dopp = (1/(w_0*R_kd))*(X_lkd+(X_md*X_lfd/(X_md+X_lfd)))
                    T_qopp = (1/(w_0*R_kq))*X_kq
                ENDCODE

                CODE define_icon
                    mdl.set_component_icon_image(item_handle, 'diesel_genset_image.jpg')
                    mdl.set_color(item_handle, "black")
                ENDCODE
            }
        }
        [
            position = 6600, 8120
            size = 200, 96
        ]

        component sys_hil_marker "Device Marker1" {
            hw_configuration_id = "2"
            override_hw_settings = "True"
        }
        [
            position = 6624, 7896
        ]

        tag V_d_a {
            value = "VbG"
            scope = masked_subsystem
            kind = sp
            direction = out
        }
        [
            position = 7776, 8112
            hide_name = True
            scale = -1, 1
        ]

        tag V_q_a {
            value = "VaG"
            scope = masked_subsystem
            kind = sp
            direction = out
        }
        [
            position = 7880, 8064
            hide_name = True
            scale = -1, 1
        ]

        tag V_d_a2 {
            value = "VcG"
            scope = masked_subsystem
            kind = sp
            direction = out
        }
        [
            position = 7672, 8160
            hide_name = True
            scale = -1, 1
        ]

        tag V_d_a1 {
            value = "VbG"
            scope = masked_subsystem
            kind = sp
            direction = in
        }
        [
            position = 7512, 8112
            hide_name = True
        ]

        tag V_q_a1 {
            value = "VaG"
            scope = masked_subsystem
            kind = sp
            direction = in
        }
        [
            position = 7512, 8064
            hide_name = True
        ]

        tag V_q_a2 {
            value = "VcG"
            scope = masked_subsystem
            kind = sp
            direction = in
        }
        [
            position = 7512, 8160
            hide_name = True
        ]

        junction Junction61 pe
        [
            position = 7816, 8296
        ]

        junction Junction63 pe
        [
            position = 7608, 8296
        ]

        junction Junction64 pe
        [
            position = 7712, 8296
        ]

        junction Junction112 sp
        [
            position = 6976, 7792
        ]

        junction Junction121 pe
        [
            position = 7816, 7920
        ]

        junction Junction122 pe
        [
            position = 7816, 8296
        ]

        junction Junction130 sp
        [
            position = 6976, 7792
        ]

        junction Junction131 pe
        [
            position = 6800, 7960
        ]

        junction Junction132 pe
        [
            position = 6832, 7976
        ]

        junction Junction133 pe
        [
            position = 6864, 7992
        ]

        junction Junction134 pe
        [
            position = 6832, 8296
        ]

        junction Junction135 pe
        [
            position = 6624, 7960
        ]

        connect V_q_a Va_G.in as Connection312
        connect V_d_a Vb_G.in as Connection313
        connect V_d_a2 Vc_G.in as Connection314
        connect RL.P3 Vb_G.p_node as Connection509
        connect RL.P5 Vc_G.p_node as Connection538
        [
            breakpoints = 7544, 8000; 7544, 8032; 7608, 8032
        ]
        connect V_q_a1 Gain3.out as Connection315
        connect "Sinusoidal Source1.out" Gain3.in as Connection328
        connect Gain4.in "Sinusoidal Source3.out" as Connection789
        connect "Sinusoidal Source2.out" Gain5.in as Connection790
        connect Gain5.out V_d_a1 as Connection791
        connect Gain4.out V_q_a2 as Connection792
        connect Va_G.n_node Junction61 as Connection818
        connect gnd1.node Junction61 as Connection820
        connect Vc_G.n_node Junction63 as Connection826
        connect Junction64 Junction63 as Connection828
        connect Vb_G.n_node Junction64 as Connection829
        connect "Constant Impedance Load1.A" Ia1.n_node as Connection834
        connect "grid_connect ON.in" Junction112 as Connection989
        connect "Logical operator1.in" Junction112 as Connection991
        connect RL.P1 Junction121 as Connection1027
        [
            breakpoints = 7544, 7960; 7544, 7920
        ]
        connect Junction121 Va_G.p_node as Connection1028
        [
            breakpoints = 7816, 7920
        ]
        connect Va1.p_node Junction121 as Connection1029
        connect Junction61 Junction122 as Connection1030
        connect Junction122 Junction64 as Connection1031
        [
            breakpoints = 7744, 8296
        ]
        connect Va1.n_node Junction122 as Connection1032
        connect S4.b_out RL.P4 as Connection1090
        connect RL.P2 S4.a_out as Connection1091
        connect RL.P6 S4.c_out as Connection1092
        connect Junction112 Junction130 as Connection1102
        connect Junction130 grid_connect.out as Connection1103
        [
            breakpoints = 6976, 7792; 6976, 7792; 6976, 7792
        ]
        connect S4.ctrl_in Junction130 as Connection1104
        connect "Logical operator1.out" "grid_connect OFF.in" as Connection1109
        [
            breakpoints = 6976, 7880
        ]
        connect Ia1.p_node Junction131 as Connection1127
        connect Junction131 S4.a_in as Connection1128
        [
            breakpoints = 6800, 7960; 6800, 7960; 6800, 7960; 6800, 7960; 6800, 7960; 6800, 7960; 6800, 7960; 6800, 7960; 7040, 7960; 7120, 7960
        ]
        connect S4.b_in Junction132 as Connection1130
        connect Junction132 "Constant Impedance Load1.B" as Connection1131
        [
            breakpoints = 6832, 7976; 6832, 7976; 6832, 7976; 6832, 7976; 6832, 7976; 6832, 7976; 6832, 7976; 6832, 7976; 6832, 7976
        ]
        connect Microturbine.V_bG Junction132 as Connection1132
        connect S4.c_in Junction133 as Connection1133
        [
            breakpoints = 7120, 7992
        ]
        connect Junction133 "Constant Impedance Load1.C" as Connection1134
        [
            breakpoints = 6864, 7992; 6864, 7992; 6864, 7992
        ]
        connect Microturbine.V_cG Junction133 as Connection1135
        connect Junction63 Junction134 as Connection1136
        [
            breakpoints = 7608, 8296; 7608, 8296; 7608, 8296; 7608, 8296
        ]
        connect Junction134 "Constant Impedance Load1.N" as Connection1137
        [
            breakpoints = 6832, 8296; 6832, 8296; 6832, 8296; 6832, 8296; 6832, 8296
        ]
        connect Microturbine.ground Junction134 as Connection1138
        connect Termination1.in "Microturbine.MCB Control" as Connection1139
        connect Microturbine.V_aG Junction135 as Connection1140
        connect Junction135 Junction131 as Connection1141
        connect "Device Marker1.node" Junction135 as Connection1142
    }

    logically_deleted {
        "Microturbine.Synchronous Machine.V_qG2.Differentiator1"
        "Microturbine.Synchronous Machine.V_dG2.Differentiator1"
        "Microturbine.BE1-25A Synchronizer.BE1-25A Synchronizer (modified)"
<<<<<<< Updated upstream
        "Microturbine.Governor"
=======
        "Microturbine.GovernorX"
>>>>>>> Stashed changes
    }

    default {
        el_open {
            circuit_connector = "false"
            pesb_flag = "false"
            type = "none"
        }

        gen_PQ_transform {
            filter_order = "first order"
            filter_cutoff_Hz = "30"
            initial_filter_input = "0"
            initial_filter_output = "0"
            enable_inst_ports = "True"
            enable_zero_ports = "False"
            execution_rate = "inherit"
        }

        gen_abs {
            execution_rate = "inherit"
        }

        gen_bus_join {
            inputs = "2"
            execution_rate = "inherit"
        }

        gen_c_function {
            in_terminal_properties = "real in;"
            in_terminal_labels = ""
            out_terminal_properties = "real out;"
            out_terminal_labels = ""
            no_feed_inputs = ""
            no_feed_outputs = ""
            in_terminal_dimensions = ""
            in_terminal_dimensions_str = ""
            out_terminal_dimensions = ""
            out_terminal_dimensions_str = ""
            output_fnc = ""
            update_fnc = ""
            init_fnc = ""
            global_variables = ""
            parameters = ""
            execution_rate = "inherit"
        }

        gen_comparator {
            execution_rate = "inherit"
        }

        gen_differentiator {
            execution_rate = "inherit"
        }

        gen_digital_probe {
            override_signal_name = "False"
            signal_name = ""
            streaming_en = "False"
            addr = "0"
            streaming_er_idx = "0"
            execution_rate = "inherit"
        }

        gen_gain {
            gain = "1"
            multiplication = "Element-wise(K.*u)"
            execution_rate = "inherit"
        }

        gen_integrator {
            show_reset = "none"
            reset_type = "asynchronous"
            show_init_condition = "internal"
            init_value = "0"
            limit_output = "False"
            limit_upper = "inf"
            limit_lower = "-inf"
            show_state = "False"
            state_port_type = "inherit"
            execution_rate = "inherit"
        }

        gen_limiter {
            upper_limit = "[\'inf\']"
            lower_limit = "[\'-inf\']"
            execution_rate = "inherit"
        }

        gen_logic_op {
            operator = "AND"
            inputs = "2"
            execution_rate = "inherit"
        }

        gen_math_fnc {
            mathematical_fn = "exponential"
            execution_rate = "inherit"
        }

        gen_pid_controller {
            controller_type = "PID"
            kp = "1"
            kp_source = "internal"
            ki = "1"
            ki_source = "internal"
            kd = "0"
            kd_source = "internal"
            filt_coef = "100"
            int_init_value = "0"
            filt_init_value = "0"
            enb_output_limit_out = "False"
            upper_sat_lim = "1"
            lower_sat_lim = "-1"
            enb_anti_windup_out = "False"
            signal_out_type = "inherit"
            execution_rate = "inherit"
        }

        gen_probe {
            addr = "0"
            override_signal_name = "False"
            signal_name = ""
            signal_type = "generic"
            streaming_en = "False"
            streaming_er_idx = "0"
            execution_rate = "inherit"
        }

        gen_product {
            signs = "2"
            execution_rate = "inherit"
        }

        gen_rate_limiter {
            rising_limit = "1"
            falling_limit = "-1"
            execution_rate = "inherit"
        }

        gen_rel_op {
            relational_op = "=="
            execution_rate = "inherit"
        }

        gen_sum {
            signs = "2"
            execution_rate = "inherit"
        }

        gen_terminator {
            execution_rate = "inherit"
        }

        gen_trigonometric {
            trigonometric_fn = "sin"
            execution_rate = "inherit"
        }

        gen_z_domain_transfer {
            domain = "Z-domain"
            method = "Zero-order hold"
            b_coeff = "[1]"
            a_coeff = "[1,-1]"
            init_states = "0"
            signal_out_type = "inherit"
            execution_rate = "inherit"
        }

        pas_capacitor {
            capacitance = "1e-6"
            initial_voltage = "0"
            pole_shift_ignore = "False"
            visible = "True"
        }

        pas_resistor {
            resistance = "1"
        }

        src_constant {
            value = "1"
            signal_type = "real"
            execution_rate = "100e-6"
        }

        src_scada_input {
            addr = "0"
            format = "real"
            override_signal_name = "False"
            signal_name = ""
            signal_type = "real"
            min = "-1e6"
            max = "1e6"
            def_value = "0"
            unit = " "
            execution_rate = "100e-6"
        }

        src_sine {
            amplitude = "1"
            dc_offset = "0"
            frequency = "50"
            phase = "0"
            execution_rate = "100e-6"
        }

        sys_hil_marker {
            hil_device_id = "0"
            override_hw_settings = "False"
            hw_configuration_id = "1"
            override_sim_settings = "False"
            simulation_method = "exact"
            simulation_time_step = "auto"
            ss_calc_method = "systematic elimination"
            enb_pole_shift = "True"
            enb_gds_oversampling = "True"
            show_modes = "False"
            cpl_stb = "False"
            cpl_dynamics_analysis = "False"
            enb_dep_sw_detect = "False"
            override_user_sp_settings = "False"
            user_cpu_optimization = "high"
            code_section = "Internal Memory"
            data_section = "Internal Memory"
            override_sys_sp_settings = "False"
            sys_cpu_optimization = "high"
            sys_sp_rate_1 = "100e-6"
            sys_sp_rate_2 = "50e-3"
        }

        sys_signal_switch {
            criterion = "ctrl >= threshold"
            threshold = "0"
            execution_rate = "inherit"
        }

        tm_delay {
            init_value = "0"
            signal_out_type = "inherit"
            execution_rate = "inherit"
        }

        "core/Constant Impedance Load" {
            fn = "60"
            conn_type = "Y"
            enable_neutral = "False"
            set_balanced = "True"
            Vn_3ph = "480"
            Sn_3ph = "1.0e6"
            pf_mode_3ph = "Unit"
            pf_3ph = "0.9"
            VAn = "480/(3**0.5)"
            VAB = "480"
            SAn = "1.0e6/3"
            SAB = "1.0e6/3"
            pf_modeA = "Unit"
            pfA = "0.9"
            VBn = "480/(3**0.5)"
            VBC = "480"
            SBn = "1.0e6/3"
            SBC = "1.0e6/3"
            pf_modeB = "Unit"
            pfB = "0.9"
            VCn = "480/(3**0.5)"
            VCA = "480"
            SCn = "1.0e6/3"
            SCA = "1.0e6/3"
            pf_modeC = "Unit"
            pfC = "0.9"
        }

        "core/Current Measurement" {
            bw_limit = "False"
            frequency = "10e3"
            comparator_enable = "False"
            operator = "greater"
            threshold = "0"
            cmp_abs_value = "False"
            feed_forward = "false"
            sig_output = "False"
            execution_rate = "100e-6"
            addr = "0"
            nd_msr_estimation = "false"
            dev_cpl_msr = "false"
            host_device = "0"
            output_to_device = "0"
            dev_cpl_index = "0"
            dev_cpl_var_nb = "0"
            visible = "True"
            override_signal_name = "False"
            signal_name = ""
        }

        "core/Four Phase Core Coupling" {
            snb_type_i = "none"
            R1 = "100e3"
            C1 = "1e-06"
            C2 = "1e-06"
            fixed_snb_i = "false"
            snb_type_u = "none"
            R2 = "0.1"
            L1 = "0.1"
            L2 = "0.1"
            fixed_snb_u = "false"
            cpl_connection = "star"
        }

        "core/RL Section" {
            model_def = "R-L"
            unit_sys = "imperial"
            num_of_phases = "3"
            resistance_per_l = "1"
            resistance_per_l_mile = "1"
            inductance_per_l = "1e-3"
            inductance_per_l_mile = "1e-3"
            length = "1.0"
            length_mile = "1.0"
            power = "500.0"
            voltage = "11.0"
            frequency = "50.0"
            R_value = "21.55"
            L_value = "0.00842"
        }

        "core/Rate Transition" {
            init_value = "0.0"
            execution_rate = "100e-6"
        }

        "core/Signal Controlled Voltage Source" {
            execution_rate = "inherit"
        }

        "core/Single Phase Core Coupling" {
            snb_type_i = "none"
            R1 = "100000.0"
            C1 = "1e-06"
            C2 = "1e-06"
            fixed_snb_i = "false"
            snb_type_u = "none"
            R2 = "0.1"
            L1 = "0.1"
            L2 = "0.1"
            fixed_snb_u = "false"
        }

        "core/Triple Pole Single Throw Contactor" {
            ctrl_src = "Digital input"
            Sa = "1"
            Sa_logic = "active high"
            enable_fb_out = "False"
            fb_out_type = "real"
            execution_rate = "inherit"
            initial_state = "off"
            on_delay = "0"
            off_delay = "0"
        }

        "core/Voltage Measurement" {
            bw_limit = "False"
            frequency = "10e3"
            comparator_enable = "False"
            operator = "greater"
            threshold = "0"
            cmp_abs_value = "False"
            feed_forward = "false"
            sig_output = "False"
            execution_rate = "100e-6"
            addr = "0"
            nd_msr_estimation = "false"
            dev_cpl_msr = "false"
            host_device = "0"
            output_to_device = "0"
            dev_cpl_index = "0"
            dev_cpl_var_nb = "0"
            visible = "True"
            override_signal_name = "False"
            signal_name = ""
        }
    }

    CODE model_init
        # Numpy module is imported as 'np'
        # Scipy module is imported as 'sp'
        # The Schematic API is imported as 'mdl'
        # To get the model file path, use 'mdl.get_model_file_path()'
        # To print information to the console, use info()
        
        V_G = 13800
        Ts = 1e-3
        Ts_gen = 20e-6
    ENDCODE
}
