<ui_settings>
    <version>2.5</version>
    <model_locked>False</model_locked>
    <canvas_bg_color>#ffffff</canvas_bg_color>
    <initialization_code><![CDATA[None]]></initialization_code>
    <components>
        <component_data>
                <id>62324400ed6511e6954b4c34882a0abb</id>
                <name><![CDATA[Image component]]></name>
                <type>Image</type>
                <description><![CDATA[]]></description>
                <image><![CDATA[bansheeFeeder_3.png]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>24.0</x>
                    <y>48.0</y>
                    <width>3450</width>
                    <height>1150</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Transparent]]></background_type>
                    <is_background>True</is_background>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>1f50e4c0f30511e6b98edc4a3e45580c</id>
                <name><![CDATA[Image component]]></name>
                <type>Image</type>
                <description><![CDATA[]]></description>
                <image><![CDATA[electric-hazard.jpg]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>2936.0</x>
                    <y>384.0</y>
                    <width>80</width>
                    <height>72</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Transparent]]></background_type>
                    <is_background>False</is_background>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>1f504880f30511e6af80dc4a3e45580c</id>
                <name><![CDATA[ ]]></name>
                <type>MacroButton</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------
hil.set_contactor('3ph Fault 301.S1',swControl= True,swState= True)
hil.wait_sec(0.05)
hil.set_contactor('3ph Fault 301.S1',swControl= True,swState= False)

]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL Control Panel API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>2968.0</x>
                    <y>400.0</y>
                    <width>80</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4def5cfedf311e6ba0a4c34882a0abb</id>
                <name><![CDATA[ ]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[F3_PCC.S1_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>864.0</x>
                    <y>216.0</y>
                    <width>56</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d707ec8fedf511e6ba054c34882a0abb</id>
                <name><![CDATA[ ]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[F3_CB1.Brk.S1_fb]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>2176.0</x>
                    <y>432.0</y>
                    <width>56</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d983e90fedf511e6bb754c34882a0abb</id>
                <name><![CDATA[ ]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[F3_CB2.Brk.S1_fb]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>2344.0</x>
                    <y>432.0</y>
                    <width>56</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>dbe5cde1edf511e6bd5b4c34882a0abb</id>
                <name><![CDATA[ ]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[F3_CB3.Brk.S1_fb]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>2552.0</x>
                    <y>432.0</y>
                    <width>56</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>dfb1f10fedf511e6b3644c34882a0abb</id>
                <name><![CDATA[ ]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[F3_CB4.Brk.S1_fb]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>2832.0</x>
                    <y>432.0</y>
                    <width>56</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>e7ba8570edf511e693fd4c34882a0abb</id>
                <name><![CDATA[ ]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[F3_CB5.Brk.S1_fb]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1888.0</x>
                    <y>616.0</y>
                    <width>56</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>e9d54f1eedf511e68c594c34882a0abb</id>
                <name><![CDATA[ ]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[F3_CB6.Brk.S1_fb]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>2112.0</x>
                    <y>616.0</y>
                    <width>56</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>ee9bb0cfedf511e6ba074c34882a0abb</id>
                <name><![CDATA[ ]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[NG GENSET.NG_GCB_fb]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>2624.0</x>
                    <y>648.0</y>
                    <width>56</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f3366e9eedf511e6a0554c34882a0abb</id>
                <name><![CDATA[ ]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[F3_CB8.Brk.S1_fb]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>2168.0</x>
                    <y>952.0</y>
                    <width>56</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f50a4440edf511e6a5324c34882a0abb</id>
                <name><![CDATA[ ]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[F3_CB7.Brk.S1_fb]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>2392.0</x>
                    <y>1104.0</y>
                    <width>56</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f7fcf761edf511e68d804c34882a0abb</id>
                <name><![CDATA[ ]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[F3_CB9.Brk.S1_fb]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>2936.0</x>
                    <y>824.0</y>
                    <width>56</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>4f867840f14c11e69ae24c348851fa7b</id>
                <name><![CDATA[ ]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal('Vrms_grid')/1000

]]></code>
                <signal_name><![CDATA[Vrms_grid]]></signal_name>
                <unit><![CDATA[kV]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>560.0</x>
                    <y>160.0</y>
                    <width>128</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f4a26cc0f14d11e6b26c4c348851fa7b</id>
                <name><![CDATA[ ]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal('Vrms_bus305')/1000

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kV]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>2224.0</x>
                    <y>1056.0</y>
                    <width>112</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>283cb8b0f14e11e6b9ba4c348851fa7b</id>
                <name><![CDATA[ ]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal('Vrms_bus302')/1000

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kV]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1888.0</x>
                    <y>560.0</y>
                    <width>112</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>2ddc635ef14e11e694224c348851fa7b</id>
                <name><![CDATA[ ]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal('Vrms_bus306')/1000

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kV]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>2448.0</x>
                    <y>568.0</y>
                    <width>112</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>3df1f8f0f14e11e6aa694c348851fa7b</id>
                <name><![CDATA[ ]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal('Vrms_bus301')/1000

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kV]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>2792.0</x>
                    <y>368.0</y>
                    <width>112</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>531161cff14e11e69afa4c348851fa7b</id>
                <name><![CDATA[ ]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal('Vrms_bus307')/1000

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kV]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>2712.0</x>
                    <y>768.0</y>
                    <width>112</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>987f951ef14e11e6b01a4c348851fa7b</id>
                <name><![CDATA[ Feeder 2]]></name>
                <type>PhasorGraphDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

from math import atan, sqrt, pi
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ ['Phasor 1 name', Phasor 1 phase, Phasor 1 magnitude],
#                      ['Phasor X name', Phasor X phase, Phasor X magnitude] ]
P_ref = hil.read_analog_signal(name = 'F3_PCC.P')/1000.0
Q_ref = hil.read_analog_signal(name = 'F3_PCC.Q')/1000.0


if P_ref > 0:
    phase_P = atan(Q_ref/P_ref)
elif P_ref < 0 and Q_ref >= 0:
    phase_P = atan(Q_ref/P_ref)+pi
elif P_ref < 0 and Q_ref < 0:
    phase_P = atan(Q_ref/P_ref)-pi
elif P_ref == 0 and Q_ref >= 0:
    phase_P=pi/2
elif P_ref == 0 and Q_ref >= 0:
    phase_P=-pi/2
else:
    phase_P=0

magnitude_P = sqrt(P_ref**2+Q_ref**2)

displayValue = [['Complex power [kVA]', 180*phase_P/3.14,   magnitude_P ]]

]]></code>
                <signals><![CDATA[]]></signals>
                <updateRate>1000</updateRate>
                <background_color>#ffffff</background_color>
                <hierarchy_position>1</hierarchy_position>
                <phasors_data>
                    </phasors_data>
                <widget_settings>
                    <x>2424.0</x>
                    <y>112.0</y>
                    <width>328</width>
                    <height>304</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <range_max>6000.0</range_max>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>79059f51f15311e69c014c348851fa7b</id>
                <name><![CDATA[Motor rpm]]></name>
                <type>Gauge</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
import numpy as np

displayValue = hil.read_analog_signal('F3_Motor.IM_machine mechanical speed')*30/np.pi



]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>1000</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>2808.0</x>
                    <y>1016.0</y>
                    <width>248</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>2000.0</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>c90563c0f1bf11e6bebcdc4a3e45580c</id>
                <name><![CDATA[Motor 3]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'On':
    # do something when 'Case 1' is selected
    hil.set_contactor('F3_Motor.CB.S1',swControl= True,swState= True)
elif inputValue == 'Off':
    # do something when 'Case 2' is selected
    hil.set_contactor('F3_Motor.CB.S1',swControl= True,swState= False)

]]></on_use_code>
                <on_start_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'On':
    # do something when 'Case 1' is selected
    hil.set_contactor('F3_Motor.CB.S1',swControl= True,swState= True)
elif inputValue == 'Off':
    # do something when 'Case 2' is selected
    hil.set_contactor('F3_Motor.CB.S1',swControl= True,swState= False)

]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL Control Panel API
# HIL Control Panel API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Macro code]]></on_start_code_source>
                <inputValue><![CDATA[On]]></inputValue>
                <availableValues><![CDATA[['On', 'Off']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>2920.0</x>
                    <y>984.0</y>
                    <width>136</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d913d480f25b11e6b66adc4a3e45580c</id>
                <name><![CDATA[Feeder 3 PQ]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ [sigVal1,sigVal2,sigVal3], ["Signal 1 name","Signal 2 name","Signal 3 name"] ]
P = hil.read_analog_signal(name = 'F3_PCC.P')/1000.0
Q = hil.read_analog_signal(name = 'F3_PCC.Q')/1000.0
displayValue = [[P, Q], ["P [kW]", "Q [kvar]"]]


]]></code>
                <analog_signals><![CDATA[['P [kW]', 'Q [kvar]']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1728.0</x>
                    <y>80.0</y>
                    <width>496</width>
                    <height>184</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-3000.0</y_range_min>
                    <y_range_max>5000.0</y_range_max>
                    <time_window>60</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>ec25395ef26511e6b3dddc4a3e45580c</id>
                <name><![CDATA[Active Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name = 'F3_PCC.P')/1000.0

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1880.0</x>
                    <y>272.0</y>
                    <width>224</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>e23b9430f14d11e69dd84c348851fa7b</id>
                <name><![CDATA[ ]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal('Vrms_bus303')/1000

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kV]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1784.0</x>
                    <y>856.0</y>
                    <width>112</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>b1ee1366b66311ea8d38d89ef3221e8e</id>
                <name><![CDATA[ ]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal('Vrms_bus304')/1000

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kV]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>2008.0</x>
                    <y>896.0</y>
                    <width>112</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>14e0fae235ae11eb888d509a4c4e2fb4</id>
                <name><![CDATA[Woodward - Diesel Genset]]></name>
                <type>Group</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[['14e0fae335ae11eba784509a4c4e2fb4', '14e0fae935ae11eb92aa509a4c4e2fb4', '14e0faea35ae11ebaa4a509a4c4e2fb4', '14e0faeb35ae11eb8d16509a4c4e2fb4', '14e0faec35ae11eb8d6b509a4c4e2fb4', '14e1221335ae11eb83f9509a4c4e2fb4', '14e1221435ae11eb886a509a4c4e2fb4']]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>760.0</x>
                    <y>360.0</y>
                    <width>896</width>
                    <height>704</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>14e0fae335ae11eba784509a4c4e2fb4</id>
                <name><![CDATA[Startup Control]]></name>
                <type>Group</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[['14e0fae435ae11eb9ac9509a4c4e2fb4', '14e0fae535ae11eb9ba6509a4c4e2fb4', '14e0fae635ae11ebaa33509a4c4e2fb4', '14e0fae735ae11eba682509a4c4e2fb4', '14e0fae835ae11ebbf69509a4c4e2fb4']]]></components_ids>
                <hierarchy_position>2</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>240</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>14e0fae435ae11eb9ac9509a4c4e2fb4</id>
                <name><![CDATA[Connect]]></name>
                <type>Macro</type>
                <description><![CDATA[]]></description>
                <on_click_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.
# HIL API is imported as 'hil'
hil.set_scada_input_value('Microturbine.Connect MT', 1)]]></on_click_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
hil.set_scada_input_value('Microturbine.Connect MT', 0)]]></on_start_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.
# HIL API is imported as 'hil'

]]></on_timer_code>
                <run_each>250</run_each>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
]]></on_stop_code>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>56.0</x>
                    <y>88.0</y>
                    <width>120</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>14e0fae535ae11eb9ba6509a4c4e2fb4</id>
                <name><![CDATA[]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[Microturbine.CB_control.GCB ON]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>72.0</x>
                    <y>48.0</y>
                    <width>32</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>14e0fae635ae11ebaa33509a4c4e2fb4</id>
                <name><![CDATA[Disconnect]]></name>
                <type>Macro</type>
                <description><![CDATA[]]></description>
                <on_click_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.
# HIL API is imported as 'hil'
hil.set_scada_input_value('Microturbine.Connect MT', 0)]]></on_click_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
]]></on_start_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.
# HIL API is imported as 'hil'

]]></on_timer_code>
                <run_each>250</run_each>
                <on_stop_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
hil.set_scada_input_value('Microturbine.Connect MT', 0)]]></on_stop_code>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>56.0</x>
                    <y>120.0</y>
                    <width>120</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>14e0fae735ae11eba682509a4c4e2fb4</id>
                <name><![CDATA[]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[Microturbine.CB_control.GCB OFF]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>104.0</x>
                    <y>48.0</y>
                    <width>32</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>14e0fae835ae11ebbf69509a4c4e2fb4</id>
                <name><![CDATA[Genset mode]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'Islanded':
    # do something when 'Case 1' is selected
    hil.set_scada_input_value('Microturbine.CB_control.Grid_Islanded', 1)
    pass
elif inputValue == 'Grid-connected':
    # do something when 'Case 2' is selected
    hil.set_scada_input_value('Microturbine.CB_control.Grid_Islanded', 0)
    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 'Islanded'
]]></on_start_code>
                <on_stop_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 'Islanded'
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[Islanded]]></inputValue>
                <availableValues><![CDATA[['Islanded', 'Grid-connected']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>24.0</x>
                    <y>16.0</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>14e0fae935ae11eb92aa509a4c4e2fb4</id>
                <name><![CDATA[Genset Real Power]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['Microturbine.Three-phase Meter1.POWER_P']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>500</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>416.0</y>
                    <width>416</width>
                    <height>248</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>14e0faea35ae11ebaa4a509a4c4e2fb4</id>
                <name><![CDATA[Line-to-Line Voltage]]></name>
                <type>Gauge</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Microturbine.BE1-25A Synchronizer.|E|]]></signal_name>
                <unit><![CDATA[kV]]></unit>
                <automatic_unit>False</automatic_unit>
                <updateRate>500</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>96.0</x>
                    <y>224.0</y>
                    <width>256</width>
                    <height>168</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>27.6</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>14e0faeb35ae11eb8d16509a4c4e2fb4</id>
                <name><![CDATA[Sync]]></name>
                <type>PhasorGraphDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ ['Phasor 1 name', Phasor 1 phase, Phasor 1 magnitude],
#                      ['Phasor X name', Phasor X phase, Phasor X magnitude] ]
displayValue = []

]]></code>
                <signals><![CDATA[]]></signals>
                <updateRate>500</updateRate>
                <background_color>#ffffff</background_color>
                <hierarchy_position>2</hierarchy_position>
                <phasors_data>
                    <phasor>
                        <display_name><![CDATA[Generator Voltage]]></display_name>
                        <magnitude_signal><![CDATA[Microturbine.BE1-25A Synchronizer.|E| pu]]></magnitude_signal>
                        <phase_signal><![CDATA[Microturbine.BE1-25A Synchronizer.theta_E]]></phase_signal>
                    </phasor>
                    <phasor>
                        <display_name><![CDATA[Bus Voltage]]></display_name>
                        <magnitude_signal><![CDATA[Microturbine.BE1-25A Synchronizer.|V|]]></magnitude_signal>
                        <phase_signal><![CDATA[Microturbine.BE1-25A Synchronizer.theta_V]]></phase_signal>
                    </phasor>
                    </phasors_data>
                <widget_settings>
                    <x>496.0</x>
                    <y>0.0</y>
                    <width>392</width>
                    <height>232</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <range_max>20.0</range_max>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>14e0faec35ae11eb8d6b509a4c4e2fb4</id>
                <name><![CDATA[Woodward Control]]></name>
                <type>Group</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[['14e0faed35ae11eb89d2509a4c4e2fb4', '14e0faee35ae11eb924e509a4c4e2fb4', '14e1221235ae11eb9aed509a4c4e2fb4']]]></components_ids>
                <hierarchy_position>2</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>264.0</x>
                    <y>0.0</y>
                    <width>248</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>14e0faed35ae11eb89d2509a4c4e2fb4</id>
                <name><![CDATA[P ref]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value('Microturbine.qd0(PU).Governor.AGC', inputValue)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value('Microturbine.qd0(PU).Governor.AGC', 0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL Control Panel API
# HIL Control Panel API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[W]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>48.0</x>
                    <y>112.0</y>
                    <width>144</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>14e0faee35ae11eb924e509a4c4e2fb4</id>
                <name><![CDATA[V ref]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value('Microturbine.qd0(PU).Vref', inputValue)]]></on_use_code>
                <on_start_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value('Microturbine.qd0(PU).Vref', 1)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL Control Panel API
# HIL Control Panel API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[1.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[p.u.]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>48.0</x>
                    <y>16.0</y>
                    <width>152</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>14e1221235ae11eb9aed509a4c4e2fb4</id>
                <name><![CDATA[w ref]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value('Microturbine.qd0(PU).wref', inputValue)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value('Microturbine.qd0(PU).wref', 1)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL Control Panel API
# HIL Control Panel API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[1.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[rad/s]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>48.0</x>
                    <y>64.0</y>
                    <width>160</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>14e1221335ae11eb83f9509a4c4e2fb4</id>
                <name><![CDATA[Genset Reactive Power]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['Microturbine.Three-phase Meter1.POWER_Q']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>500</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>408.0</x>
                    <y>408.0</y>
                    <width>480</width>
                    <height>256</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>14e1221435ae11eb886a509a4c4e2fb4</id>
                <name><![CDATA[Speed]]></name>
                <type>Gauge</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Microturbine.w_M]]></signal_name>
                <unit><![CDATA[rpm]]></unit>
                <automatic_unit>False</automatic_unit>
                <updateRate>500</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>520.0</x>
                    <y>216.0</y>
                    <width>256</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>4000.0</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        </components>
</ui_settings>